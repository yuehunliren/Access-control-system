
Access_control_door.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a88  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004b94  08004b94  00014b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c28  08004c28  00020448  2**0
                  CONTENTS
  4 .ARM          00000000  08004c28  08004c28  00020448  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c28  08004c28  00020448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c28  08004c28  00014c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c2c  08004c2c  00014c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000448  20000000  08004c30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000448  08005078  00020448  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000630  08005078  00020630  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020448  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125d6  00000000  00000000  00020471  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c34  00000000  00000000  00032a47  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011c0  00000000  00000000  00035680  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001070  00000000  00000000  00036840  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019ecf  00000000  00000000  000378b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fd53  00000000  00000000  0005177f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e1bc  00000000  00000000  000614d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ef68e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e98  00000000  00000000  000ef70c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000448 	.word	0x20000448
 8000128:	00000000 	.word	0x00000000
 800012c:	08004b7c 	.word	0x08004b7c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000044c 	.word	0x2000044c
 8000148:	08004b7c 	.word	0x08004b7c

0800014c <myDelayUS>:
#include "../Re_commDrv.h"

#if mcu_stm32f1_hal

void myDelayUS(uint64_t t)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t startval,tickn,delays,wait;
 
  startval = SysTick->VAL;
 8000156:	4b1d      	ldr	r3, [pc, #116]	; (80001cc <myDelayUS+0x80>)
 8000158:	689b      	ldr	r3, [r3, #8]
 800015a:	617b      	str	r3, [r7, #20]
  tickn = HAL_GetTick();
 800015c:	f001 f922 	bl	80013a4 <HAL_GetTick>
 8000160:	6138      	str	r0, [r7, #16]
  delays =t * 72; 
 8000162:	683a      	ldr	r2, [r7, #0]
 8000164:	4613      	mov	r3, r2
 8000166:	00db      	lsls	r3, r3, #3
 8000168:	4413      	add	r3, r2
 800016a:	00db      	lsls	r3, r3, #3
 800016c:	60fb      	str	r3, [r7, #12]
  if(delays > startval)
 800016e:	68fa      	ldr	r2, [r7, #12]
 8000170:	697b      	ldr	r3, [r7, #20]
 8000172:	429a      	cmp	r2, r3
 8000174:	d915      	bls.n	80001a2 <myDelayUS+0x56>
    {
      while(HAL_GetTick() == tickn)
 8000176:	bf00      	nop
 8000178:	f001 f914 	bl	80013a4 <HAL_GetTick>
 800017c:	4602      	mov	r2, r0
 800017e:	693b      	ldr	r3, [r7, #16]
 8000180:	4293      	cmp	r3, r2
 8000182:	d0f9      	beq.n	8000178 <myDelayUS+0x2c>
        {
 
        }
      wait = 72000 + startval - delays;
 8000184:	697a      	ldr	r2, [r7, #20]
 8000186:	68fb      	ldr	r3, [r7, #12]
 8000188:	1ad3      	subs	r3, r2, r3
 800018a:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800018e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000192:	60bb      	str	r3, [r7, #8]
      while(wait < SysTick->VAL)
 8000194:	bf00      	nop
 8000196:	4b0d      	ldr	r3, [pc, #52]	; (80001cc <myDelayUS+0x80>)
 8000198:	689b      	ldr	r3, [r3, #8]
 800019a:	68ba      	ldr	r2, [r7, #8]
 800019c:	429a      	cmp	r2, r3
 800019e:	d3fa      	bcc.n	8000196 <myDelayUS+0x4a>
      while(wait < SysTick->VAL && HAL_GetTick() == tickn)
        {
 
        }
    }
}
 80001a0:	e00f      	b.n	80001c2 <myDelayUS+0x76>
      wait = startval - delays;
 80001a2:	697a      	ldr	r2, [r7, #20]
 80001a4:	68fb      	ldr	r3, [r7, #12]
 80001a6:	1ad3      	subs	r3, r2, r3
 80001a8:	60bb      	str	r3, [r7, #8]
      while(wait < SysTick->VAL && HAL_GetTick() == tickn)
 80001aa:	bf00      	nop
 80001ac:	4b07      	ldr	r3, [pc, #28]	; (80001cc <myDelayUS+0x80>)
 80001ae:	689b      	ldr	r3, [r3, #8]
 80001b0:	68ba      	ldr	r2, [r7, #8]
 80001b2:	429a      	cmp	r2, r3
 80001b4:	d205      	bcs.n	80001c2 <myDelayUS+0x76>
 80001b6:	f001 f8f5 	bl	80013a4 <HAL_GetTick>
 80001ba:	4602      	mov	r2, r0
 80001bc:	693b      	ldr	r3, [r7, #16]
 80001be:	4293      	cmp	r3, r2
 80001c0:	d0f4      	beq.n	80001ac <myDelayUS+0x60>
}
 80001c2:	bf00      	nop
 80001c4:	3718      	adds	r7, #24
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	e000e010 	.word	0xe000e010

080001d0 <myDelayMS>:

void myDelayMS(uint64_t t)
{
 80001d0:	b590      	push	{r4, r7, lr}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	e9c7 0100 	strd	r0, r1, [r7]
	uint32_t i;
	for(i=0;i<t;i++) myDelayUS(1000);
 80001da:	2300      	movs	r3, #0
 80001dc:	60fb      	str	r3, [r7, #12]
 80001de:	e008      	b.n	80001f2 <myDelayMS+0x22>
 80001e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001e4:	f04f 0100 	mov.w	r1, #0
 80001e8:	f7ff ffb0 	bl	800014c <myDelayUS>
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	3301      	adds	r3, #1
 80001f0:	60fb      	str	r3, [r7, #12]
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	4619      	mov	r1, r3
 80001f6:	f04f 0200 	mov.w	r2, #0
 80001fa:	e9d7 3400 	ldrd	r3, r4, [r7]
 80001fe:	42a2      	cmp	r2, r4
 8000200:	bf08      	it	eq
 8000202:	4299      	cmpeq	r1, r3
 8000204:	d3ec      	bcc.n	80001e0 <myDelayMS+0x10>
}
 8000206:	bf00      	nop
 8000208:	3714      	adds	r7, #20
 800020a:	46bd      	mov	sp, r7
 800020c:	bd90      	pop	{r4, r7, pc}
	...

08000210 <setFrame>:
extern __IO uint8_t readSta;
uint8_t RxBuff[100];
uint8_t TxBuff[__MAXLEN] = {0};

void setFrame(void)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
	TxBuff[0] = 0xEF;
 8000216:	4b18      	ldr	r3, [pc, #96]	; (8000278 <setFrame+0x68>)
 8000218:	22ef      	movs	r2, #239	; 0xef
 800021a:	701a      	strb	r2, [r3, #0]
	TxBuff[1] = 0x01;
 800021c:	4b16      	ldr	r3, [pc, #88]	; (8000278 <setFrame+0x68>)
 800021e:	2201      	movs	r2, #1
 8000220:	705a      	strb	r2, [r3, #1]
	TxBuff[2] = AS608Addr >> 24;
 8000222:	4b16      	ldr	r3, [pc, #88]	; (800027c <setFrame+0x6c>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	0e1b      	lsrs	r3, r3, #24
 8000228:	b2da      	uxtb	r2, r3
 800022a:	4b13      	ldr	r3, [pc, #76]	; (8000278 <setFrame+0x68>)
 800022c:	709a      	strb	r2, [r3, #2]
	TxBuff[3] = AS608Addr >> 16;
 800022e:	4b13      	ldr	r3, [pc, #76]	; (800027c <setFrame+0x6c>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	0c1b      	lsrs	r3, r3, #16
 8000234:	b2da      	uxtb	r2, r3
 8000236:	4b10      	ldr	r3, [pc, #64]	; (8000278 <setFrame+0x68>)
 8000238:	70da      	strb	r2, [r3, #3]
	TxBuff[4] = AS608Addr >> 8;
 800023a:	4b10      	ldr	r3, [pc, #64]	; (800027c <setFrame+0x6c>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	0a1b      	lsrs	r3, r3, #8
 8000240:	b2da      	uxtb	r2, r3
 8000242:	4b0d      	ldr	r3, [pc, #52]	; (8000278 <setFrame+0x68>)
 8000244:	711a      	strb	r2, [r3, #4]
	TxBuff[5] = AS608Addr;
 8000246:	4b0d      	ldr	r3, [pc, #52]	; (800027c <setFrame+0x6c>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	b2da      	uxtb	r2, r3
 800024c:	4b0a      	ldr	r3, [pc, #40]	; (8000278 <setFrame+0x68>)
 800024e:	715a      	strb	r2, [r3, #5]
	for(int i = 6;i<__MAXLEN;++i)
 8000250:	2306      	movs	r3, #6
 8000252:	607b      	str	r3, [r7, #4]
 8000254:	e007      	b.n	8000266 <setFrame+0x56>
	{
		TxBuff[i] = 0;
 8000256:	4a08      	ldr	r2, [pc, #32]	; (8000278 <setFrame+0x68>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4413      	add	r3, r2
 800025c:	2200      	movs	r2, #0
 800025e:	701a      	strb	r2, [r3, #0]
	for(int i = 6;i<__MAXLEN;++i)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	3301      	adds	r3, #1
 8000264:	607b      	str	r3, [r7, #4]
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	2b31      	cmp	r3, #49	; 0x31
 800026a:	ddf4      	ble.n	8000256 <setFrame+0x46>
	}
}
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	bc80      	pop	{r7}
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	20000464 	.word	0x20000464
 800027c:	20000000 	.word	0x20000000

08000280 <PS_GetImage>:
uint8_t PS_GetImage(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef xx;
	uint8_t packType = 0x01;		
 8000286:	2301      	movs	r3, #1
 8000288:	73fb      	strb	r3, [r7, #15]
	uint16_t packLen = 0x03;
 800028a:	2303      	movs	r3, #3
 800028c:	81bb      	strh	r3, [r7, #12]
	uint8_t cmd = 0x01;				//pack command
 800028e:	2301      	movs	r3, #1
 8000290:	72fb      	strb	r3, [r7, #11]
	uint16_t sum=0;					//frame sum
 8000292:	2300      	movs	r3, #0
 8000294:	813b      	strh	r3, [r7, #8]
	
	uint16_t ansLen = 3;				// answer pack length
 8000296:	2303      	movs	r3, #3
 8000298:	80fb      	strh	r3, [r7, #6]
	
	uint8_t temp = 6;				//....just temp
 800029a:	2306      	movs	r3, #6
 800029c:	717b      	strb	r3, [r7, #5]
	
	setFrame();
 800029e:	f7ff ffb7 	bl	8000210 <setFrame>
	
	sum = packType + packLen + cmd;
 80002a2:	7bfb      	ldrb	r3, [r7, #15]
 80002a4:	b29a      	uxth	r2, r3
 80002a6:	89bb      	ldrh	r3, [r7, #12]
 80002a8:	4413      	add	r3, r2
 80002aa:	b29a      	uxth	r2, r3
 80002ac:	7afb      	ldrb	r3, [r7, #11]
 80002ae:	b29b      	uxth	r3, r3
 80002b0:	4413      	add	r3, r2
 80002b2:	813b      	strh	r3, [r7, #8]
	
	TxBuff[temp++] = packType;
 80002b4:	797b      	ldrb	r3, [r7, #5]
 80002b6:	1c5a      	adds	r2, r3, #1
 80002b8:	717a      	strb	r2, [r7, #5]
 80002ba:	4619      	mov	r1, r3
 80002bc:	4a27      	ldr	r2, [pc, #156]	; (800035c <PS_GetImage+0xdc>)
 80002be:	7bfb      	ldrb	r3, [r7, #15]
 80002c0:	5453      	strb	r3, [r2, r1]
	
	TxBuff[temp++] = packLen>>8;
 80002c2:	89bb      	ldrh	r3, [r7, #12]
 80002c4:	0a1b      	lsrs	r3, r3, #8
 80002c6:	b299      	uxth	r1, r3
 80002c8:	797b      	ldrb	r3, [r7, #5]
 80002ca:	1c5a      	adds	r2, r3, #1
 80002cc:	717a      	strb	r2, [r7, #5]
 80002ce:	461a      	mov	r2, r3
 80002d0:	b2c9      	uxtb	r1, r1
 80002d2:	4b22      	ldr	r3, [pc, #136]	; (800035c <PS_GetImage+0xdc>)
 80002d4:	5499      	strb	r1, [r3, r2]
	TxBuff[temp++] = packLen;
 80002d6:	797b      	ldrb	r3, [r7, #5]
 80002d8:	1c5a      	adds	r2, r3, #1
 80002da:	717a      	strb	r2, [r7, #5]
 80002dc:	461a      	mov	r2, r3
 80002de:	89bb      	ldrh	r3, [r7, #12]
 80002e0:	b2d9      	uxtb	r1, r3
 80002e2:	4b1e      	ldr	r3, [pc, #120]	; (800035c <PS_GetImage+0xdc>)
 80002e4:	5499      	strb	r1, [r3, r2]
	
	TxBuff[temp++] = cmd;
 80002e6:	797b      	ldrb	r3, [r7, #5]
 80002e8:	1c5a      	adds	r2, r3, #1
 80002ea:	717a      	strb	r2, [r7, #5]
 80002ec:	4619      	mov	r1, r3
 80002ee:	4a1b      	ldr	r2, [pc, #108]	; (800035c <PS_GetImage+0xdc>)
 80002f0:	7afb      	ldrb	r3, [r7, #11]
 80002f2:	5453      	strb	r3, [r2, r1]
	
	TxBuff[temp++] = sum>>8;
 80002f4:	893b      	ldrh	r3, [r7, #8]
 80002f6:	0a1b      	lsrs	r3, r3, #8
 80002f8:	b299      	uxth	r1, r3
 80002fa:	797b      	ldrb	r3, [r7, #5]
 80002fc:	1c5a      	adds	r2, r3, #1
 80002fe:	717a      	strb	r2, [r7, #5]
 8000300:	461a      	mov	r2, r3
 8000302:	b2c9      	uxtb	r1, r1
 8000304:	4b15      	ldr	r3, [pc, #84]	; (800035c <PS_GetImage+0xdc>)
 8000306:	5499      	strb	r1, [r3, r2]
	TxBuff[temp++] = sum;
 8000308:	797b      	ldrb	r3, [r7, #5]
 800030a:	1c5a      	adds	r2, r3, #1
 800030c:	717a      	strb	r2, [r7, #5]
 800030e:	461a      	mov	r2, r3
 8000310:	893b      	ldrh	r3, [r7, #8]
 8000312:	b2d9      	uxtb	r1, r3
 8000314:	4b11      	ldr	r3, [pc, #68]	; (800035c <PS_GetImage+0xdc>)
 8000316:	5499      	strb	r1, [r3, r2]
	
	HAL_UART_Transmit(&huart2,TxBuff,temp,200);
 8000318:	797b      	ldrb	r3, [r7, #5]
 800031a:	b29a      	uxth	r2, r3
 800031c:	23c8      	movs	r3, #200	; 0xc8
 800031e:	490f      	ldr	r1, [pc, #60]	; (800035c <PS_GetImage+0xdc>)
 8000320:	480f      	ldr	r0, [pc, #60]	; (8000360 <PS_GetImage+0xe0>)
 8000322:	f003 fb4a 	bl	80039ba <HAL_UART_Transmit>

	sum=0;
 8000326:	2300      	movs	r3, #0
 8000328:	813b      	strh	r3, [r7, #8]
	temp = ansLen+9;
 800032a:	88fb      	ldrh	r3, [r7, #6]
 800032c:	b2db      	uxtb	r3, r3
 800032e:	3309      	adds	r3, #9
 8000330:	717b      	strb	r3, [r7, #5]
	xx = HAL_UART_Receive(&huart2,RxBuff,temp,5000);
 8000332:	797b      	ldrb	r3, [r7, #5]
 8000334:	b29a      	uxth	r2, r3
 8000336:	f241 3388 	movw	r3, #5000	; 0x1388
 800033a:	490a      	ldr	r1, [pc, #40]	; (8000364 <PS_GetImage+0xe4>)
 800033c:	4808      	ldr	r0, [pc, #32]	; (8000360 <PS_GetImage+0xe0>)
 800033e:	f003 fbce 	bl	8003ade <HAL_UART_Receive>
 8000342:	4603      	mov	r3, r0
 8000344:	713b      	strb	r3, [r7, #4]
	if (xx!= HAL_OK)
 8000346:	793b      	ldrb	r3, [r7, #4]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d002      	beq.n	8000352 <PS_GetImage+0xd2>
	{
			return RxBuff[9];
 800034c:	4b05      	ldr	r3, [pc, #20]	; (8000364 <PS_GetImage+0xe4>)
 800034e:	7a5b      	ldrb	r3, [r3, #9]
 8000350:	e000      	b.n	8000354 <PS_GetImage+0xd4>
	}
	else
		return 0xff;
 8000352:	23ff      	movs	r3, #255	; 0xff
}
 8000354:	4618      	mov	r0, r3
 8000356:	3710      	adds	r7, #16
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	20000464 	.word	0x20000464
 8000360:	200005e8 	.word	0x200005e8
 8000364:	200004bc 	.word	0x200004bc

08000368 <PS_GenChar>:

uint8_t PS_GenChar(uint8_t BufferID)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b088      	sub	sp, #32
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	71fb      	strb	r3, [r7, #7]
	uint8_t packType = 0x01;		
 8000372:	2301      	movs	r3, #1
 8000374:	75fb      	strb	r3, [r7, #23]
	uint16_t packLen = 0x04;
 8000376:	2304      	movs	r3, #4
 8000378:	82bb      	strh	r3, [r7, #20]
	uint8_t cmd = 0x02;				//pack command
 800037a:	2302      	movs	r3, #2
 800037c:	74fb      	strb	r3, [r7, #19]
	uint16_t sum=0;					//frame sum
 800037e:	2300      	movs	r3, #0
 8000380:	83fb      	strh	r3, [r7, #30]
	
	uint16_t ansLen = 3;				// answer pack length
 8000382:	2303      	movs	r3, #3
 8000384:	823b      	strh	r3, [r7, #16]
	
	uint8_t temp = 6;				//....just temp
 8000386:	2306      	movs	r3, #6
 8000388:	73fb      	strb	r3, [r7, #15]
	
	setFrame();
 800038a:	f7ff ff41 	bl	8000210 <setFrame>
	//////////////
	sum = packType + packLen + cmd + BufferID;
 800038e:	7dfb      	ldrb	r3, [r7, #23]
 8000390:	b29a      	uxth	r2, r3
 8000392:	8abb      	ldrh	r3, [r7, #20]
 8000394:	4413      	add	r3, r2
 8000396:	b29a      	uxth	r2, r3
 8000398:	7cfb      	ldrb	r3, [r7, #19]
 800039a:	b29b      	uxth	r3, r3
 800039c:	4413      	add	r3, r2
 800039e:	b29a      	uxth	r2, r3
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	b29b      	uxth	r3, r3
 80003a4:	4413      	add	r3, r2
 80003a6:	83fb      	strh	r3, [r7, #30]
	//////////////
	TxBuff[temp++] = packType;
 80003a8:	7bfb      	ldrb	r3, [r7, #15]
 80003aa:	1c5a      	adds	r2, r3, #1
 80003ac:	73fa      	strb	r2, [r7, #15]
 80003ae:	4619      	mov	r1, r3
 80003b0:	4a3b      	ldr	r2, [pc, #236]	; (80004a0 <PS_GenChar+0x138>)
 80003b2:	7dfb      	ldrb	r3, [r7, #23]
 80003b4:	5453      	strb	r3, [r2, r1]
	
	TxBuff[temp++] = packLen>>8;
 80003b6:	8abb      	ldrh	r3, [r7, #20]
 80003b8:	0a1b      	lsrs	r3, r3, #8
 80003ba:	b299      	uxth	r1, r3
 80003bc:	7bfb      	ldrb	r3, [r7, #15]
 80003be:	1c5a      	adds	r2, r3, #1
 80003c0:	73fa      	strb	r2, [r7, #15]
 80003c2:	461a      	mov	r2, r3
 80003c4:	b2c9      	uxtb	r1, r1
 80003c6:	4b36      	ldr	r3, [pc, #216]	; (80004a0 <PS_GenChar+0x138>)
 80003c8:	5499      	strb	r1, [r3, r2]
	TxBuff[temp++] = packLen;
 80003ca:	7bfb      	ldrb	r3, [r7, #15]
 80003cc:	1c5a      	adds	r2, r3, #1
 80003ce:	73fa      	strb	r2, [r7, #15]
 80003d0:	461a      	mov	r2, r3
 80003d2:	8abb      	ldrh	r3, [r7, #20]
 80003d4:	b2d9      	uxtb	r1, r3
 80003d6:	4b32      	ldr	r3, [pc, #200]	; (80004a0 <PS_GenChar+0x138>)
 80003d8:	5499      	strb	r1, [r3, r2]
	
	TxBuff[temp++] = cmd;
 80003da:	7bfb      	ldrb	r3, [r7, #15]
 80003dc:	1c5a      	adds	r2, r3, #1
 80003de:	73fa      	strb	r2, [r7, #15]
 80003e0:	4619      	mov	r1, r3
 80003e2:	4a2f      	ldr	r2, [pc, #188]	; (80004a0 <PS_GenChar+0x138>)
 80003e4:	7cfb      	ldrb	r3, [r7, #19]
 80003e6:	5453      	strb	r3, [r2, r1]
	TxBuff[temp++] = BufferID;
 80003e8:	7bfb      	ldrb	r3, [r7, #15]
 80003ea:	1c5a      	adds	r2, r3, #1
 80003ec:	73fa      	strb	r2, [r7, #15]
 80003ee:	4619      	mov	r1, r3
 80003f0:	4a2b      	ldr	r2, [pc, #172]	; (80004a0 <PS_GenChar+0x138>)
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	5453      	strb	r3, [r2, r1]
	TxBuff[temp++] = sum>>8;
 80003f6:	8bfb      	ldrh	r3, [r7, #30]
 80003f8:	0a1b      	lsrs	r3, r3, #8
 80003fa:	b299      	uxth	r1, r3
 80003fc:	7bfb      	ldrb	r3, [r7, #15]
 80003fe:	1c5a      	adds	r2, r3, #1
 8000400:	73fa      	strb	r2, [r7, #15]
 8000402:	461a      	mov	r2, r3
 8000404:	b2c9      	uxtb	r1, r1
 8000406:	4b26      	ldr	r3, [pc, #152]	; (80004a0 <PS_GenChar+0x138>)
 8000408:	5499      	strb	r1, [r3, r2]
	TxBuff[temp++] = sum;
 800040a:	7bfb      	ldrb	r3, [r7, #15]
 800040c:	1c5a      	adds	r2, r3, #1
 800040e:	73fa      	strb	r2, [r7, #15]
 8000410:	461a      	mov	r2, r3
 8000412:	8bfb      	ldrh	r3, [r7, #30]
 8000414:	b2d9      	uxtb	r1, r3
 8000416:	4b22      	ldr	r3, [pc, #136]	; (80004a0 <PS_GenChar+0x138>)
 8000418:	5499      	strb	r1, [r3, r2]
	
	HAL_UART_Transmit(&huart2,TxBuff,temp,200);
 800041a:	7bfb      	ldrb	r3, [r7, #15]
 800041c:	b29a      	uxth	r2, r3
 800041e:	23c8      	movs	r3, #200	; 0xc8
 8000420:	491f      	ldr	r1, [pc, #124]	; (80004a0 <PS_GenChar+0x138>)
 8000422:	4820      	ldr	r0, [pc, #128]	; (80004a4 <PS_GenChar+0x13c>)
 8000424:	f003 fac9 	bl	80039ba <HAL_UART_Transmit>
	
	sum=0;
 8000428:	2300      	movs	r3, #0
 800042a:	83fb      	strh	r3, [r7, #30]
	
	temp = ansLen+9;
 800042c:	8a3b      	ldrh	r3, [r7, #16]
 800042e:	b2db      	uxtb	r3, r3
 8000430:	3309      	adds	r3, #9
 8000432:	73fb      	strb	r3, [r7, #15]
	if (HAL_UART_Receive(&huart2,RxBuff,temp,2000) == HAL_OK)
 8000434:	7bfb      	ldrb	r3, [r7, #15]
 8000436:	b29a      	uxth	r2, r3
 8000438:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800043c:	491a      	ldr	r1, [pc, #104]	; (80004a8 <PS_GenChar+0x140>)
 800043e:	4819      	ldr	r0, [pc, #100]	; (80004a4 <PS_GenChar+0x13c>)
 8000440:	f003 fb4d 	bl	8003ade <HAL_UART_Receive>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d125      	bne.n	8000496 <PS_GenChar+0x12e>
	{
		for(int i = 6; i<temp-2; i++)
 800044a:	2306      	movs	r3, #6
 800044c:	61bb      	str	r3, [r7, #24]
 800044e:	e00a      	b.n	8000466 <PS_GenChar+0xfe>
		{
			sum+=RxBuff[i];
 8000450:	4a15      	ldr	r2, [pc, #84]	; (80004a8 <PS_GenChar+0x140>)
 8000452:	69bb      	ldr	r3, [r7, #24]
 8000454:	4413      	add	r3, r2
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	b29a      	uxth	r2, r3
 800045a:	8bfb      	ldrh	r3, [r7, #30]
 800045c:	4413      	add	r3, r2
 800045e:	83fb      	strh	r3, [r7, #30]
		for(int i = 6; i<temp-2; i++)
 8000460:	69bb      	ldr	r3, [r7, #24]
 8000462:	3301      	adds	r3, #1
 8000464:	61bb      	str	r3, [r7, #24]
 8000466:	7bfb      	ldrb	r3, [r7, #15]
 8000468:	3b02      	subs	r3, #2
 800046a:	69ba      	ldr	r2, [r7, #24]
 800046c:	429a      	cmp	r2, r3
 800046e:	dbef      	blt.n	8000450 <PS_GenChar+0xe8>
		}
		if(sum == RxBuff[temp-1]+(RxBuff[temp-2]<<8))
 8000470:	8bfa      	ldrh	r2, [r7, #30]
 8000472:	7bfb      	ldrb	r3, [r7, #15]
 8000474:	3b01      	subs	r3, #1
 8000476:	490c      	ldr	r1, [pc, #48]	; (80004a8 <PS_GenChar+0x140>)
 8000478:	5ccb      	ldrb	r3, [r1, r3]
 800047a:	4618      	mov	r0, r3
 800047c:	7bfb      	ldrb	r3, [r7, #15]
 800047e:	3b02      	subs	r3, #2
 8000480:	4909      	ldr	r1, [pc, #36]	; (80004a8 <PS_GenChar+0x140>)
 8000482:	5ccb      	ldrb	r3, [r1, r3]
 8000484:	021b      	lsls	r3, r3, #8
 8000486:	4403      	add	r3, r0
 8000488:	429a      	cmp	r2, r3
 800048a:	d102      	bne.n	8000492 <PS_GenChar+0x12a>
			return RxBuff[9];
 800048c:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <PS_GenChar+0x140>)
 800048e:	7a5b      	ldrb	r3, [r3, #9]
 8000490:	e002      	b.n	8000498 <PS_GenChar+0x130>
		return 0xff;
 8000492:	23ff      	movs	r3, #255	; 0xff
 8000494:	e000      	b.n	8000498 <PS_GenChar+0x130>
	}
	else
		return 0xff;
 8000496:	23ff      	movs	r3, #255	; 0xff
}
 8000498:	4618      	mov	r0, r3
 800049a:	3720      	adds	r7, #32
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	20000464 	.word	0x20000464
 80004a4:	200005e8 	.word	0x200005e8
 80004a8:	200004bc 	.word	0x200004bc

080004ac <PS_Search>:
	else
		return 0xff;
}

u8 PS_Search(u8 BufferID, u16 StartPage, u16 PageNum,uint16_t* pageID,uint16_t* score)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b088      	sub	sp, #32
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	607b      	str	r3, [r7, #4]
 80004b4:	4603      	mov	r3, r0
 80004b6:	73fb      	strb	r3, [r7, #15]
 80004b8:	460b      	mov	r3, r1
 80004ba:	81bb      	strh	r3, [r7, #12]
 80004bc:	4613      	mov	r3, r2
 80004be:	817b      	strh	r3, [r7, #10]
	uint8_t packType = 0x01;		
 80004c0:	2301      	movs	r3, #1
 80004c2:	77fb      	strb	r3, [r7, #31]
	uint16_t packLen = 0x08;
 80004c4:	2308      	movs	r3, #8
 80004c6:	83bb      	strh	r3, [r7, #28]
	uint8_t cmd = 0x04;				//pack command
 80004c8:	2304      	movs	r3, #4
 80004ca:	76fb      	strb	r3, [r7, #27]
	uint16_t ansLen = 7;				// answer pack length
 80004cc:	2307      	movs	r3, #7
 80004ce:	833b      	strh	r3, [r7, #24]
	
	uint16_t sum=0;					//frame sum
 80004d0:	2300      	movs	r3, #0
 80004d2:	82fb      	strh	r3, [r7, #22]
	uint8_t temp = 6;				//....just temp
 80004d4:	2306      	movs	r3, #6
 80004d6:	757b      	strb	r3, [r7, #21]
	
	setFrame();
 80004d8:	f7ff fe9a 	bl	8000210 <setFrame>
	sum = packType + packLen + cmd + BufferID + StartPage + PageNum;
 80004dc:	7ffb      	ldrb	r3, [r7, #31]
 80004de:	b29a      	uxth	r2, r3
 80004e0:	8bbb      	ldrh	r3, [r7, #28]
 80004e2:	4413      	add	r3, r2
 80004e4:	b29a      	uxth	r2, r3
 80004e6:	7efb      	ldrb	r3, [r7, #27]
 80004e8:	b29b      	uxth	r3, r3
 80004ea:	4413      	add	r3, r2
 80004ec:	b29a      	uxth	r2, r3
 80004ee:	7bfb      	ldrb	r3, [r7, #15]
 80004f0:	b29b      	uxth	r3, r3
 80004f2:	4413      	add	r3, r2
 80004f4:	b29a      	uxth	r2, r3
 80004f6:	89bb      	ldrh	r3, [r7, #12]
 80004f8:	4413      	add	r3, r2
 80004fa:	b29a      	uxth	r2, r3
 80004fc:	897b      	ldrh	r3, [r7, #10]
 80004fe:	4413      	add	r3, r2
 8000500:	82fb      	strh	r3, [r7, #22]
	
	TxBuff[temp++] = packType;
 8000502:	7d7b      	ldrb	r3, [r7, #21]
 8000504:	1c5a      	adds	r2, r3, #1
 8000506:	757a      	strb	r2, [r7, #21]
 8000508:	4619      	mov	r1, r3
 800050a:	4a6a      	ldr	r2, [pc, #424]	; (80006b4 <PS_Search+0x208>)
 800050c:	7ffb      	ldrb	r3, [r7, #31]
 800050e:	5453      	strb	r3, [r2, r1]
	TxBuff[temp++] = packLen>>8;
 8000510:	8bbb      	ldrh	r3, [r7, #28]
 8000512:	0a1b      	lsrs	r3, r3, #8
 8000514:	b299      	uxth	r1, r3
 8000516:	7d7b      	ldrb	r3, [r7, #21]
 8000518:	1c5a      	adds	r2, r3, #1
 800051a:	757a      	strb	r2, [r7, #21]
 800051c:	461a      	mov	r2, r3
 800051e:	b2c9      	uxtb	r1, r1
 8000520:	4b64      	ldr	r3, [pc, #400]	; (80006b4 <PS_Search+0x208>)
 8000522:	5499      	strb	r1, [r3, r2]
	TxBuff[temp++] = packLen;
 8000524:	7d7b      	ldrb	r3, [r7, #21]
 8000526:	1c5a      	adds	r2, r3, #1
 8000528:	757a      	strb	r2, [r7, #21]
 800052a:	461a      	mov	r2, r3
 800052c:	8bbb      	ldrh	r3, [r7, #28]
 800052e:	b2d9      	uxtb	r1, r3
 8000530:	4b60      	ldr	r3, [pc, #384]	; (80006b4 <PS_Search+0x208>)
 8000532:	5499      	strb	r1, [r3, r2]
	TxBuff[temp++] = cmd;
 8000534:	7d7b      	ldrb	r3, [r7, #21]
 8000536:	1c5a      	adds	r2, r3, #1
 8000538:	757a      	strb	r2, [r7, #21]
 800053a:	4619      	mov	r1, r3
 800053c:	4a5d      	ldr	r2, [pc, #372]	; (80006b4 <PS_Search+0x208>)
 800053e:	7efb      	ldrb	r3, [r7, #27]
 8000540:	5453      	strb	r3, [r2, r1]
	///--->Here
	TxBuff[temp++] = BufferID;
 8000542:	7d7b      	ldrb	r3, [r7, #21]
 8000544:	1c5a      	adds	r2, r3, #1
 8000546:	757a      	strb	r2, [r7, #21]
 8000548:	4619      	mov	r1, r3
 800054a:	4a5a      	ldr	r2, [pc, #360]	; (80006b4 <PS_Search+0x208>)
 800054c:	7bfb      	ldrb	r3, [r7, #15]
 800054e:	5453      	strb	r3, [r2, r1]
	TxBuff[temp++] = StartPage>>8;
 8000550:	89bb      	ldrh	r3, [r7, #12]
 8000552:	0a1b      	lsrs	r3, r3, #8
 8000554:	b299      	uxth	r1, r3
 8000556:	7d7b      	ldrb	r3, [r7, #21]
 8000558:	1c5a      	adds	r2, r3, #1
 800055a:	757a      	strb	r2, [r7, #21]
 800055c:	461a      	mov	r2, r3
 800055e:	b2c9      	uxtb	r1, r1
 8000560:	4b54      	ldr	r3, [pc, #336]	; (80006b4 <PS_Search+0x208>)
 8000562:	5499      	strb	r1, [r3, r2]
	TxBuff[temp++] = StartPage;
 8000564:	7d7b      	ldrb	r3, [r7, #21]
 8000566:	1c5a      	adds	r2, r3, #1
 8000568:	757a      	strb	r2, [r7, #21]
 800056a:	461a      	mov	r2, r3
 800056c:	89bb      	ldrh	r3, [r7, #12]
 800056e:	b2d9      	uxtb	r1, r3
 8000570:	4b50      	ldr	r3, [pc, #320]	; (80006b4 <PS_Search+0x208>)
 8000572:	5499      	strb	r1, [r3, r2]
	TxBuff[temp++] = PageNum>>8;
 8000574:	897b      	ldrh	r3, [r7, #10]
 8000576:	0a1b      	lsrs	r3, r3, #8
 8000578:	b299      	uxth	r1, r3
 800057a:	7d7b      	ldrb	r3, [r7, #21]
 800057c:	1c5a      	adds	r2, r3, #1
 800057e:	757a      	strb	r2, [r7, #21]
 8000580:	461a      	mov	r2, r3
 8000582:	b2c9      	uxtb	r1, r1
 8000584:	4b4b      	ldr	r3, [pc, #300]	; (80006b4 <PS_Search+0x208>)
 8000586:	5499      	strb	r1, [r3, r2]
	TxBuff[temp++] = PageNum;
 8000588:	7d7b      	ldrb	r3, [r7, #21]
 800058a:	1c5a      	adds	r2, r3, #1
 800058c:	757a      	strb	r2, [r7, #21]
 800058e:	461a      	mov	r2, r3
 8000590:	897b      	ldrh	r3, [r7, #10]
 8000592:	b2d9      	uxtb	r1, r3
 8000594:	4b47      	ldr	r3, [pc, #284]	; (80006b4 <PS_Search+0x208>)
 8000596:	5499      	strb	r1, [r3, r2]
	TxBuff[temp++] = sum>>8;
 8000598:	8afb      	ldrh	r3, [r7, #22]
 800059a:	0a1b      	lsrs	r3, r3, #8
 800059c:	b299      	uxth	r1, r3
 800059e:	7d7b      	ldrb	r3, [r7, #21]
 80005a0:	1c5a      	adds	r2, r3, #1
 80005a2:	757a      	strb	r2, [r7, #21]
 80005a4:	461a      	mov	r2, r3
 80005a6:	b2c9      	uxtb	r1, r1
 80005a8:	4b42      	ldr	r3, [pc, #264]	; (80006b4 <PS_Search+0x208>)
 80005aa:	5499      	strb	r1, [r3, r2]
	TxBuff[temp++] = sum;
 80005ac:	7d7b      	ldrb	r3, [r7, #21]
 80005ae:	1c5a      	adds	r2, r3, #1
 80005b0:	757a      	strb	r2, [r7, #21]
 80005b2:	461a      	mov	r2, r3
 80005b4:	8afb      	ldrh	r3, [r7, #22]
 80005b6:	b2d9      	uxtb	r1, r3
 80005b8:	4b3e      	ldr	r3, [pc, #248]	; (80006b4 <PS_Search+0x208>)
 80005ba:	5499      	strb	r1, [r3, r2]
	
	HAL_UART_Transmit(&huart2,TxBuff,temp,200);
 80005bc:	7d7b      	ldrb	r3, [r7, #21]
 80005be:	b29a      	uxth	r2, r3
 80005c0:	23c8      	movs	r3, #200	; 0xc8
 80005c2:	493c      	ldr	r1, [pc, #240]	; (80006b4 <PS_Search+0x208>)
 80005c4:	483c      	ldr	r0, [pc, #240]	; (80006b8 <PS_Search+0x20c>)
 80005c6:	f003 f9f8 	bl	80039ba <HAL_UART_Transmit>
	
	sum=0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	82fb      	strh	r3, [r7, #22]
	
	temp = ansLen+9;
 80005ce:	8b3b      	ldrh	r3, [r7, #24]
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	3309      	adds	r3, #9
 80005d4:	757b      	strb	r3, [r7, #21]
	if (HAL_UART_Receive(&huart2,RxBuff,temp,2000) == HAL_OK)
 80005d6:	7d7b      	ldrb	r3, [r7, #21]
 80005d8:	b29a      	uxth	r2, r3
 80005da:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80005de:	4937      	ldr	r1, [pc, #220]	; (80006bc <PS_Search+0x210>)
 80005e0:	4835      	ldr	r0, [pc, #212]	; (80006b8 <PS_Search+0x20c>)
 80005e2:	f003 fa7c 	bl	8003ade <HAL_UART_Receive>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d15d      	bne.n	80006a8 <PS_Search+0x1fc>
	{
		sum += RxBuff[6];			//anspack identify
 80005ec:	4b33      	ldr	r3, [pc, #204]	; (80006bc <PS_Search+0x210>)
 80005ee:	799b      	ldrb	r3, [r3, #6]
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	8afb      	ldrh	r3, [r7, #22]
 80005f4:	4413      	add	r3, r2
 80005f6:	82fb      	strh	r3, [r7, #22]
		sum += (RxBuff[7]<<8)+RxBuff[8];		//ansLen
 80005f8:	4b30      	ldr	r3, [pc, #192]	; (80006bc <PS_Search+0x210>)
 80005fa:	79db      	ldrb	r3, [r3, #7]
 80005fc:	b29b      	uxth	r3, r3
 80005fe:	021b      	lsls	r3, r3, #8
 8000600:	b29a      	uxth	r2, r3
 8000602:	4b2e      	ldr	r3, [pc, #184]	; (80006bc <PS_Search+0x210>)
 8000604:	7a1b      	ldrb	r3, [r3, #8]
 8000606:	b29b      	uxth	r3, r3
 8000608:	4413      	add	r3, r2
 800060a:	b29a      	uxth	r2, r3
 800060c:	8afb      	ldrh	r3, [r7, #22]
 800060e:	4413      	add	r3, r2
 8000610:	82fb      	strh	r3, [r7, #22]
		sum += RxBuff[9];					//yes code	
 8000612:	4b2a      	ldr	r3, [pc, #168]	; (80006bc <PS_Search+0x210>)
 8000614:	7a5b      	ldrb	r3, [r3, #9]
 8000616:	b29a      	uxth	r2, r3
 8000618:	8afb      	ldrh	r3, [r7, #22]
 800061a:	4413      	add	r3, r2
 800061c:	82fb      	strh	r3, [r7, #22]
		sum += (RxBuff[10]<<8)+RxBuff[11];	//page id 
 800061e:	4b27      	ldr	r3, [pc, #156]	; (80006bc <PS_Search+0x210>)
 8000620:	7a9b      	ldrb	r3, [r3, #10]
 8000622:	b29b      	uxth	r3, r3
 8000624:	021b      	lsls	r3, r3, #8
 8000626:	b29a      	uxth	r2, r3
 8000628:	4b24      	ldr	r3, [pc, #144]	; (80006bc <PS_Search+0x210>)
 800062a:	7adb      	ldrb	r3, [r3, #11]
 800062c:	b29b      	uxth	r3, r3
 800062e:	4413      	add	r3, r2
 8000630:	b29a      	uxth	r2, r3
 8000632:	8afb      	ldrh	r3, [r7, #22]
 8000634:	4413      	add	r3, r2
 8000636:	82fb      	strh	r3, [r7, #22]
		sum += (RxBuff[12]<<8)+RxBuff[13];	//score
 8000638:	4b20      	ldr	r3, [pc, #128]	; (80006bc <PS_Search+0x210>)
 800063a:	7b1b      	ldrb	r3, [r3, #12]
 800063c:	b29b      	uxth	r3, r3
 800063e:	021b      	lsls	r3, r3, #8
 8000640:	b29a      	uxth	r2, r3
 8000642:	4b1e      	ldr	r3, [pc, #120]	; (80006bc <PS_Search+0x210>)
 8000644:	7b5b      	ldrb	r3, [r3, #13]
 8000646:	b29b      	uxth	r3, r3
 8000648:	4413      	add	r3, r2
 800064a:	b29a      	uxth	r2, r3
 800064c:	8afb      	ldrh	r3, [r7, #22]
 800064e:	4413      	add	r3, r2
 8000650:	82fb      	strh	r3, [r7, #22]
		if(sum == RxBuff[temp-1]+(RxBuff[temp-2]<<8))
 8000652:	8afa      	ldrh	r2, [r7, #22]
 8000654:	7d7b      	ldrb	r3, [r7, #21]
 8000656:	3b01      	subs	r3, #1
 8000658:	4918      	ldr	r1, [pc, #96]	; (80006bc <PS_Search+0x210>)
 800065a:	5ccb      	ldrb	r3, [r1, r3]
 800065c:	4618      	mov	r0, r3
 800065e:	7d7b      	ldrb	r3, [r7, #21]
 8000660:	3b02      	subs	r3, #2
 8000662:	4916      	ldr	r1, [pc, #88]	; (80006bc <PS_Search+0x210>)
 8000664:	5ccb      	ldrb	r3, [r1, r3]
 8000666:	021b      	lsls	r3, r3, #8
 8000668:	4403      	add	r3, r0
 800066a:	429a      	cmp	r2, r3
 800066c:	d11a      	bne.n	80006a4 <PS_Search+0x1f8>
		{
			*pageID = (RxBuff[10]<<8)+RxBuff[11];	//page id 
 800066e:	4b13      	ldr	r3, [pc, #76]	; (80006bc <PS_Search+0x210>)
 8000670:	7a9b      	ldrb	r3, [r3, #10]
 8000672:	b29b      	uxth	r3, r3
 8000674:	021b      	lsls	r3, r3, #8
 8000676:	b29a      	uxth	r2, r3
 8000678:	4b10      	ldr	r3, [pc, #64]	; (80006bc <PS_Search+0x210>)
 800067a:	7adb      	ldrb	r3, [r3, #11]
 800067c:	b29b      	uxth	r3, r3
 800067e:	4413      	add	r3, r2
 8000680:	b29a      	uxth	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	801a      	strh	r2, [r3, #0]
			*score  = (RxBuff[12]<<8)+RxBuff[13];	//score
 8000686:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <PS_Search+0x210>)
 8000688:	7b1b      	ldrb	r3, [r3, #12]
 800068a:	b29b      	uxth	r3, r3
 800068c:	021b      	lsls	r3, r3, #8
 800068e:	b29a      	uxth	r2, r3
 8000690:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <PS_Search+0x210>)
 8000692:	7b5b      	ldrb	r3, [r3, #13]
 8000694:	b29b      	uxth	r3, r3
 8000696:	4413      	add	r3, r2
 8000698:	b29a      	uxth	r2, r3
 800069a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800069c:	801a      	strh	r2, [r3, #0]
			return RxBuff[9];
 800069e:	4b07      	ldr	r3, [pc, #28]	; (80006bc <PS_Search+0x210>)
 80006a0:	7a5b      	ldrb	r3, [r3, #9]
 80006a2:	e002      	b.n	80006aa <PS_Search+0x1fe>
		}
		return 0xff;
 80006a4:	23ff      	movs	r3, #255	; 0xff
 80006a6:	e000      	b.n	80006aa <PS_Search+0x1fe>
	}
	else
		return 0xff;
 80006a8:	23ff      	movs	r3, #255	; 0xff
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3720      	adds	r7, #32
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000464 	.word	0x20000464
 80006b8:	200005e8 	.word	0x200005e8
 80006bc:	200004bc 	.word	0x200004bc

080006c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 0310 	add.w	r3, r7, #16
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d4:	4b1d      	ldr	r3, [pc, #116]	; (800074c <MX_GPIO_Init+0x8c>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a1c      	ldr	r2, [pc, #112]	; (800074c <MX_GPIO_Init+0x8c>)
 80006da:	f043 0320 	orr.w	r3, r3, #32
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <MX_GPIO_Init+0x8c>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f003 0320 	and.w	r3, r3, #32
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_GPIO_Init+0x8c>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a16      	ldr	r2, [pc, #88]	; (800074c <MX_GPIO_Init+0x8c>)
 80006f2:	f043 0304 	orr.w	r3, r3, #4
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_GPIO_Init+0x8c>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f003 0304 	and.w	r3, r3, #4
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_GPIO_Init+0x8c>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	4a10      	ldr	r2, [pc, #64]	; (800074c <MX_GPIO_Init+0x8c>)
 800070a:	f043 0308 	orr.w	r3, r3, #8
 800070e:	6193      	str	r3, [r2, #24]
 8000710:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_GPIO_Init+0x8c>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f003 0308 	and.w	r3, r3, #8
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AS608_Pin;
 800071c:	2302      	movs	r3, #2
 800071e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000720:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_GPIO_Init+0x90>)
 8000722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000724:	2302      	movs	r3, #2
 8000726:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AS608_GPIO_Port, &GPIO_InitStruct);
 8000728:	f107 0310 	add.w	r3, r7, #16
 800072c:	4619      	mov	r1, r3
 800072e:	4809      	ldr	r0, [pc, #36]	; (8000754 <MX_GPIO_Init+0x94>)
 8000730:	f000 ffe8 	bl	8001704 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000734:	2200      	movs	r2, #0
 8000736:	2100      	movs	r1, #0
 8000738:	2007      	movs	r0, #7
 800073a:	f000 ff36 	bl	80015aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800073e:	2007      	movs	r0, #7
 8000740:	f000 ff4f 	bl	80015e2 <HAL_NVIC_EnableIRQ>

}
 8000744:	bf00      	nop
 8000746:	3720      	adds	r7, #32
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40021000 	.word	0x40021000
 8000750:	10110000 	.word	0x10110000
 8000754:	40010800 	.word	0x40010800

08000758 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_I2C1_Init+0x50>)
 800075e:	4a13      	ldr	r2, [pc, #76]	; (80007ac <MX_I2C1_Init+0x54>)
 8000760:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000764:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <MX_I2C1_Init+0x58>)
 8000766:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_I2C1_Init+0x50>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000776:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800077a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_I2C1_Init+0x50>)
 800077e:	2200      	movs	r2, #0
 8000780:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_I2C1_Init+0x50>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000796:	f001 f927 	bl	80019e8 <HAL_I2C_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007a0:	f000 f9ea 	bl	8000b78 <Error_Handler>
  }

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000520 	.word	0x20000520
 80007ac:	40005400 	.word	0x40005400
 80007b0:	000186a0 	.word	0x000186a0

080007b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007bc:	f107 0310 	add.w	r3, r7, #16
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a15      	ldr	r2, [pc, #84]	; (8000824 <HAL_I2C_MspInit+0x70>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d123      	bne.n	800081c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <HAL_I2C_MspInit+0x74>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	4a13      	ldr	r2, [pc, #76]	; (8000828 <HAL_I2C_MspInit+0x74>)
 80007da:	f043 0308 	orr.w	r3, r3, #8
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <HAL_I2C_MspInit+0x74>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f003 0308 	and.w	r3, r3, #8
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007ec:	23c0      	movs	r3, #192	; 0xc0
 80007ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007f0:	2312      	movs	r3, #18
 80007f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f4:	2303      	movs	r3, #3
 80007f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f8:	f107 0310 	add.w	r3, r7, #16
 80007fc:	4619      	mov	r1, r3
 80007fe:	480b      	ldr	r0, [pc, #44]	; (800082c <HAL_I2C_MspInit+0x78>)
 8000800:	f000 ff80 	bl	8001704 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <HAL_I2C_MspInit+0x74>)
 8000806:	69db      	ldr	r3, [r3, #28]
 8000808:	4a07      	ldr	r2, [pc, #28]	; (8000828 <HAL_I2C_MspInit+0x74>)
 800080a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800080e:	61d3      	str	r3, [r2, #28]
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <HAL_I2C_MspInit+0x74>)
 8000812:	69db      	ldr	r3, [r3, #28]
 8000814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800081c:	bf00      	nop
 800081e:	3720      	adds	r7, #32
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40005400 	.word	0x40005400
 8000828:	40021000 	.word	0x40021000
 800082c:	40010c00 	.word	0x40010c00

08000830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000836:	f000 fd5d 	bl	80012f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083a:	f000 f8a9 	bl	8000990 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083e:	f7ff ff3f 	bl	80006c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000842:	f7ff ff89 	bl	8000758 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000846:	f000 fbe9 	bl	800101c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800084a:	f000 fcb1 	bl	80011b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //keypad_init(Pullup, 100, callback);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800084e:	2100      	movs	r1, #0
 8000850:	4844      	ldr	r0, [pc, #272]	; (8000964 <main+0x134>)
 8000852:	f002 fa05 	bl	8002c60 <HAL_TIM_PWM_Start>
  __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, 8);
 8000856:	4b43      	ldr	r3, [pc, #268]	; (8000964 <main+0x134>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2208      	movs	r2, #8
 800085c:	635a      	str	r2, [r3, #52]	; 0x34
  OLED_Init();
 800085e:	f000 fa61 	bl	8000d24 <OLED_Init>
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON,PWR_STOPENTRY_WFI);
 8000862:	2101      	movs	r1, #1
 8000864:	2001      	movs	r0, #1
 8000866:	f001 fd05 	bl	8002274 <HAL_PWR_EnterSTOPMode>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
   	  	if (readSta)
 800086a:	4b3f      	ldr	r3, [pc, #252]	; (8000968 <main+0x138>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	b2db      	uxtb	r3, r3
 8000870:	2b00      	cmp	r3, #0
 8000872:	d01d      	beq.n	80008b0 <main+0x80>
	     {
	  		if(PS_GetImage()) {printf("no\r\n");}
 8000874:	f7ff fd04 	bl	8000280 <PS_GetImage>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d002      	beq.n	8000884 <main+0x54>
 800087e:	483b      	ldr	r0, [pc, #236]	; (800096c <main+0x13c>)
 8000880:	f003 fd72 	bl	8004368 <puts>
	     	PS_GenChar(1);
 8000884:	2001      	movs	r0, #1
 8000886:	f7ff fd6f 	bl	8000368 <PS_GenChar>
	     	PS_Search(1,0,15,&pageID,&score);
 800088a:	4b39      	ldr	r3, [pc, #228]	; (8000970 <main+0x140>)
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	4b39      	ldr	r3, [pc, #228]	; (8000974 <main+0x144>)
 8000890:	220f      	movs	r2, #15
 8000892:	2100      	movs	r1, #0
 8000894:	2001      	movs	r0, #1
 8000896:	f7ff fe09 	bl	80004ac <PS_Search>
	     	if(score >=60)
 800089a:	4b35      	ldr	r3, [pc, #212]	; (8000970 <main+0x140>)
 800089c:	881b      	ldrh	r3, [r3, #0]
 800089e:	2b3b      	cmp	r3, #59	; 0x3b
 80008a0:	d903      	bls.n	80008aa <main+0x7a>
	     	{
	     		flags = 1;
 80008a2:	4b35      	ldr	r3, [pc, #212]	; (8000978 <main+0x148>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	701a      	strb	r2, [r3, #0]
 80008a8:	e002      	b.n	80008b0 <main+0x80>
	     	}
	     	else
	     	{
	     		flags = 2;
 80008aa:	4b33      	ldr	r3, [pc, #204]	; (8000978 <main+0x148>)
 80008ac:	2202      	movs	r2, #2
 80008ae:	701a      	strb	r2, [r3, #0]
	     	}
	     }

	    if (flags == 1)
 80008b0:	4b31      	ldr	r3, [pc, #196]	; (8000978 <main+0x148>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d12f      	bne.n	8000918 <main+0xe8>
	    {
	      rightdoing();
 80008b8:	f000 f8fa 	bl	8000ab0 <rightdoing>
	      __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1,17);
 80008bc:	4b29      	ldr	r3, [pc, #164]	; (8000964 <main+0x134>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2211      	movs	r2, #17
 80008c2:	635a      	str	r2, [r3, #52]	; 0x34
	      myDelayMS(4000);
 80008c4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80008c8:	f04f 0100 	mov.w	r1, #0
 80008cc:	f7ff fc80 	bl	80001d0 <myDelayMS>
	      __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1,8);
 80008d0:	4b24      	ldr	r3, [pc, #144]	; (8000964 <main+0x134>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2208      	movs	r2, #8
 80008d6:	635a      	str	r2, [r3, #52]	; 0x34
	      myDelayMS(1000);
 80008d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008dc:	f04f 0100 	mov.w	r1, #0
 80008e0:	f7ff fc76 	bl	80001d0 <myDelayMS>
	      flags = 0;
 80008e4:	4b24      	ldr	r3, [pc, #144]	; (8000978 <main+0x148>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]
	      Length = 0;
 80008ea:	4b24      	ldr	r3, [pc, #144]	; (800097c <main+0x14c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	701a      	strb	r2, [r3, #0]
	      memset(password, 0, sizeof(password));
 80008f0:	2214      	movs	r2, #20
 80008f2:	2100      	movs	r1, #0
 80008f4:	4822      	ldr	r0, [pc, #136]	; (8000980 <main+0x150>)
 80008f6:	f003 fcd2 	bl	800429e <memset>
	      memset(input, 0, sizeof(input));
 80008fa:	2214      	movs	r2, #20
 80008fc:	2100      	movs	r1, #0
 80008fe:	4821      	ldr	r0, [pc, #132]	; (8000984 <main+0x154>)
 8000900:	f003 fccd 	bl	800429e <memset>
	      memcpy(sys, demo, 15);
 8000904:	220f      	movs	r2, #15
 8000906:	4920      	ldr	r1, [pc, #128]	; (8000988 <main+0x158>)
 8000908:	4820      	ldr	r0, [pc, #128]	; (800098c <main+0x15c>)
 800090a:	f003 fcbd 	bl	8004288 <memcpy>
	      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON,PWR_STOPENTRY_WFI);
 800090e:	2101      	movs	r1, #1
 8000910:	2001      	movs	r0, #1
 8000912:	f001 fcaf 	bl	8002274 <HAL_PWR_EnterSTOPMode>
 8000916:	e7a8      	b.n	800086a <main+0x3a>
	    }
	    else if(flags == 2)
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <main+0x148>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b02      	cmp	r3, #2
 800091e:	d11b      	bne.n	8000958 <main+0x128>
	    {
	      wrongdoing();
 8000920:	f000 f87b 	bl	8000a1a <wrongdoing>
	      //Menu_display();
	      flags = 0;
 8000924:	4b14      	ldr	r3, [pc, #80]	; (8000978 <main+0x148>)
 8000926:	2200      	movs	r2, #0
 8000928:	701a      	strb	r2, [r3, #0]
	      Length = 0;
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <main+0x14c>)
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
	      memset(password, 0, sizeof(password));
 8000930:	2214      	movs	r2, #20
 8000932:	2100      	movs	r1, #0
 8000934:	4812      	ldr	r0, [pc, #72]	; (8000980 <main+0x150>)
 8000936:	f003 fcb2 	bl	800429e <memset>
	      memset(input, 0, sizeof(input));
 800093a:	2214      	movs	r2, #20
 800093c:	2100      	movs	r1, #0
 800093e:	4811      	ldr	r0, [pc, #68]	; (8000984 <main+0x154>)
 8000940:	f003 fcad 	bl	800429e <memset>
	      memcpy(sys, demo, 15);
 8000944:	220f      	movs	r2, #15
 8000946:	4910      	ldr	r1, [pc, #64]	; (8000988 <main+0x158>)
 8000948:	4810      	ldr	r0, [pc, #64]	; (800098c <main+0x15c>)
 800094a:	f003 fc9d 	bl	8004288 <memcpy>
	      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON,PWR_STOPENTRY_WFI);
 800094e:	2101      	movs	r1, #1
 8000950:	2001      	movs	r0, #1
 8000952:	f001 fc8f 	bl	8002274 <HAL_PWR_EnterSTOPMode>
 8000956:	e788      	b.n	800086a <main+0x3a>
	    }
	    else
	    {
	    	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON,PWR_STOPENTRY_WFI);
 8000958:	2101      	movs	r1, #1
 800095a:	2001      	movs	r0, #1
 800095c:	f001 fc8a 	bl	8002274 <HAL_PWR_EnterSTOPMode>
   	  	if (readSta)
 8000960:	e783      	b.n	800086a <main+0x3a>
 8000962:	bf00      	nop
 8000964:	200005a0 	.word	0x200005a0
 8000968:	200004ac 	.word	0x200004ac
 800096c:	08004b94 	.word	0x08004b94
 8000970:	2000059c 	.word	0x2000059c
 8000974:	2000059e 	.word	0x2000059e
 8000978:	20000497 	.word	0x20000497
 800097c:	20000496 	.word	0x20000496
 8000980:	20000574 	.word	0x20000574
 8000984:	20000588 	.word	0x20000588
 8000988:	20000004 	.word	0x20000004
 800098c:	20000498 	.word	0x20000498

08000990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b090      	sub	sp, #64	; 0x40
 8000994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000996:	f107 0318 	add.w	r3, r7, #24
 800099a:	2228      	movs	r2, #40	; 0x28
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f003 fc7d 	bl	800429e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009b2:	2301      	movs	r3, #1
 80009b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009c0:	2301      	movs	r3, #1
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c4:	2302      	movs	r3, #2
 80009c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009ce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d4:	f107 0318 	add.w	r3, r7, #24
 80009d8:	4618      	mov	r0, r3
 80009da:	f001 fc7d 	bl	80022d8 <HAL_RCC_OscConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80009e4:	f000 f8c8 	bl	8000b78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e8:	230f      	movs	r3, #15
 80009ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ec:	2302      	movs	r3, #2
 80009ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2102      	movs	r1, #2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f001 fee8 	bl	80027d8 <HAL_RCC_ClockConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a0e:	f000 f8b3 	bl	8000b78 <Error_Handler>
  }
}
 8000a12:	bf00      	nop
 8000a14:	3740      	adds	r7, #64	; 0x40
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <wrongdoing>:
//  OLED_ShowNum(110, 3, GetTime.Seconds, 2, 12);
//  OLED_ShowString(6, 5, "Enter Password", 12);
//  OLED_ShowString(0, 7, sys, 12);
}
void wrongdoing()
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	af00      	add	r7, sp, #0
  OLED_Clear();
 8000a1e:	f000 f90a 	bl	8000c36 <OLED_Clear>
  OLED_ShowCHinese(0, 0, 0);   //??
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	2000      	movs	r0, #0
 8000a28:	f000 f92e 	bl	8000c88 <OLED_ShowCHinese>
  OLED_ShowCHinese(18, 0, 1);  //??
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	2100      	movs	r1, #0
 8000a30:	2012      	movs	r0, #18
 8000a32:	f000 f929 	bl	8000c88 <OLED_ShowCHinese>
  OLED_ShowCHinese(36, 0, 2);  //??
 8000a36:	2202      	movs	r2, #2
 8000a38:	2100      	movs	r1, #0
 8000a3a:	2024      	movs	r0, #36	; 0x24
 8000a3c:	f000 f924 	bl	8000c88 <OLED_ShowCHinese>
  OLED_ShowCHinese(54, 0, 3);  //??
 8000a40:	2203      	movs	r2, #3
 8000a42:	2100      	movs	r1, #0
 8000a44:	2036      	movs	r0, #54	; 0x36
 8000a46:	f000 f91f 	bl	8000c88 <OLED_ShowCHinese>
  OLED_ShowCHinese(72, 0, 4);  //??
 8000a4a:	2204      	movs	r2, #4
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	2048      	movs	r0, #72	; 0x48
 8000a50:	f000 f91a 	bl	8000c88 <OLED_ShowCHinese>
  OLED_ShowCHinese(90, 0, 5);  //??
 8000a54:	2205      	movs	r2, #5
 8000a56:	2100      	movs	r1, #0
 8000a58:	205a      	movs	r0, #90	; 0x5a
 8000a5a:	f000 f915 	bl	8000c88 <OLED_ShowCHinese>
  OLED_ShowCHinese(108, 0, 6); //??year
 8000a5e:	2206      	movs	r2, #6
 8000a60:	2100      	movs	r1, #0
 8000a62:	206c      	movs	r0, #108	; 0x6c
 8000a64:	f000 f910 	bl	8000c88 <OLED_ShowCHinese>
  OLED_ShowCHinese(24, 4, 7);
 8000a68:	2207      	movs	r2, #7
 8000a6a:	2104      	movs	r1, #4
 8000a6c:	2018      	movs	r0, #24
 8000a6e:	f000 f90b 	bl	8000c88 <OLED_ShowCHinese>
  OLED_ShowCHinese(42, 4, 8);
 8000a72:	2208      	movs	r2, #8
 8000a74:	2104      	movs	r1, #4
 8000a76:	202a      	movs	r0, #42	; 0x2a
 8000a78:	f000 f906 	bl	8000c88 <OLED_ShowCHinese>
  OLED_ShowCHinese(60, 4, 9);
 8000a7c:	2209      	movs	r2, #9
 8000a7e:	2104      	movs	r1, #4
 8000a80:	203c      	movs	r0, #60	; 0x3c
 8000a82:	f000 f901 	bl	8000c88 <OLED_ShowCHinese>
  OLED_ShowCHinese(78, 4, 10);
 8000a86:	220a      	movs	r2, #10
 8000a88:	2104      	movs	r1, #4
 8000a8a:	204e      	movs	r0, #78	; 0x4e
 8000a8c:	f000 f8fc 	bl	8000c88 <OLED_ShowCHinese>
  myDelayMS(800);
 8000a90:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000a94:	f04f 0100 	mov.w	r1, #0
 8000a98:	f7ff fb9a 	bl	80001d0 <myDelayMS>
  OLED_Clear();
 8000a9c:	f000 f8cb 	bl	8000c36 <OLED_Clear>
  myDelayMS(20);
 8000aa0:	f04f 0014 	mov.w	r0, #20
 8000aa4:	f04f 0100 	mov.w	r1, #0
 8000aa8:	f7ff fb92 	bl	80001d0 <myDelayMS>
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <rightdoing>:

void rightdoing()
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  OLED_Clear();
 8000ab4:	f000 f8bf 	bl	8000c36 <OLED_Clear>
  OLED_ShowCHinese(0, 0, 0);   //??
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2100      	movs	r1, #0
 8000abc:	2000      	movs	r0, #0
 8000abe:	f000 f8e3 	bl	8000c88 <OLED_ShowCHinese>
  OLED_ShowCHinese(18, 0, 1);  //??
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	2012      	movs	r0, #18
 8000ac8:	f000 f8de 	bl	8000c88 <OLED_ShowCHinese>
  OLED_ShowCHinese(36, 0, 2);  //??
 8000acc:	2202      	movs	r2, #2
 8000ace:	2100      	movs	r1, #0
 8000ad0:	2024      	movs	r0, #36	; 0x24
 8000ad2:	f000 f8d9 	bl	8000c88 <OLED_ShowCHinese>
  OLED_ShowCHinese(54, 0, 3);  //??
 8000ad6:	2203      	movs	r2, #3
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2036      	movs	r0, #54	; 0x36
 8000adc:	f000 f8d4 	bl	8000c88 <OLED_ShowCHinese>
  OLED_ShowCHinese(72, 0, 4);  //??
 8000ae0:	2204      	movs	r2, #4
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2048      	movs	r0, #72	; 0x48
 8000ae6:	f000 f8cf 	bl	8000c88 <OLED_ShowCHinese>
  OLED_ShowCHinese(90, 0, 5);  //??
 8000aea:	2205      	movs	r2, #5
 8000aec:	2100      	movs	r1, #0
 8000aee:	205a      	movs	r0, #90	; 0x5a
 8000af0:	f000 f8ca 	bl	8000c88 <OLED_ShowCHinese>
  OLED_ShowCHinese(108, 0, 6); //??year
 8000af4:	2206      	movs	r2, #6
 8000af6:	2100      	movs	r1, #0
 8000af8:	206c      	movs	r0, #108	; 0x6c
 8000afa:	f000 f8c5 	bl	8000c88 <OLED_ShowCHinese>
  OLED_ShowCHinese(24, 4, 11);
 8000afe:	220b      	movs	r2, #11
 8000b00:	2104      	movs	r1, #4
 8000b02:	2018      	movs	r0, #24
 8000b04:	f000 f8c0 	bl	8000c88 <OLED_ShowCHinese>
  OLED_ShowCHinese(42, 4, 12);
 8000b08:	220c      	movs	r2, #12
 8000b0a:	2104      	movs	r1, #4
 8000b0c:	202a      	movs	r0, #42	; 0x2a
 8000b0e:	f000 f8bb 	bl	8000c88 <OLED_ShowCHinese>
  OLED_ShowCHinese(60, 4, 13);
 8000b12:	220d      	movs	r2, #13
 8000b14:	2104      	movs	r1, #4
 8000b16:	203c      	movs	r0, #60	; 0x3c
 8000b18:	f000 f8b6 	bl	8000c88 <OLED_ShowCHinese>
  OLED_ShowCHinese(78, 4, 14);
 8000b1c:	220e      	movs	r2, #14
 8000b1e:	2104      	movs	r1, #4
 8000b20:	204e      	movs	r0, #78	; 0x4e
 8000b22:	f000 f8b1 	bl	8000c88 <OLED_ShowCHinese>
  myDelayMS(1000);
 8000b26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b2a:	f04f 0100 	mov.w	r1, #0
 8000b2e:	f7ff fb4f 	bl	80001d0 <myDelayMS>
  OLED_Clear();
 8000b32:	f000 f880 	bl	8000c36 <OLED_Clear>
  myDelayMS(20);
 8000b36:	f04f 0014 	mov.w	r0, #20
 8000b3a:	f04f 0100 	mov.w	r1, #0
 8000b3e:	f7ff fb47 	bl	80001d0 <myDelayMS>
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <HAL_GPIO_EXTI_Callback>:
  {
    flags = 1;
  }
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == AS608_Pin)
 8000b52:	88fb      	ldrh	r3, [r7, #6]
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d107      	bne.n	8000b68 <HAL_GPIO_EXTI_Callback+0x20>
	{
		readSta = 1;
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <HAL_GPIO_EXTI_Callback+0x28>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	701a      	strb	r2, [r3, #0]
		SystemClock_Config();
 8000b5e:	f7ff ff17 	bl	8000990 <SystemClock_Config>
		__HAL_GPIO_EXTI_CLEAR_IT(AS608_Pin);
 8000b62:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000b64:	2202      	movs	r2, #2
 8000b66:	615a      	str	r2, [r3, #20]
	}
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200004ac 	.word	0x200004ac
 8000b74:	40010400 	.word	0x40010400

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <Error_Handler+0x6>

08000b80 <OLED_Write_Cmd>:
#include "oled.h"
#include "oledfont.h"


static void OLED_Write_Cmd(uint8_t cmd)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af02      	add	r7, sp, #8
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2];
	buf[0] = 0x00;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	733b      	strb	r3, [r7, #12]
	buf[1] = cmd;
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	737b      	strb	r3, [r7, #13]
	

	HAL_I2C_Master_Transmit(&hi2c1, 0x78, buf, 2, 0xFFFF);
 8000b92:	f107 020c 	add.w	r2, r7, #12
 8000b96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	2178      	movs	r1, #120	; 0x78
 8000ba0:	4803      	ldr	r0, [pc, #12]	; (8000bb0 <OLED_Write_Cmd+0x30>)
 8000ba2:	f001 f859 	bl	8001c58 <HAL_I2C_Master_Transmit>
}
 8000ba6:	bf00      	nop
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000520 	.word	0x20000520

08000bb4 <OLED_Write_Dat>:

static void OLED_Write_Dat(uint8_t dat)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af02      	add	r7, sp, #8
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2];
	buf[0] = 0x40;
 8000bbe:	2340      	movs	r3, #64	; 0x40
 8000bc0:	733b      	strb	r3, [r7, #12]
	buf[1] = dat;
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	737b      	strb	r3, [r7, #13]
	
	HAL_I2C_Master_Transmit(&hi2c1, 0x78, buf, 2, 0xFFFF);
 8000bc6:	f107 020c 	add.w	r2, r7, #12
 8000bca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bce:	9300      	str	r3, [sp, #0]
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	2178      	movs	r1, #120	; 0x78
 8000bd4:	4803      	ldr	r0, [pc, #12]	; (8000be4 <OLED_Write_Dat+0x30>)
 8000bd6:	f001 f83f 	bl	8001c58 <HAL_I2C_Master_Transmit>
}
 8000bda:	bf00      	nop
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000520 	.word	0x20000520

08000be8 <OLED_Set_Pos>:


void OLED_Set_Pos(uint8_t x, uint8_t y)
{ 	
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	460a      	mov	r2, r1
 8000bf2:	71fb      	strb	r3, [r7, #7]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	71bb      	strb	r3, [r7, #6]
	OLED_Write_Cmd(0xb0+y);
 8000bf8:	79bb      	ldrb	r3, [r7, #6]
 8000bfa:	3b50      	subs	r3, #80	; 0x50
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff ffbe 	bl	8000b80 <OLED_Write_Cmd>
	OLED_Write_Cmd(((x&0xf0)>>4)|0x10);
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	091b      	lsrs	r3, r3, #4
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	f043 0310 	orr.w	r3, r3, #16
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff ffb5 	bl	8000b80 <OLED_Write_Cmd>
	OLED_Write_Cmd((x&0x0f)|0x01);
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	f003 030e 	and.w	r3, r3, #14
 8000c1e:	b25b      	sxtb	r3, r3
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	b25b      	sxtb	r3, r3
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ffa9 	bl	8000b80 <OLED_Write_Cmd>
}   	  
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <OLED_Clear>:
	OLED_Write_Cmd(0X10);
	OLED_Write_Cmd(0XAE);
}		   			 

void OLED_Clear(void)
{  
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	71fb      	strb	r3, [r7, #7]
 8000c40:	e01b      	b.n	8000c7a <OLED_Clear+0x44>
	{  
		OLED_Write_Cmd(0xb0+i);
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	3b50      	subs	r3, #80	; 0x50
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ff99 	bl	8000b80 <OLED_Write_Cmd>
		OLED_Write_Cmd(0x00);
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f7ff ff96 	bl	8000b80 <OLED_Write_Cmd>
		OLED_Write_Cmd(0x10);
 8000c54:	2010      	movs	r0, #16
 8000c56:	f7ff ff93 	bl	8000b80 <OLED_Write_Cmd>
		for(n=0;n<128;n++)
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	71bb      	strb	r3, [r7, #6]
 8000c5e:	e005      	b.n	8000c6c <OLED_Clear+0x36>
		{
			OLED_Write_Dat(0);
 8000c60:	2000      	movs	r0, #0
 8000c62:	f7ff ffa7 	bl	8000bb4 <OLED_Write_Dat>
		for(n=0;n<128;n++)
 8000c66:	79bb      	ldrb	r3, [r7, #6]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	71bb      	strb	r3, [r7, #6]
 8000c6c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	daf5      	bge.n	8000c60 <OLED_Clear+0x2a>
	for(i=0;i<8;i++)  
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	3301      	adds	r3, #1
 8000c78:	71fb      	strb	r3, [r7, #7]
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	2b07      	cmp	r3, #7
 8000c7e:	d9e0      	bls.n	8000c42 <OLED_Clear+0xc>
		}			
	}
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <OLED_ShowCHinese>:
			j++;
	}
}

void OLED_ShowCHinese(uint8_t x,uint8_t y,uint8_t no)
{      			    
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
 8000c92:	460b      	mov	r3, r1
 8000c94:	71bb      	strb	r3, [r7, #6]
 8000c96:	4613      	mov	r3, r2
 8000c98:	717b      	strb	r3, [r7, #5]
	uint8_t t,adder=0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	73bb      	strb	r3, [r7, #14]
	OLED_Set_Pos(x,y);	
 8000c9e:	79ba      	ldrb	r2, [r7, #6]
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff ff9f 	bl	8000be8 <OLED_Set_Pos>
    for(t=0;t<16;t++)
 8000caa:	2300      	movs	r3, #0
 8000cac:	73fb      	strb	r3, [r7, #15]
 8000cae:	e010      	b.n	8000cd2 <OLED_ShowCHinese+0x4a>
		{
				OLED_Write_Dat(Hzk[2*no][t]);
 8000cb0:	797b      	ldrb	r3, [r7, #5]
 8000cb2:	005a      	lsls	r2, r3, #1
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	491a      	ldr	r1, [pc, #104]	; (8000d20 <OLED_ShowCHinese+0x98>)
 8000cb8:	0152      	lsls	r2, r2, #5
 8000cba:	440a      	add	r2, r1
 8000cbc:	4413      	add	r3, r2
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ff77 	bl	8000bb4 <OLED_Write_Dat>
				adder+=1;
 8000cc6:	7bbb      	ldrb	r3, [r7, #14]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	73bb      	strb	r3, [r7, #14]
    for(t=0;t<16;t++)
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	73fb      	strb	r3, [r7, #15]
 8000cd2:	7bfb      	ldrb	r3, [r7, #15]
 8000cd4:	2b0f      	cmp	r3, #15
 8000cd6:	d9eb      	bls.n	8000cb0 <OLED_ShowCHinese+0x28>
     }	
		OLED_Set_Pos(x,y+1);	
 8000cd8:	79bb      	ldrb	r3, [r7, #6]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	4611      	mov	r1, r2
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff ff80 	bl	8000be8 <OLED_Set_Pos>
    for(t=0;t<16;t++)
 8000ce8:	2300      	movs	r3, #0
 8000cea:	73fb      	strb	r3, [r7, #15]
 8000cec:	e011      	b.n	8000d12 <OLED_ShowCHinese+0x8a>
			{	
				OLED_Write_Dat(Hzk[2*no+1][t]);
 8000cee:	797b      	ldrb	r3, [r7, #5]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	1c5a      	adds	r2, r3, #1
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
 8000cf6:	490a      	ldr	r1, [pc, #40]	; (8000d20 <OLED_ShowCHinese+0x98>)
 8000cf8:	0152      	lsls	r2, r2, #5
 8000cfa:	440a      	add	r2, r1
 8000cfc:	4413      	add	r3, r2
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff57 	bl	8000bb4 <OLED_Write_Dat>
				adder+=1;
 8000d06:	7bbb      	ldrb	r3, [r7, #14]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	73bb      	strb	r3, [r7, #14]
    for(t=0;t<16;t++)
 8000d0c:	7bfb      	ldrb	r3, [r7, #15]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	73fb      	strb	r3, [r7, #15]
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	2b0f      	cmp	r3, #15
 8000d16:	d9ea      	bls.n	8000cee <OLED_ShowCHinese+0x66>
      }					
}
 8000d18:	bf00      	nop
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000018 	.word	0x20000018

08000d24 <OLED_Init>:
	}
} 


void OLED_Init(void)
{ 	
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0

	HAL_Delay(500);
 8000d28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d2c:	f000 fb44 	bl	80013b8 <HAL_Delay>

	OLED_Write_Cmd(0xAE);//--display off
 8000d30:	20ae      	movs	r0, #174	; 0xae
 8000d32:	f7ff ff25 	bl	8000b80 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x00);//---set low column address
 8000d36:	2000      	movs	r0, #0
 8000d38:	f7ff ff22 	bl	8000b80 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x10);//---set high column address
 8000d3c:	2010      	movs	r0, #16
 8000d3e:	f7ff ff1f 	bl	8000b80 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x40);//--set start line address  
 8000d42:	2040      	movs	r0, #64	; 0x40
 8000d44:	f7ff ff1c 	bl	8000b80 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x81); // contract control
 8000d48:	2081      	movs	r0, #129	; 0x81
 8000d4a:	f7ff ff19 	bl	8000b80 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xFF);//--128   
 8000d4e:	20ff      	movs	r0, #255	; 0xff
 8000d50:	f7ff ff16 	bl	8000b80 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xA1);//set segment remap 
 8000d54:	20a1      	movs	r0, #161	; 0xa1
 8000d56:	f7ff ff13 	bl	8000b80 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xC8);//Com scan direction
 8000d5a:	20c8      	movs	r0, #200	; 0xc8
 8000d5c:	f7ff ff10 	bl	8000b80 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xA6);//--normal / reverse
 8000d60:	20a6      	movs	r0, #166	; 0xa6
 8000d62:	f7ff ff0d 	bl	8000b80 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xA8);//--set multiplex ratio(1 to 64)
 8000d66:	20a8      	movs	r0, #168	; 0xa8
 8000d68:	f7ff ff0a 	bl	8000b80 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x3F);//--1/32 duty
 8000d6c:	203f      	movs	r0, #63	; 0x3f
 8000d6e:	f7ff ff07 	bl	8000b80 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xD3);//-set display offset
 8000d72:	20d3      	movs	r0, #211	; 0xd3
 8000d74:	f7ff ff04 	bl	8000b80 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x00);//
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f7ff ff01 	bl	8000b80 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xD5);//set osc division
 8000d7e:	20d5      	movs	r0, #213	; 0xd5
 8000d80:	f7ff fefe 	bl	8000b80 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x80);
 8000d84:	2080      	movs	r0, #128	; 0x80
 8000d86:	f7ff fefb 	bl	8000b80 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xD9);//Set Pre-Charge Period
 8000d8a:	20d9      	movs	r0, #217	; 0xd9
 8000d8c:	f7ff fef8 	bl	8000b80 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xF1);//
 8000d90:	20f1      	movs	r0, #241	; 0xf1
 8000d92:	f7ff fef5 	bl	8000b80 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xDA);//set com pin configuartion
 8000d96:	20da      	movs	r0, #218	; 0xda
 8000d98:	f7ff fef2 	bl	8000b80 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x12);//
 8000d9c:	2012      	movs	r0, #18
 8000d9e:	f7ff feef 	bl	8000b80 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xDB);//set Vcomh
 8000da2:	20db      	movs	r0, #219	; 0xdb
 8000da4:	f7ff feec 	bl	8000b80 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x40);//
 8000da8:	2040      	movs	r0, #64	; 0x40
 8000daa:	f7ff fee9 	bl	8000b80 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x20);
 8000dae:	2020      	movs	r0, #32
 8000db0:	f7ff fee6 	bl	8000b80 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x02);
 8000db4:	2002      	movs	r0, #2
 8000db6:	f7ff fee3 	bl	8000b80 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x8D);//set charge pump enable
 8000dba:	208d      	movs	r0, #141	; 0x8d
 8000dbc:	f7ff fee0 	bl	8000b80 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x14);//
 8000dc0:	2014      	movs	r0, #20
 8000dc2:	f7ff fedd 	bl	8000b80 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xA4);
 8000dc6:	20a4      	movs	r0, #164	; 0xa4
 8000dc8:	f7ff feda 	bl	8000b80 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xA6);
 8000dcc:	20a6      	movs	r0, #166	; 0xa6
 8000dce:	f7ff fed7 	bl	8000b80 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xAF);//--turn on oled panel
 8000dd2:	20af      	movs	r0, #175	; 0xaf
 8000dd4:	f7ff fed4 	bl	8000b80 <OLED_Write_Cmd>
	
	OLED_Clear();
 8000dd8:	f7ff ff2d 	bl	8000c36 <OLED_Clear>
	OLED_Set_Pos(0,0);
 8000ddc:	2100      	movs	r1, #0
 8000dde:	2000      	movs	r0, #0
 8000de0:	f7ff ff02 	bl	8000be8 <OLED_Set_Pos>
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dee:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <HAL_MspInit+0x5c>)
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	4a14      	ldr	r2, [pc, #80]	; (8000e44 <HAL_MspInit+0x5c>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6193      	str	r3, [r2, #24]
 8000dfa:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <HAL_MspInit+0x5c>)
 8000dfc:	699b      	ldr	r3, [r3, #24]
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e06:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <HAL_MspInit+0x5c>)
 8000e08:	69db      	ldr	r3, [r3, #28]
 8000e0a:	4a0e      	ldr	r2, [pc, #56]	; (8000e44 <HAL_MspInit+0x5c>)
 8000e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e10:	61d3      	str	r3, [r2, #28]
 8000e12:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <HAL_MspInit+0x5c>)
 8000e14:	69db      	ldr	r3, [r3, #28]
 8000e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <HAL_MspInit+0x60>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <HAL_MspInit+0x60>)
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	3714      	adds	r7, #20
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40010000 	.word	0x40010000

08000e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <NMI_Handler+0x4>

08000e52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <HardFault_Handler+0x4>

08000e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <MemManage_Handler+0x4>

08000e5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <BusFault_Handler+0x4>

08000e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <UsageFault_Handler+0x4>

08000e6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr

08000e76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr

08000e82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bc80      	pop	{r7}
 8000e8c:	4770      	bx	lr

08000e8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e92:	f000 fa75 	bl	8001380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000e9e:	2002      	movs	r0, #2
 8000ea0:	f000 fd8a 	bl	80019b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000eac:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <TIM2_IRQHandler+0x10>)
 8000eae:	f001 ff79 	bl	8002da4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	200005a0 	.word	0x200005a0

08000ebc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ec0:	4802      	ldr	r0, [pc, #8]	; (8000ecc <USART2_IRQHandler+0x10>)
 8000ec2:	f002 feab 	bl	8003c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	200005e8 	.word	0x200005e8

08000ed0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
 8000ee0:	e00a      	b.n	8000ef8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ee2:	f3af 8000 	nop.w
 8000ee6:	4601      	mov	r1, r0
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	1c5a      	adds	r2, r3, #1
 8000eec:	60ba      	str	r2, [r7, #8]
 8000eee:	b2ca      	uxtb	r2, r1
 8000ef0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	697a      	ldr	r2, [r7, #20]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	dbf0      	blt.n	8000ee2 <_read+0x12>
	}

return len;
 8000f00:	687b      	ldr	r3, [r7, #4]
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3718      	adds	r7, #24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b086      	sub	sp, #24
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	60f8      	str	r0, [r7, #12]
 8000f12:	60b9      	str	r1, [r7, #8]
 8000f14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	e009      	b.n	8000f30 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	1c5a      	adds	r2, r3, #1
 8000f20:	60ba      	str	r2, [r7, #8]
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	697a      	ldr	r2, [r7, #20]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	dbf1      	blt.n	8000f1c <_write+0x12>
	}
	return len;
 8000f38:	687b      	ldr	r3, [r7, #4]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <_close>:

int _close(int file)
{
 8000f42:	b480      	push	{r7}
 8000f44:	b083      	sub	sp, #12
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
	return -1;
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr

08000f58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f68:	605a      	str	r2, [r3, #4]
	return 0;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr

08000f76 <_isatty>:

int _isatty(int file)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
	return 1;
 8000f7e:	2301      	movs	r3, #1
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr

08000f8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b085      	sub	sp, #20
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	60f8      	str	r0, [r7, #12]
 8000f92:	60b9      	str	r1, [r7, #8]
 8000f94:	607a      	str	r2, [r7, #4]
	return 0;
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr
	...

08000fa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fac:	4a14      	ldr	r2, [pc, #80]	; (8001000 <_sbrk+0x5c>)
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <_sbrk+0x60>)
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <_sbrk+0x64>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d102      	bne.n	8000fc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <_sbrk+0x64>)
 8000fc2:	4a12      	ldr	r2, [pc, #72]	; (800100c <_sbrk+0x68>)
 8000fc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fc6:	4b10      	ldr	r3, [pc, #64]	; (8001008 <_sbrk+0x64>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d207      	bcs.n	8000fe4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd4:	f003 f92e 	bl	8004234 <__errno>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	230c      	movs	r3, #12
 8000fdc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe2:	e009      	b.n	8000ff8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <_sbrk+0x64>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fea:	4b07      	ldr	r3, [pc, #28]	; (8001008 <_sbrk+0x64>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	4a05      	ldr	r2, [pc, #20]	; (8001008 <_sbrk+0x64>)
 8000ff4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20005000 	.word	0x20005000
 8001004:	00000400 	.word	0x00000400
 8001008:	200004b0 	.word	0x200004b0
 800100c:	20000630 	.word	0x20000630

08001010 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08e      	sub	sp, #56	; 0x38
 8001020:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001022:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001030:	f107 0320 	add.w	r3, r7, #32
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
 8001048:	615a      	str	r2, [r3, #20]
 800104a:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800104c:	4b2d      	ldr	r3, [pc, #180]	; (8001104 <MX_TIM2_Init+0xe8>)
 800104e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001052:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8001054:	4b2b      	ldr	r3, [pc, #172]	; (8001104 <MX_TIM2_Init+0xe8>)
 8001056:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800105a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105c:	4b29      	ldr	r3, [pc, #164]	; (8001104 <MX_TIM2_Init+0xe8>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 199;
 8001062:	4b28      	ldr	r3, [pc, #160]	; (8001104 <MX_TIM2_Init+0xe8>)
 8001064:	22c7      	movs	r2, #199	; 0xc7
 8001066:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001068:	4b26      	ldr	r3, [pc, #152]	; (8001104 <MX_TIM2_Init+0xe8>)
 800106a:	2200      	movs	r2, #0
 800106c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800106e:	4b25      	ldr	r3, [pc, #148]	; (8001104 <MX_TIM2_Init+0xe8>)
 8001070:	2280      	movs	r2, #128	; 0x80
 8001072:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001074:	4823      	ldr	r0, [pc, #140]	; (8001104 <MX_TIM2_Init+0xe8>)
 8001076:	f001 fd4b 	bl	8002b10 <HAL_TIM_Base_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001080:	f7ff fd7a 	bl	8000b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001084:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001088:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800108a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800108e:	4619      	mov	r1, r3
 8001090:	481c      	ldr	r0, [pc, #112]	; (8001104 <MX_TIM2_Init+0xe8>)
 8001092:	f002 f84d 	bl	8003130 <HAL_TIM_ConfigClockSource>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800109c:	f7ff fd6c 	bl	8000b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010a0:	4818      	ldr	r0, [pc, #96]	; (8001104 <MX_TIM2_Init+0xe8>)
 80010a2:	f001 fd84 	bl	8002bae <HAL_TIM_PWM_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80010ac:	f7ff fd64 	bl	8000b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b0:	2300      	movs	r3, #0
 80010b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b4:	2300      	movs	r3, #0
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010b8:	f107 0320 	add.w	r3, r7, #32
 80010bc:	4619      	mov	r1, r3
 80010be:	4811      	ldr	r0, [pc, #68]	; (8001104 <MX_TIM2_Init+0xe8>)
 80010c0:	f002 fbbe 	bl	8003840 <HAL_TIMEx_MasterConfigSynchronization>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80010ca:	f7ff fd55 	bl	8000b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ce:	2360      	movs	r3, #96	; 0x60
 80010d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	2200      	movs	r2, #0
 80010e2:	4619      	mov	r1, r3
 80010e4:	4807      	ldr	r0, [pc, #28]	; (8001104 <MX_TIM2_Init+0xe8>)
 80010e6:	f001 ff65 	bl	8002fb4 <HAL_TIM_PWM_ConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80010f0:	f7ff fd42 	bl	8000b78 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80010f4:	4803      	ldr	r0, [pc, #12]	; (8001104 <MX_TIM2_Init+0xe8>)
 80010f6:	f000 f82b 	bl	8001150 <HAL_TIM_MspPostInit>

}
 80010fa:	bf00      	nop
 80010fc:	3738      	adds	r7, #56	; 0x38
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200005a0 	.word	0x200005a0

08001108 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001118:	d113      	bne.n	8001142 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <HAL_TIM_Base_MspInit+0x44>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	4a0b      	ldr	r2, [pc, #44]	; (800114c <HAL_TIM_Base_MspInit+0x44>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	61d3      	str	r3, [r2, #28]
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <HAL_TIM_Base_MspInit+0x44>)
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2100      	movs	r1, #0
 8001136:	201c      	movs	r0, #28
 8001138:	f000 fa37 	bl	80015aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800113c:	201c      	movs	r0, #28
 800113e:	f000 fa50 	bl	80015e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40021000 	.word	0x40021000

08001150 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800116e:	d117      	bne.n	80011a0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001170:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <HAL_TIM_MspPostInit+0x58>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a0c      	ldr	r2, [pc, #48]	; (80011a8 <HAL_TIM_MspPostInit+0x58>)
 8001176:	f043 0304 	orr.w	r3, r3, #4
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <HAL_TIM_MspPostInit+0x58>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001188:	2301      	movs	r3, #1
 800118a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2302      	movs	r3, #2
 8001192:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	4619      	mov	r1, r3
 800119a:	4804      	ldr	r0, [pc, #16]	; (80011ac <HAL_TIM_MspPostInit+0x5c>)
 800119c:	f000 fab2 	bl	8001704 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80011a0:	bf00      	nop
 80011a2:	3720      	adds	r7, #32
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40010800 	.word	0x40010800

080011b0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <MX_USART2_UART_Init+0x4c>)
 80011b6:	4a12      	ldr	r2, [pc, #72]	; (8001200 <MX_USART2_UART_Init+0x50>)
 80011b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <MX_USART2_UART_Init+0x4c>)
 80011bc:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80011c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <MX_USART2_UART_Init+0x4c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <MX_USART2_UART_Init+0x4c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011ce:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <MX_USART2_UART_Init+0x4c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011d4:	4b09      	ldr	r3, [pc, #36]	; (80011fc <MX_USART2_UART_Init+0x4c>)
 80011d6:	220c      	movs	r2, #12
 80011d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011da:	4b08      	ldr	r3, [pc, #32]	; (80011fc <MX_USART2_UART_Init+0x4c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <MX_USART2_UART_Init+0x4c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011e6:	4805      	ldr	r0, [pc, #20]	; (80011fc <MX_USART2_UART_Init+0x4c>)
 80011e8:	f002 fb9a 	bl	8003920 <HAL_UART_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011f2:	f7ff fcc1 	bl	8000b78 <Error_Handler>
  }

}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	200005e8 	.word	0x200005e8
 8001200:	40004400 	.word	0x40004400

08001204 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a1f      	ldr	r2, [pc, #124]	; (800129c <HAL_UART_MspInit+0x98>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d137      	bne.n	8001294 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001224:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <HAL_UART_MspInit+0x9c>)
 8001226:	69db      	ldr	r3, [r3, #28]
 8001228:	4a1d      	ldr	r2, [pc, #116]	; (80012a0 <HAL_UART_MspInit+0x9c>)
 800122a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800122e:	61d3      	str	r3, [r2, #28]
 8001230:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <HAL_UART_MspInit+0x9c>)
 8001232:	69db      	ldr	r3, [r3, #28]
 8001234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123c:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <HAL_UART_MspInit+0x9c>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4a17      	ldr	r2, [pc, #92]	; (80012a0 <HAL_UART_MspInit+0x9c>)
 8001242:	f043 0304 	orr.w	r3, r3, #4
 8001246:	6193      	str	r3, [r2, #24]
 8001248:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <HAL_UART_MspInit+0x9c>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001254:	2304      	movs	r3, #4
 8001256:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001260:	f107 0310 	add.w	r3, r7, #16
 8001264:	4619      	mov	r1, r3
 8001266:	480f      	ldr	r0, [pc, #60]	; (80012a4 <HAL_UART_MspInit+0xa0>)
 8001268:	f000 fa4c 	bl	8001704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800126c:	2308      	movs	r3, #8
 800126e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	4619      	mov	r1, r3
 800127e:	4809      	ldr	r0, [pc, #36]	; (80012a4 <HAL_UART_MspInit+0xa0>)
 8001280:	f000 fa40 	bl	8001704 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001284:	2200      	movs	r2, #0
 8001286:	2100      	movs	r1, #0
 8001288:	2026      	movs	r0, #38	; 0x26
 800128a:	f000 f98e 	bl	80015aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800128e:	2026      	movs	r0, #38	; 0x26
 8001290:	f000 f9a7 	bl	80015e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001294:	bf00      	nop
 8001296:	3720      	adds	r7, #32
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40004400 	.word	0x40004400
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40010800 	.word	0x40010800

080012a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80012a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80012aa:	e003      	b.n	80012b4 <LoopCopyDataInit>

080012ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80012ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80012b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80012b2:	3104      	adds	r1, #4

080012b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80012b4:	480a      	ldr	r0, [pc, #40]	; (80012e0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80012b6:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80012b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80012ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80012bc:	d3f6      	bcc.n	80012ac <CopyDataInit>
  ldr r2, =_sbss
 80012be:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80012c0:	e002      	b.n	80012c8 <LoopFillZerobss>

080012c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80012c4:	f842 3b04 	str.w	r3, [r2], #4

080012c8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <LoopFillZerobss+0x24>)
  cmp r2, r3
 80012ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 80012cc:	d3f9      	bcc.n	80012c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012ce:	f7ff fe9f 	bl	8001010 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012d2:	f002 ffb5 	bl	8004240 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012d6:	f7ff faab 	bl	8000830 <main>
  bx lr
 80012da:	4770      	bx	lr
  ldr r3, =_sidata
 80012dc:	08004c30 	.word	0x08004c30
  ldr r0, =_sdata
 80012e0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80012e4:	20000448 	.word	0x20000448
  ldr r2, =_sbss
 80012e8:	20000448 	.word	0x20000448
  ldr r3, = _ebss
 80012ec:	20000630 	.word	0x20000630

080012f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012f0:	e7fe      	b.n	80012f0 <ADC1_2_IRQHandler>
	...

080012f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <HAL_Init+0x28>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a07      	ldr	r2, [pc, #28]	; (800131c <HAL_Init+0x28>)
 80012fe:	f043 0310 	orr.w	r3, r3, #16
 8001302:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001304:	2003      	movs	r0, #3
 8001306:	f000 f945 	bl	8001594 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800130a:	2000      	movs	r0, #0
 800130c:	f000 f808 	bl	8001320 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001310:	f7ff fd6a 	bl	8000de8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40022000 	.word	0x40022000

08001320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_InitTick+0x54>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_InitTick+0x58>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4619      	mov	r1, r3
 8001332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001336:	fbb3 f3f1 	udiv	r3, r3, r1
 800133a:	fbb2 f3f3 	udiv	r3, r2, r3
 800133e:	4618      	mov	r0, r3
 8001340:	f000 f95d 	bl	80015fe <HAL_SYSTICK_Config>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e00e      	b.n	800136c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b0f      	cmp	r3, #15
 8001352:	d80a      	bhi.n	800136a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001354:	2200      	movs	r2, #0
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	f04f 30ff 	mov.w	r0, #4294967295
 800135c:	f000 f925 	bl	80015aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001360:	4a06      	ldr	r2, [pc, #24]	; (800137c <HAL_InitTick+0x5c>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001366:	2300      	movs	r3, #0
 8001368:	e000      	b.n	800136c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	200003d8 	.word	0x200003d8
 8001378:	200003e0 	.word	0x200003e0
 800137c:	200003dc 	.word	0x200003dc

08001380 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <HAL_IncTick+0x1c>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	461a      	mov	r2, r3
 800138a:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <HAL_IncTick+0x20>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4413      	add	r3, r2
 8001390:	4a03      	ldr	r2, [pc, #12]	; (80013a0 <HAL_IncTick+0x20>)
 8001392:	6013      	str	r3, [r2, #0]
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	200003e0 	.word	0x200003e0
 80013a0:	20000628 	.word	0x20000628

080013a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return uwTick;
 80013a8:	4b02      	ldr	r3, [pc, #8]	; (80013b4 <HAL_GetTick+0x10>)
 80013aa:	681b      	ldr	r3, [r3, #0]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	20000628 	.word	0x20000628

080013b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c0:	f7ff fff0 	bl	80013a4 <HAL_GetTick>
 80013c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d0:	d005      	beq.n	80013de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <HAL_Delay+0x40>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	461a      	mov	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4413      	add	r3, r2
 80013dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013de:	bf00      	nop
 80013e0:	f7ff ffe0 	bl	80013a4 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d8f7      	bhi.n	80013e0 <HAL_Delay+0x28>
  {
  }
}
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	200003e0 	.word	0x200003e0

080013fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <__NVIC_SetPriorityGrouping+0x44>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001418:	4013      	ands	r3, r2
 800141a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001424:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800142c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142e:	4a04      	ldr	r2, [pc, #16]	; (8001440 <__NVIC_SetPriorityGrouping+0x44>)
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	60d3      	str	r3, [r2, #12]
}
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <__NVIC_GetPriorityGrouping+0x18>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	0a1b      	lsrs	r3, r3, #8
 800144e:	f003 0307 	and.w	r3, r3, #7
}
 8001452:	4618      	mov	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	2b00      	cmp	r3, #0
 8001470:	db0b      	blt.n	800148a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	f003 021f 	and.w	r2, r3, #31
 8001478:	4906      	ldr	r1, [pc, #24]	; (8001494 <__NVIC_EnableIRQ+0x34>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	095b      	lsrs	r3, r3, #5
 8001480:	2001      	movs	r0, #1
 8001482:	fa00 f202 	lsl.w	r2, r0, r2
 8001486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	e000e100 	.word	0xe000e100

08001498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	6039      	str	r1, [r7, #0]
 80014a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	db0a      	blt.n	80014c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	490c      	ldr	r1, [pc, #48]	; (80014e4 <__NVIC_SetPriority+0x4c>)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	0112      	lsls	r2, r2, #4
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	440b      	add	r3, r1
 80014bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c0:	e00a      	b.n	80014d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4908      	ldr	r1, [pc, #32]	; (80014e8 <__NVIC_SetPriority+0x50>)
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	3b04      	subs	r3, #4
 80014d0:	0112      	lsls	r2, r2, #4
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	440b      	add	r3, r1
 80014d6:	761a      	strb	r2, [r3, #24]
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000e100 	.word	0xe000e100
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b089      	sub	sp, #36	; 0x24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f1c3 0307 	rsb	r3, r3, #7
 8001506:	2b04      	cmp	r3, #4
 8001508:	bf28      	it	cs
 800150a:	2304      	movcs	r3, #4
 800150c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3304      	adds	r3, #4
 8001512:	2b06      	cmp	r3, #6
 8001514:	d902      	bls.n	800151c <NVIC_EncodePriority+0x30>
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3b03      	subs	r3, #3
 800151a:	e000      	b.n	800151e <NVIC_EncodePriority+0x32>
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	f04f 32ff 	mov.w	r2, #4294967295
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43da      	mvns	r2, r3
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	401a      	ands	r2, r3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001534:	f04f 31ff 	mov.w	r1, #4294967295
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	43d9      	mvns	r1, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	4313      	orrs	r3, r2
         );
}
 8001546:	4618      	mov	r0, r3
 8001548:	3724      	adds	r7, #36	; 0x24
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3b01      	subs	r3, #1
 800155c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001560:	d301      	bcc.n	8001566 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001562:	2301      	movs	r3, #1
 8001564:	e00f      	b.n	8001586 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001566:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <SysTick_Config+0x40>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3b01      	subs	r3, #1
 800156c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800156e:	210f      	movs	r1, #15
 8001570:	f04f 30ff 	mov.w	r0, #4294967295
 8001574:	f7ff ff90 	bl	8001498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <SysTick_Config+0x40>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800157e:	4b04      	ldr	r3, [pc, #16]	; (8001590 <SysTick_Config+0x40>)
 8001580:	2207      	movs	r2, #7
 8001582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	e000e010 	.word	0xe000e010

08001594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ff2d 	bl	80013fc <__NVIC_SetPriorityGrouping>
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b086      	sub	sp, #24
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	4603      	mov	r3, r0
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
 80015b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015bc:	f7ff ff42 	bl	8001444 <__NVIC_GetPriorityGrouping>
 80015c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	68b9      	ldr	r1, [r7, #8]
 80015c6:	6978      	ldr	r0, [r7, #20]
 80015c8:	f7ff ff90 	bl	80014ec <NVIC_EncodePriority>
 80015cc:	4602      	mov	r2, r0
 80015ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d2:	4611      	mov	r1, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ff5f 	bl	8001498 <__NVIC_SetPriority>
}
 80015da:	bf00      	nop
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	4603      	mov	r3, r0
 80015ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ff35 	bl	8001460 <__NVIC_EnableIRQ>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ffa2 	bl	8001550 <SysTick_Config>
 800160c:	4603      	mov	r3, r0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001620:	2300      	movs	r3, #0
 8001622:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800162a:	2b02      	cmp	r3, #2
 800162c:	d005      	beq.n	800163a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2204      	movs	r2, #4
 8001632:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	73fb      	strb	r3, [r7, #15]
 8001638:	e051      	b.n	80016de <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 020e 	bic.w	r2, r2, #14
 8001648:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0201 	bic.w	r2, r2, #1
 8001658:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a22      	ldr	r2, [pc, #136]	; (80016e8 <HAL_DMA_Abort_IT+0xd0>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d029      	beq.n	80016b8 <HAL_DMA_Abort_IT+0xa0>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a20      	ldr	r2, [pc, #128]	; (80016ec <HAL_DMA_Abort_IT+0xd4>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d022      	beq.n	80016b4 <HAL_DMA_Abort_IT+0x9c>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a1f      	ldr	r2, [pc, #124]	; (80016f0 <HAL_DMA_Abort_IT+0xd8>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d01a      	beq.n	80016ae <HAL_DMA_Abort_IT+0x96>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a1d      	ldr	r2, [pc, #116]	; (80016f4 <HAL_DMA_Abort_IT+0xdc>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d012      	beq.n	80016a8 <HAL_DMA_Abort_IT+0x90>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a1c      	ldr	r2, [pc, #112]	; (80016f8 <HAL_DMA_Abort_IT+0xe0>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d00a      	beq.n	80016a2 <HAL_DMA_Abort_IT+0x8a>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a1a      	ldr	r2, [pc, #104]	; (80016fc <HAL_DMA_Abort_IT+0xe4>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d102      	bne.n	800169c <HAL_DMA_Abort_IT+0x84>
 8001696:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800169a:	e00e      	b.n	80016ba <HAL_DMA_Abort_IT+0xa2>
 800169c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016a0:	e00b      	b.n	80016ba <HAL_DMA_Abort_IT+0xa2>
 80016a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016a6:	e008      	b.n	80016ba <HAL_DMA_Abort_IT+0xa2>
 80016a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ac:	e005      	b.n	80016ba <HAL_DMA_Abort_IT+0xa2>
 80016ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016b2:	e002      	b.n	80016ba <HAL_DMA_Abort_IT+0xa2>
 80016b4:	2310      	movs	r3, #16
 80016b6:	e000      	b.n	80016ba <HAL_DMA_Abort_IT+0xa2>
 80016b8:	2301      	movs	r3, #1
 80016ba:	4a11      	ldr	r2, [pc, #68]	; (8001700 <HAL_DMA_Abort_IT+0xe8>)
 80016bc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2201      	movs	r2, #1
 80016c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	4798      	blx	r3
    } 
  }
  return status;
 80016de:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40020008 	.word	0x40020008
 80016ec:	4002001c 	.word	0x4002001c
 80016f0:	40020030 	.word	0x40020030
 80016f4:	40020044 	.word	0x40020044
 80016f8:	40020058 	.word	0x40020058
 80016fc:	4002006c 	.word	0x4002006c
 8001700:	40020000 	.word	0x40020000

08001704 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001704:	b480      	push	{r7}
 8001706:	b08b      	sub	sp, #44	; 0x2c
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800170e:	2300      	movs	r3, #0
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001716:	e127      	b.n	8001968 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001718:	2201      	movs	r2, #1
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	69fa      	ldr	r2, [r7, #28]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	429a      	cmp	r2, r3
 8001732:	f040 8116 	bne.w	8001962 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b12      	cmp	r3, #18
 800173c:	d034      	beq.n	80017a8 <HAL_GPIO_Init+0xa4>
 800173e:	2b12      	cmp	r3, #18
 8001740:	d80d      	bhi.n	800175e <HAL_GPIO_Init+0x5a>
 8001742:	2b02      	cmp	r3, #2
 8001744:	d02b      	beq.n	800179e <HAL_GPIO_Init+0x9a>
 8001746:	2b02      	cmp	r3, #2
 8001748:	d804      	bhi.n	8001754 <HAL_GPIO_Init+0x50>
 800174a:	2b00      	cmp	r3, #0
 800174c:	d031      	beq.n	80017b2 <HAL_GPIO_Init+0xae>
 800174e:	2b01      	cmp	r3, #1
 8001750:	d01c      	beq.n	800178c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001752:	e048      	b.n	80017e6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001754:	2b03      	cmp	r3, #3
 8001756:	d043      	beq.n	80017e0 <HAL_GPIO_Init+0xdc>
 8001758:	2b11      	cmp	r3, #17
 800175a:	d01b      	beq.n	8001794 <HAL_GPIO_Init+0x90>
          break;
 800175c:	e043      	b.n	80017e6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800175e:	4a89      	ldr	r2, [pc, #548]	; (8001984 <HAL_GPIO_Init+0x280>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d026      	beq.n	80017b2 <HAL_GPIO_Init+0xae>
 8001764:	4a87      	ldr	r2, [pc, #540]	; (8001984 <HAL_GPIO_Init+0x280>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d806      	bhi.n	8001778 <HAL_GPIO_Init+0x74>
 800176a:	4a87      	ldr	r2, [pc, #540]	; (8001988 <HAL_GPIO_Init+0x284>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d020      	beq.n	80017b2 <HAL_GPIO_Init+0xae>
 8001770:	4a86      	ldr	r2, [pc, #536]	; (800198c <HAL_GPIO_Init+0x288>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d01d      	beq.n	80017b2 <HAL_GPIO_Init+0xae>
          break;
 8001776:	e036      	b.n	80017e6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001778:	4a85      	ldr	r2, [pc, #532]	; (8001990 <HAL_GPIO_Init+0x28c>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d019      	beq.n	80017b2 <HAL_GPIO_Init+0xae>
 800177e:	4a85      	ldr	r2, [pc, #532]	; (8001994 <HAL_GPIO_Init+0x290>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d016      	beq.n	80017b2 <HAL_GPIO_Init+0xae>
 8001784:	4a84      	ldr	r2, [pc, #528]	; (8001998 <HAL_GPIO_Init+0x294>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d013      	beq.n	80017b2 <HAL_GPIO_Init+0xae>
          break;
 800178a:	e02c      	b.n	80017e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	623b      	str	r3, [r7, #32]
          break;
 8001792:	e028      	b.n	80017e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	3304      	adds	r3, #4
 800179a:	623b      	str	r3, [r7, #32]
          break;
 800179c:	e023      	b.n	80017e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	3308      	adds	r3, #8
 80017a4:	623b      	str	r3, [r7, #32]
          break;
 80017a6:	e01e      	b.n	80017e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	330c      	adds	r3, #12
 80017ae:	623b      	str	r3, [r7, #32]
          break;
 80017b0:	e019      	b.n	80017e6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d102      	bne.n	80017c0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017ba:	2304      	movs	r3, #4
 80017bc:	623b      	str	r3, [r7, #32]
          break;
 80017be:	e012      	b.n	80017e6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d105      	bne.n	80017d4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017c8:	2308      	movs	r3, #8
 80017ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	611a      	str	r2, [r3, #16]
          break;
 80017d2:	e008      	b.n	80017e6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017d4:	2308      	movs	r3, #8
 80017d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69fa      	ldr	r2, [r7, #28]
 80017dc:	615a      	str	r2, [r3, #20]
          break;
 80017de:	e002      	b.n	80017e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017e0:	2300      	movs	r3, #0
 80017e2:	623b      	str	r3, [r7, #32]
          break;
 80017e4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	2bff      	cmp	r3, #255	; 0xff
 80017ea:	d801      	bhi.n	80017f0 <HAL_GPIO_Init+0xec>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	e001      	b.n	80017f4 <HAL_GPIO_Init+0xf0>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3304      	adds	r3, #4
 80017f4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	2bff      	cmp	r3, #255	; 0xff
 80017fa:	d802      	bhi.n	8001802 <HAL_GPIO_Init+0xfe>
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	e002      	b.n	8001808 <HAL_GPIO_Init+0x104>
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	3b08      	subs	r3, #8
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	210f      	movs	r1, #15
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	401a      	ands	r2, r3
 800181a:	6a39      	ldr	r1, [r7, #32]
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	431a      	orrs	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	f000 8096 	beq.w	8001962 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001836:	4b59      	ldr	r3, [pc, #356]	; (800199c <HAL_GPIO_Init+0x298>)
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	4a58      	ldr	r2, [pc, #352]	; (800199c <HAL_GPIO_Init+0x298>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6193      	str	r3, [r2, #24]
 8001842:	4b56      	ldr	r3, [pc, #344]	; (800199c <HAL_GPIO_Init+0x298>)
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800184e:	4a54      	ldr	r2, [pc, #336]	; (80019a0 <HAL_GPIO_Init+0x29c>)
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	089b      	lsrs	r3, r3, #2
 8001854:	3302      	adds	r3, #2
 8001856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800185a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	220f      	movs	r2, #15
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	4013      	ands	r3, r2
 8001870:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a4b      	ldr	r2, [pc, #300]	; (80019a4 <HAL_GPIO_Init+0x2a0>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d013      	beq.n	80018a2 <HAL_GPIO_Init+0x19e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a4a      	ldr	r2, [pc, #296]	; (80019a8 <HAL_GPIO_Init+0x2a4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d00d      	beq.n	800189e <HAL_GPIO_Init+0x19a>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a49      	ldr	r2, [pc, #292]	; (80019ac <HAL_GPIO_Init+0x2a8>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d007      	beq.n	800189a <HAL_GPIO_Init+0x196>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a48      	ldr	r2, [pc, #288]	; (80019b0 <HAL_GPIO_Init+0x2ac>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d101      	bne.n	8001896 <HAL_GPIO_Init+0x192>
 8001892:	2303      	movs	r3, #3
 8001894:	e006      	b.n	80018a4 <HAL_GPIO_Init+0x1a0>
 8001896:	2304      	movs	r3, #4
 8001898:	e004      	b.n	80018a4 <HAL_GPIO_Init+0x1a0>
 800189a:	2302      	movs	r3, #2
 800189c:	e002      	b.n	80018a4 <HAL_GPIO_Init+0x1a0>
 800189e:	2301      	movs	r3, #1
 80018a0:	e000      	b.n	80018a4 <HAL_GPIO_Init+0x1a0>
 80018a2:	2300      	movs	r3, #0
 80018a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a6:	f002 0203 	and.w	r2, r2, #3
 80018aa:	0092      	lsls	r2, r2, #2
 80018ac:	4093      	lsls	r3, r2
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018b4:	493a      	ldr	r1, [pc, #232]	; (80019a0 <HAL_GPIO_Init+0x29c>)
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	089b      	lsrs	r3, r3, #2
 80018ba:	3302      	adds	r3, #2
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d006      	beq.n	80018dc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018ce:	4b39      	ldr	r3, [pc, #228]	; (80019b4 <HAL_GPIO_Init+0x2b0>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	4938      	ldr	r1, [pc, #224]	; (80019b4 <HAL_GPIO_Init+0x2b0>)
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	600b      	str	r3, [r1, #0]
 80018da:	e006      	b.n	80018ea <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018dc:	4b35      	ldr	r3, [pc, #212]	; (80019b4 <HAL_GPIO_Init+0x2b0>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	4933      	ldr	r1, [pc, #204]	; (80019b4 <HAL_GPIO_Init+0x2b0>)
 80018e6:	4013      	ands	r3, r2
 80018e8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d006      	beq.n	8001904 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018f6:	4b2f      	ldr	r3, [pc, #188]	; (80019b4 <HAL_GPIO_Init+0x2b0>)
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	492e      	ldr	r1, [pc, #184]	; (80019b4 <HAL_GPIO_Init+0x2b0>)
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	4313      	orrs	r3, r2
 8001900:	604b      	str	r3, [r1, #4]
 8001902:	e006      	b.n	8001912 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001904:	4b2b      	ldr	r3, [pc, #172]	; (80019b4 <HAL_GPIO_Init+0x2b0>)
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	43db      	mvns	r3, r3
 800190c:	4929      	ldr	r1, [pc, #164]	; (80019b4 <HAL_GPIO_Init+0x2b0>)
 800190e:	4013      	ands	r3, r2
 8001910:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d006      	beq.n	800192c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800191e:	4b25      	ldr	r3, [pc, #148]	; (80019b4 <HAL_GPIO_Init+0x2b0>)
 8001920:	689a      	ldr	r2, [r3, #8]
 8001922:	4924      	ldr	r1, [pc, #144]	; (80019b4 <HAL_GPIO_Init+0x2b0>)
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	4313      	orrs	r3, r2
 8001928:	608b      	str	r3, [r1, #8]
 800192a:	e006      	b.n	800193a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800192c:	4b21      	ldr	r3, [pc, #132]	; (80019b4 <HAL_GPIO_Init+0x2b0>)
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	43db      	mvns	r3, r3
 8001934:	491f      	ldr	r1, [pc, #124]	; (80019b4 <HAL_GPIO_Init+0x2b0>)
 8001936:	4013      	ands	r3, r2
 8001938:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d006      	beq.n	8001954 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001946:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <HAL_GPIO_Init+0x2b0>)
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	491a      	ldr	r1, [pc, #104]	; (80019b4 <HAL_GPIO_Init+0x2b0>)
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	4313      	orrs	r3, r2
 8001950:	60cb      	str	r3, [r1, #12]
 8001952:	e006      	b.n	8001962 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001954:	4b17      	ldr	r3, [pc, #92]	; (80019b4 <HAL_GPIO_Init+0x2b0>)
 8001956:	68da      	ldr	r2, [r3, #12]
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	43db      	mvns	r3, r3
 800195c:	4915      	ldr	r1, [pc, #84]	; (80019b4 <HAL_GPIO_Init+0x2b0>)
 800195e:	4013      	ands	r3, r2
 8001960:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	3301      	adds	r3, #1
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	fa22 f303 	lsr.w	r3, r2, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	f47f aed0 	bne.w	8001718 <HAL_GPIO_Init+0x14>
  }
}
 8001978:	bf00      	nop
 800197a:	372c      	adds	r7, #44	; 0x2c
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	10210000 	.word	0x10210000
 8001988:	10110000 	.word	0x10110000
 800198c:	10120000 	.word	0x10120000
 8001990:	10310000 	.word	0x10310000
 8001994:	10320000 	.word	0x10320000
 8001998:	10220000 	.word	0x10220000
 800199c:	40021000 	.word	0x40021000
 80019a0:	40010000 	.word	0x40010000
 80019a4:	40010800 	.word	0x40010800
 80019a8:	40010c00 	.word	0x40010c00
 80019ac:	40011000 	.word	0x40011000
 80019b0:	40011400 	.word	0x40011400
 80019b4:	40010400 	.word	0x40010400

080019b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019c2:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019c4:	695a      	ldr	r2, [r3, #20]
 80019c6:	88fb      	ldrh	r3, [r7, #6]
 80019c8:	4013      	ands	r3, r2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d006      	beq.n	80019dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019ce:	4a05      	ldr	r2, [pc, #20]	; (80019e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019d0:	88fb      	ldrh	r3, [r7, #6]
 80019d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019d4:	88fb      	ldrh	r3, [r7, #6]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff f8b6 	bl	8000b48 <HAL_GPIO_EXTI_Callback>
  }
}
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40010400 	.word	0x40010400

080019e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e11f      	b.n	8001c3a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d106      	bne.n	8001a14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7fe fed0 	bl	80007b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2224      	movs	r2, #36	; 0x24
 8001a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f022 0201 	bic.w	r2, r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a4c:	f001 f81a 	bl	8002a84 <HAL_RCC_GetPCLK1Freq>
 8001a50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	4a7b      	ldr	r2, [pc, #492]	; (8001c44 <HAL_I2C_Init+0x25c>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d807      	bhi.n	8001a6c <HAL_I2C_Init+0x84>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4a7a      	ldr	r2, [pc, #488]	; (8001c48 <HAL_I2C_Init+0x260>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	bf94      	ite	ls
 8001a64:	2301      	movls	r3, #1
 8001a66:	2300      	movhi	r3, #0
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	e006      	b.n	8001a7a <HAL_I2C_Init+0x92>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4a77      	ldr	r2, [pc, #476]	; (8001c4c <HAL_I2C_Init+0x264>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	bf94      	ite	ls
 8001a74:	2301      	movls	r3, #1
 8001a76:	2300      	movhi	r3, #0
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e0db      	b.n	8001c3a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	4a72      	ldr	r2, [pc, #456]	; (8001c50 <HAL_I2C_Init+0x268>)
 8001a86:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8a:	0c9b      	lsrs	r3, r3, #18
 8001a8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68ba      	ldr	r2, [r7, #8]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	4a64      	ldr	r2, [pc, #400]	; (8001c44 <HAL_I2C_Init+0x25c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d802      	bhi.n	8001abc <HAL_I2C_Init+0xd4>
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	e009      	b.n	8001ad0 <HAL_I2C_Init+0xe8>
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ac2:	fb02 f303 	mul.w	r3, r2, r3
 8001ac6:	4a63      	ldr	r2, [pc, #396]	; (8001c54 <HAL_I2C_Init+0x26c>)
 8001ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8001acc:	099b      	lsrs	r3, r3, #6
 8001ace:	3301      	adds	r3, #1
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	6812      	ldr	r2, [r2, #0]
 8001ad4:	430b      	orrs	r3, r1
 8001ad6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ae2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	4956      	ldr	r1, [pc, #344]	; (8001c44 <HAL_I2C_Init+0x25c>)
 8001aec:	428b      	cmp	r3, r1
 8001aee:	d80d      	bhi.n	8001b0c <HAL_I2C_Init+0x124>
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	1e59      	subs	r1, r3, #1
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	fbb1 f3f3 	udiv	r3, r1, r3
 8001afe:	3301      	adds	r3, #1
 8001b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b04:	2b04      	cmp	r3, #4
 8001b06:	bf38      	it	cc
 8001b08:	2304      	movcc	r3, #4
 8001b0a:	e04f      	b.n	8001bac <HAL_I2C_Init+0x1c4>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d111      	bne.n	8001b38 <HAL_I2C_Init+0x150>
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	1e58      	subs	r0, r3, #1
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6859      	ldr	r1, [r3, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	440b      	add	r3, r1
 8001b22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b26:	3301      	adds	r3, #1
 8001b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	bf0c      	ite	eq
 8001b30:	2301      	moveq	r3, #1
 8001b32:	2300      	movne	r3, #0
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	e012      	b.n	8001b5e <HAL_I2C_Init+0x176>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	1e58      	subs	r0, r3, #1
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6859      	ldr	r1, [r3, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	440b      	add	r3, r1
 8001b46:	0099      	lsls	r1, r3, #2
 8001b48:	440b      	add	r3, r1
 8001b4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b4e:	3301      	adds	r3, #1
 8001b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	bf0c      	ite	eq
 8001b58:	2301      	moveq	r3, #1
 8001b5a:	2300      	movne	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_I2C_Init+0x17e>
 8001b62:	2301      	movs	r3, #1
 8001b64:	e022      	b.n	8001bac <HAL_I2C_Init+0x1c4>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10e      	bne.n	8001b8c <HAL_I2C_Init+0x1a4>
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	1e58      	subs	r0, r3, #1
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6859      	ldr	r1, [r3, #4]
 8001b76:	460b      	mov	r3, r1
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	440b      	add	r3, r1
 8001b7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b80:	3301      	adds	r3, #1
 8001b82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b8a:	e00f      	b.n	8001bac <HAL_I2C_Init+0x1c4>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	1e58      	subs	r0, r3, #1
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6859      	ldr	r1, [r3, #4]
 8001b94:	460b      	mov	r3, r1
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	440b      	add	r3, r1
 8001b9a:	0099      	lsls	r1, r3, #2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ba8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	6809      	ldr	r1, [r1, #0]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69da      	ldr	r2, [r3, #28]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001bda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6911      	ldr	r1, [r2, #16]
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	68d2      	ldr	r2, [r2, #12]
 8001be6:	4311      	orrs	r1, r2
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	430b      	orrs	r3, r1
 8001bee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	695a      	ldr	r2, [r3, #20]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0201 	orr.w	r2, r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2220      	movs	r2, #32
 8001c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	000186a0 	.word	0x000186a0
 8001c48:	001e847f 	.word	0x001e847f
 8001c4c:	003d08ff 	.word	0x003d08ff
 8001c50:	431bde83 	.word	0x431bde83
 8001c54:	10624dd3 	.word	0x10624dd3

08001c58 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b088      	sub	sp, #32
 8001c5c:	af02      	add	r7, sp, #8
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	607a      	str	r2, [r7, #4]
 8001c62:	461a      	mov	r2, r3
 8001c64:	460b      	mov	r3, r1
 8001c66:	817b      	strh	r3, [r7, #10]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c6c:	f7ff fb9a 	bl	80013a4 <HAL_GetTick>
 8001c70:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b20      	cmp	r3, #32
 8001c7c:	f040 80e0 	bne.w	8001e40 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	2319      	movs	r3, #25
 8001c86:	2201      	movs	r2, #1
 8001c88:	4970      	ldr	r1, [pc, #448]	; (8001e4c <HAL_I2C_Master_Transmit+0x1f4>)
 8001c8a:	68f8      	ldr	r0, [r7, #12]
 8001c8c:	f000 f964 	bl	8001f58 <I2C_WaitOnFlagUntilTimeout>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c96:	2302      	movs	r3, #2
 8001c98:	e0d3      	b.n	8001e42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d101      	bne.n	8001ca8 <HAL_I2C_Master_Transmit+0x50>
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	e0cc      	b.n	8001e42 <HAL_I2C_Master_Transmit+0x1ea>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d007      	beq.n	8001cce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f042 0201 	orr.w	r2, r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cdc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2221      	movs	r2, #33	; 0x21
 8001ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2210      	movs	r2, #16
 8001cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	893a      	ldrh	r2, [r7, #8]
 8001cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	4a50      	ldr	r2, [pc, #320]	; (8001e50 <HAL_I2C_Master_Transmit+0x1f8>)
 8001d0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d10:	8979      	ldrh	r1, [r7, #10]
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	6a3a      	ldr	r2, [r7, #32]
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 f89c 	bl	8001e54 <I2C_MasterRequestWrite>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e08d      	b.n	8001e42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d3c:	e066      	b.n	8001e0c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	6a39      	ldr	r1, [r7, #32]
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f000 f9de 	bl	8002104 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00d      	beq.n	8001d6a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d107      	bne.n	8001d66 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e06b      	b.n	8001e42 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6e:	781a      	ldrb	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	1c5a      	adds	r2, r3, #1
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	3b01      	subs	r3, #1
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d92:	3b01      	subs	r3, #1
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	695b      	ldr	r3, [r3, #20]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d11b      	bne.n	8001de0 <HAL_I2C_Master_Transmit+0x188>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d017      	beq.n	8001de0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	781a      	ldrb	r2, [r3, #0]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	1c5a      	adds	r2, r3, #1
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	6a39      	ldr	r1, [r7, #32]
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f000 f9ce 	bl	8002186 <I2C_WaitOnBTFFlagUntilTimeout>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00d      	beq.n	8001e0c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	d107      	bne.n	8001e08 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e06:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e01a      	b.n	8001e42 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d194      	bne.n	8001d3e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2220      	movs	r2, #32
 8001e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	e000      	b.n	8001e42 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e40:	2302      	movs	r3, #2
  }
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	00100002 	.word	0x00100002
 8001e50:	ffff0000 	.word	0xffff0000

08001e54 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b088      	sub	sp, #32
 8001e58:	af02      	add	r7, sp, #8
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	607a      	str	r2, [r7, #4]
 8001e5e:	603b      	str	r3, [r7, #0]
 8001e60:	460b      	mov	r3, r1
 8001e62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e68:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d006      	beq.n	8001e7e <I2C_MasterRequestWrite+0x2a>
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d003      	beq.n	8001e7e <I2C_MasterRequestWrite+0x2a>
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e7c:	d108      	bne.n	8001e90 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	e00b      	b.n	8001ea8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e94:	2b12      	cmp	r3, #18
 8001e96:	d107      	bne.n	8001ea8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ea6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f000 f84f 	bl	8001f58 <I2C_WaitOnFlagUntilTimeout>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00d      	beq.n	8001edc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ece:	d103      	bne.n	8001ed8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ed6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e035      	b.n	8001f48 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ee4:	d108      	bne.n	8001ef8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ee6:	897b      	ldrh	r3, [r7, #10]
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	461a      	mov	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ef4:	611a      	str	r2, [r3, #16]
 8001ef6:	e01b      	b.n	8001f30 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ef8:	897b      	ldrh	r3, [r7, #10]
 8001efa:	11db      	asrs	r3, r3, #7
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	f003 0306 	and.w	r3, r3, #6
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	f063 030f 	orn	r3, r3, #15
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	490e      	ldr	r1, [pc, #56]	; (8001f50 <I2C_MasterRequestWrite+0xfc>)
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f000 f875 	bl	8002006 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e010      	b.n	8001f48 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f26:	897b      	ldrh	r3, [r7, #10]
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	4907      	ldr	r1, [pc, #28]	; (8001f54 <I2C_MasterRequestWrite+0x100>)
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f000 f865 	bl	8002006 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e000      	b.n	8001f48 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	00010008 	.word	0x00010008
 8001f54:	00010002 	.word	0x00010002

08001f58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	603b      	str	r3, [r7, #0]
 8001f64:	4613      	mov	r3, r2
 8001f66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f68:	e025      	b.n	8001fb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f70:	d021      	beq.n	8001fb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f72:	f7ff fa17 	bl	80013a4 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d302      	bcc.n	8001f88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d116      	bne.n	8001fb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2220      	movs	r2, #32
 8001f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	f043 0220 	orr.w	r2, r3, #32
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e023      	b.n	8001ffe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	0c1b      	lsrs	r3, r3, #16
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d10d      	bne.n	8001fdc <I2C_WaitOnFlagUntilTimeout+0x84>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	43da      	mvns	r2, r3
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	bf0c      	ite	eq
 8001fd2:	2301      	moveq	r3, #1
 8001fd4:	2300      	movne	r3, #0
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	461a      	mov	r2, r3
 8001fda:	e00c      	b.n	8001ff6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	43da      	mvns	r2, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	bf0c      	ite	eq
 8001fee:	2301      	moveq	r3, #1
 8001ff0:	2300      	movne	r3, #0
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d0b6      	beq.n	8001f6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b084      	sub	sp, #16
 800200a:	af00      	add	r7, sp, #0
 800200c:	60f8      	str	r0, [r7, #12]
 800200e:	60b9      	str	r1, [r7, #8]
 8002010:	607a      	str	r2, [r7, #4]
 8002012:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002014:	e051      	b.n	80020ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002024:	d123      	bne.n	800206e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002034:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800203e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2220      	movs	r2, #32
 800204a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f043 0204 	orr.w	r2, r3, #4
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e046      	b.n	80020fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002074:	d021      	beq.n	80020ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002076:	f7ff f995 	bl	80013a4 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	429a      	cmp	r2, r3
 8002084:	d302      	bcc.n	800208c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d116      	bne.n	80020ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2220      	movs	r2, #32
 8002096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f043 0220 	orr.w	r2, r3, #32
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e020      	b.n	80020fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	0c1b      	lsrs	r3, r3, #16
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d10c      	bne.n	80020de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	43da      	mvns	r2, r3
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	4013      	ands	r3, r2
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	bf14      	ite	ne
 80020d6:	2301      	movne	r3, #1
 80020d8:	2300      	moveq	r3, #0
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	e00b      	b.n	80020f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	43da      	mvns	r2, r3
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	4013      	ands	r3, r2
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	bf14      	ite	ne
 80020f0:	2301      	movne	r3, #1
 80020f2:	2300      	moveq	r3, #0
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d18d      	bne.n	8002016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002110:	e02d      	b.n	800216e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f000 f878 	bl	8002208 <I2C_IsAcknowledgeFailed>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e02d      	b.n	800217e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002128:	d021      	beq.n	800216e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800212a:	f7ff f93b 	bl	80013a4 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	68ba      	ldr	r2, [r7, #8]
 8002136:	429a      	cmp	r2, r3
 8002138:	d302      	bcc.n	8002140 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d116      	bne.n	800216e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2220      	movs	r2, #32
 800214a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f043 0220 	orr.w	r2, r3, #32
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e007      	b.n	800217e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002178:	2b80      	cmp	r3, #128	; 0x80
 800217a:	d1ca      	bne.n	8002112 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b084      	sub	sp, #16
 800218a:	af00      	add	r7, sp, #0
 800218c:	60f8      	str	r0, [r7, #12]
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002192:	e02d      	b.n	80021f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f000 f837 	bl	8002208 <I2C_IsAcknowledgeFailed>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e02d      	b.n	8002200 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021aa:	d021      	beq.n	80021f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ac:	f7ff f8fa 	bl	80013a4 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d302      	bcc.n	80021c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d116      	bne.n	80021f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2220      	movs	r2, #32
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	f043 0220 	orr.w	r2, r3, #32
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e007      	b.n	8002200 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d1ca      	bne.n	8002194 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800221a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800221e:	d11b      	bne.n	8002258 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002228:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2220      	movs	r2, #32
 8002234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	f043 0204 	orr.w	r2, r3, #4
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <PWR_OverloadWfe>:
static void PWR_OverloadWfe(void);

/* Private functions ---------------------------------------------------------*/
__NOINLINE
static void PWR_OverloadWfe(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  __asm volatile( "wfe" );
 8002268:	bf20      	wfe
  __asm volatile( "nop" );
 800226a:	bf00      	nop
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr

08002274 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Clear PDDS bit in PWR register to specify entering in STOP mode when CPU enter in Deepsleep */ 
  CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
 8002280:	4b13      	ldr	r3, [pc, #76]	; (80022d0 <HAL_PWR_EnterSTOPMode+0x5c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <HAL_PWR_EnterSTOPMode+0x5c>)
 8002286:	f023 0302 	bic.w	r3, r3, #2
 800228a:	6013      	str	r3, [r2, #0]

  /* Select the voltage regulator mode by setting LPDS bit in PWR register according to Regulator parameter value */
  MODIFY_REG(PWR->CR, PWR_CR_LPDS, Regulator);
 800228c:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <HAL_PWR_EnterSTOPMode+0x5c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f023 0201 	bic.w	r2, r3, #1
 8002294:	490e      	ldr	r1, [pc, #56]	; (80022d0 <HAL_PWR_EnterSTOPMode+0x5c>)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4313      	orrs	r3, r2
 800229a:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800229c:	4b0d      	ldr	r3, [pc, #52]	; (80022d4 <HAL_PWR_EnterSTOPMode+0x60>)
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	4a0c      	ldr	r2, [pc, #48]	; (80022d4 <HAL_PWR_EnterSTOPMode+0x60>)
 80022a2:	f043 0304 	orr.w	r3, r3, #4
 80022a6:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80022a8:	78fb      	ldrb	r3, [r7, #3]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d101      	bne.n	80022b2 <HAL_PWR_EnterSTOPMode+0x3e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80022ae:	bf30      	wfi
 80022b0:	e004      	b.n	80022bc <HAL_PWR_EnterSTOPMode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80022b2:	bf40      	sev
    PWR_OverloadWfe(); /* WFE redefine locally */
 80022b4:	f7ff ffd6 	bl	8002264 <PWR_OverloadWfe>
    PWR_OverloadWfe(); /* WFE redefine locally */
 80022b8:	f7ff ffd4 	bl	8002264 <PWR_OverloadWfe>
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80022bc:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <HAL_PWR_EnterSTOPMode+0x60>)
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	4a04      	ldr	r2, [pc, #16]	; (80022d4 <HAL_PWR_EnterSTOPMode+0x60>)
 80022c2:	f023 0304 	bic.w	r3, r3, #4
 80022c6:	6113      	str	r3, [r2, #16]
}
 80022c8:	bf00      	nop
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40007000 	.word	0x40007000
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e26c      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 8087 	beq.w	8002406 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022f8:	4b92      	ldr	r3, [pc, #584]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 030c 	and.w	r3, r3, #12
 8002300:	2b04      	cmp	r3, #4
 8002302:	d00c      	beq.n	800231e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002304:	4b8f      	ldr	r3, [pc, #572]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 030c 	and.w	r3, r3, #12
 800230c:	2b08      	cmp	r3, #8
 800230e:	d112      	bne.n	8002336 <HAL_RCC_OscConfig+0x5e>
 8002310:	4b8c      	ldr	r3, [pc, #560]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800231c:	d10b      	bne.n	8002336 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800231e:	4b89      	ldr	r3, [pc, #548]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d06c      	beq.n	8002404 <HAL_RCC_OscConfig+0x12c>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d168      	bne.n	8002404 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e246      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800233e:	d106      	bne.n	800234e <HAL_RCC_OscConfig+0x76>
 8002340:	4b80      	ldr	r3, [pc, #512]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a7f      	ldr	r2, [pc, #508]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800234a:	6013      	str	r3, [r2, #0]
 800234c:	e02e      	b.n	80023ac <HAL_RCC_OscConfig+0xd4>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10c      	bne.n	8002370 <HAL_RCC_OscConfig+0x98>
 8002356:	4b7b      	ldr	r3, [pc, #492]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a7a      	ldr	r2, [pc, #488]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 800235c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	4b78      	ldr	r3, [pc, #480]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a77      	ldr	r2, [pc, #476]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002368:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	e01d      	b.n	80023ac <HAL_RCC_OscConfig+0xd4>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002378:	d10c      	bne.n	8002394 <HAL_RCC_OscConfig+0xbc>
 800237a:	4b72      	ldr	r3, [pc, #456]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a71      	ldr	r2, [pc, #452]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	4b6f      	ldr	r3, [pc, #444]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a6e      	ldr	r2, [pc, #440]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 800238c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	e00b      	b.n	80023ac <HAL_RCC_OscConfig+0xd4>
 8002394:	4b6b      	ldr	r3, [pc, #428]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a6a      	ldr	r2, [pc, #424]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 800239a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	4b68      	ldr	r3, [pc, #416]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a67      	ldr	r2, [pc, #412]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 80023a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d013      	beq.n	80023dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7fe fff6 	bl	80013a4 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023bc:	f7fe fff2 	bl	80013a4 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b64      	cmp	r3, #100	; 0x64
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e1fa      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ce:	4b5d      	ldr	r3, [pc, #372]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0xe4>
 80023da:	e014      	b.n	8002406 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023dc:	f7fe ffe2 	bl	80013a4 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e4:	f7fe ffde 	bl	80013a4 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b64      	cmp	r3, #100	; 0x64
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e1e6      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f6:	4b53      	ldr	r3, [pc, #332]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x10c>
 8002402:	e000      	b.n	8002406 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d063      	beq.n	80024da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002412:	4b4c      	ldr	r3, [pc, #304]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f003 030c 	and.w	r3, r3, #12
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00b      	beq.n	8002436 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800241e:	4b49      	ldr	r3, [pc, #292]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 030c 	and.w	r3, r3, #12
 8002426:	2b08      	cmp	r3, #8
 8002428:	d11c      	bne.n	8002464 <HAL_RCC_OscConfig+0x18c>
 800242a:	4b46      	ldr	r3, [pc, #280]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d116      	bne.n	8002464 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002436:	4b43      	ldr	r3, [pc, #268]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d005      	beq.n	800244e <HAL_RCC_OscConfig+0x176>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d001      	beq.n	800244e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e1ba      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244e:	4b3d      	ldr	r3, [pc, #244]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	4939      	ldr	r1, [pc, #228]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 800245e:	4313      	orrs	r3, r2
 8002460:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002462:	e03a      	b.n	80024da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d020      	beq.n	80024ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800246c:	4b36      	ldr	r3, [pc, #216]	; (8002548 <HAL_RCC_OscConfig+0x270>)
 800246e:	2201      	movs	r2, #1
 8002470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002472:	f7fe ff97 	bl	80013a4 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800247a:	f7fe ff93 	bl	80013a4 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e19b      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248c:	4b2d      	ldr	r3, [pc, #180]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0f0      	beq.n	800247a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002498:	4b2a      	ldr	r3, [pc, #168]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4927      	ldr	r1, [pc, #156]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	600b      	str	r3, [r1, #0]
 80024ac:	e015      	b.n	80024da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ae:	4b26      	ldr	r3, [pc, #152]	; (8002548 <HAL_RCC_OscConfig+0x270>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b4:	f7fe ff76 	bl	80013a4 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024bc:	f7fe ff72 	bl	80013a4 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e17a      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ce:	4b1d      	ldr	r3, [pc, #116]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d03a      	beq.n	800255c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d019      	beq.n	8002522 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ee:	4b17      	ldr	r3, [pc, #92]	; (800254c <HAL_RCC_OscConfig+0x274>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f4:	f7fe ff56 	bl	80013a4 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024fc:	f7fe ff52 	bl	80013a4 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e15a      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250e:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800251a:	2001      	movs	r0, #1
 800251c:	f000 fada 	bl	8002ad4 <RCC_Delay>
 8002520:	e01c      	b.n	800255c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002522:	4b0a      	ldr	r3, [pc, #40]	; (800254c <HAL_RCC_OscConfig+0x274>)
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002528:	f7fe ff3c 	bl	80013a4 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800252e:	e00f      	b.n	8002550 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002530:	f7fe ff38 	bl	80013a4 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d908      	bls.n	8002550 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e140      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
 8002542:	bf00      	nop
 8002544:	40021000 	.word	0x40021000
 8002548:	42420000 	.word	0x42420000
 800254c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002550:	4b9e      	ldr	r3, [pc, #632]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1e9      	bne.n	8002530 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 80a6 	beq.w	80026b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800256a:	2300      	movs	r3, #0
 800256c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800256e:	4b97      	ldr	r3, [pc, #604]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10d      	bne.n	8002596 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800257a:	4b94      	ldr	r3, [pc, #592]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	4a93      	ldr	r2, [pc, #588]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002584:	61d3      	str	r3, [r2, #28]
 8002586:	4b91      	ldr	r3, [pc, #580]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002592:	2301      	movs	r3, #1
 8002594:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002596:	4b8e      	ldr	r3, [pc, #568]	; (80027d0 <HAL_RCC_OscConfig+0x4f8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d118      	bne.n	80025d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025a2:	4b8b      	ldr	r3, [pc, #556]	; (80027d0 <HAL_RCC_OscConfig+0x4f8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a8a      	ldr	r2, [pc, #552]	; (80027d0 <HAL_RCC_OscConfig+0x4f8>)
 80025a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ae:	f7fe fef9 	bl	80013a4 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b6:	f7fe fef5 	bl	80013a4 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b64      	cmp	r3, #100	; 0x64
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e0fd      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c8:	4b81      	ldr	r3, [pc, #516]	; (80027d0 <HAL_RCC_OscConfig+0x4f8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0f0      	beq.n	80025b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d106      	bne.n	80025ea <HAL_RCC_OscConfig+0x312>
 80025dc:	4b7b      	ldr	r3, [pc, #492]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	4a7a      	ldr	r2, [pc, #488]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	6213      	str	r3, [r2, #32]
 80025e8:	e02d      	b.n	8002646 <HAL_RCC_OscConfig+0x36e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10c      	bne.n	800260c <HAL_RCC_OscConfig+0x334>
 80025f2:	4b76      	ldr	r3, [pc, #472]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	4a75      	ldr	r2, [pc, #468]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 80025f8:	f023 0301 	bic.w	r3, r3, #1
 80025fc:	6213      	str	r3, [r2, #32]
 80025fe:	4b73      	ldr	r3, [pc, #460]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	4a72      	ldr	r2, [pc, #456]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002604:	f023 0304 	bic.w	r3, r3, #4
 8002608:	6213      	str	r3, [r2, #32]
 800260a:	e01c      	b.n	8002646 <HAL_RCC_OscConfig+0x36e>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	2b05      	cmp	r3, #5
 8002612:	d10c      	bne.n	800262e <HAL_RCC_OscConfig+0x356>
 8002614:	4b6d      	ldr	r3, [pc, #436]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	4a6c      	ldr	r2, [pc, #432]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 800261a:	f043 0304 	orr.w	r3, r3, #4
 800261e:	6213      	str	r3, [r2, #32]
 8002620:	4b6a      	ldr	r3, [pc, #424]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	4a69      	ldr	r2, [pc, #420]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	6213      	str	r3, [r2, #32]
 800262c:	e00b      	b.n	8002646 <HAL_RCC_OscConfig+0x36e>
 800262e:	4b67      	ldr	r3, [pc, #412]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	4a66      	ldr	r2, [pc, #408]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002634:	f023 0301 	bic.w	r3, r3, #1
 8002638:	6213      	str	r3, [r2, #32]
 800263a:	4b64      	ldr	r3, [pc, #400]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	4a63      	ldr	r2, [pc, #396]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002640:	f023 0304 	bic.w	r3, r3, #4
 8002644:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d015      	beq.n	800267a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264e:	f7fe fea9 	bl	80013a4 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002654:	e00a      	b.n	800266c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002656:	f7fe fea5 	bl	80013a4 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	f241 3288 	movw	r2, #5000	; 0x1388
 8002664:	4293      	cmp	r3, r2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e0ab      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800266c:	4b57      	ldr	r3, [pc, #348]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0ee      	beq.n	8002656 <HAL_RCC_OscConfig+0x37e>
 8002678:	e014      	b.n	80026a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267a:	f7fe fe93 	bl	80013a4 <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002680:	e00a      	b.n	8002698 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002682:	f7fe fe8f 	bl	80013a4 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002690:	4293      	cmp	r3, r2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e095      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002698:	4b4c      	ldr	r3, [pc, #304]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1ee      	bne.n	8002682 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026a4:	7dfb      	ldrb	r3, [r7, #23]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d105      	bne.n	80026b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026aa:	4b48      	ldr	r3, [pc, #288]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	4a47      	ldr	r2, [pc, #284]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 80026b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 8081 	beq.w	80027c2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026c0:	4b42      	ldr	r3, [pc, #264]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 030c 	and.w	r3, r3, #12
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d061      	beq.n	8002790 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d146      	bne.n	8002762 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d4:	4b3f      	ldr	r3, [pc, #252]	; (80027d4 <HAL_RCC_OscConfig+0x4fc>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026da:	f7fe fe63 	bl	80013a4 <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e2:	f7fe fe5f 	bl	80013a4 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e067      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026f4:	4b35      	ldr	r3, [pc, #212]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1f0      	bne.n	80026e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002708:	d108      	bne.n	800271c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800270a:	4b30      	ldr	r3, [pc, #192]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	492d      	ldr	r1, [pc, #180]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002718:	4313      	orrs	r3, r2
 800271a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800271c:	4b2b      	ldr	r3, [pc, #172]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a19      	ldr	r1, [r3, #32]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	430b      	orrs	r3, r1
 800272e:	4927      	ldr	r1, [pc, #156]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002730:	4313      	orrs	r3, r2
 8002732:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002734:	4b27      	ldr	r3, [pc, #156]	; (80027d4 <HAL_RCC_OscConfig+0x4fc>)
 8002736:	2201      	movs	r2, #1
 8002738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273a:	f7fe fe33 	bl	80013a4 <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002742:	f7fe fe2f 	bl	80013a4 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e037      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002754:	4b1d      	ldr	r3, [pc, #116]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0f0      	beq.n	8002742 <HAL_RCC_OscConfig+0x46a>
 8002760:	e02f      	b.n	80027c2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002762:	4b1c      	ldr	r3, [pc, #112]	; (80027d4 <HAL_RCC_OscConfig+0x4fc>)
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002768:	f7fe fe1c 	bl	80013a4 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002770:	f7fe fe18 	bl	80013a4 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e020      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002782:	4b12      	ldr	r3, [pc, #72]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f0      	bne.n	8002770 <HAL_RCC_OscConfig+0x498>
 800278e:	e018      	b.n	80027c2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d101      	bne.n	800279c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e013      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800279c:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <HAL_RCC_OscConfig+0x4f4>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d106      	bne.n	80027be <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d001      	beq.n	80027c2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e000      	b.n	80027c4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40007000 	.word	0x40007000
 80027d4:	42420060 	.word	0x42420060

080027d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e0d0      	b.n	800298e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027ec:	4b6a      	ldr	r3, [pc, #424]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d910      	bls.n	800281c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fa:	4b67      	ldr	r3, [pc, #412]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f023 0207 	bic.w	r2, r3, #7
 8002802:	4965      	ldr	r1, [pc, #404]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	4313      	orrs	r3, r2
 8002808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800280a:	4b63      	ldr	r3, [pc, #396]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	429a      	cmp	r2, r3
 8002816:	d001      	beq.n	800281c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e0b8      	b.n	800298e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d020      	beq.n	800286a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002834:	4b59      	ldr	r3, [pc, #356]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	4a58      	ldr	r2, [pc, #352]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 800283a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800283e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	2b00      	cmp	r3, #0
 800284a:	d005      	beq.n	8002858 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800284c:	4b53      	ldr	r3, [pc, #332]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	4a52      	ldr	r2, [pc, #328]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002852:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002856:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002858:	4b50      	ldr	r3, [pc, #320]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	494d      	ldr	r1, [pc, #308]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	4313      	orrs	r3, r2
 8002868:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d040      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d107      	bne.n	800288e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287e:	4b47      	ldr	r3, [pc, #284]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d115      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e07f      	b.n	800298e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b02      	cmp	r3, #2
 8002894:	d107      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002896:	4b41      	ldr	r3, [pc, #260]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d109      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e073      	b.n	800298e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a6:	4b3d      	ldr	r3, [pc, #244]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e06b      	b.n	800298e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028b6:	4b39      	ldr	r3, [pc, #228]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f023 0203 	bic.w	r2, r3, #3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	4936      	ldr	r1, [pc, #216]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028c8:	f7fe fd6c 	bl	80013a4 <HAL_GetTick>
 80028cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ce:	e00a      	b.n	80028e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d0:	f7fe fd68 	bl	80013a4 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	f241 3288 	movw	r2, #5000	; 0x1388
 80028de:	4293      	cmp	r3, r2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e053      	b.n	800298e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e6:	4b2d      	ldr	r3, [pc, #180]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f003 020c 	and.w	r2, r3, #12
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d1eb      	bne.n	80028d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028f8:	4b27      	ldr	r3, [pc, #156]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d210      	bcs.n	8002928 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002906:	4b24      	ldr	r3, [pc, #144]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 0207 	bic.w	r2, r3, #7
 800290e:	4922      	ldr	r1, [pc, #136]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	4313      	orrs	r3, r2
 8002914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002916:	4b20      	ldr	r3, [pc, #128]	; (8002998 <HAL_RCC_ClockConfig+0x1c0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d001      	beq.n	8002928 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e032      	b.n	800298e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b00      	cmp	r3, #0
 8002932:	d008      	beq.n	8002946 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002934:	4b19      	ldr	r3, [pc, #100]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	4916      	ldr	r1, [pc, #88]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002942:	4313      	orrs	r3, r2
 8002944:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d009      	beq.n	8002966 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002952:	4b12      	ldr	r3, [pc, #72]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	490e      	ldr	r1, [pc, #56]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 8002962:	4313      	orrs	r3, r2
 8002964:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002966:	f000 f821 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 800296a:	4601      	mov	r1, r0
 800296c:	4b0b      	ldr	r3, [pc, #44]	; (800299c <HAL_RCC_ClockConfig+0x1c4>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	091b      	lsrs	r3, r3, #4
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	4a0a      	ldr	r2, [pc, #40]	; (80029a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002978:	5cd3      	ldrb	r3, [r2, r3]
 800297a:	fa21 f303 	lsr.w	r3, r1, r3
 800297e:	4a09      	ldr	r2, [pc, #36]	; (80029a4 <HAL_RCC_ClockConfig+0x1cc>)
 8002980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002982:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f7fe fcca 	bl	8001320 <HAL_InitTick>

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40022000 	.word	0x40022000
 800299c:	40021000 	.word	0x40021000
 80029a0:	08004bac 	.word	0x08004bac
 80029a4:	200003d8 	.word	0x200003d8
 80029a8:	200003dc 	.word	0x200003dc

080029ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029ac:	b490      	push	{r4, r7}
 80029ae:	b08a      	sub	sp, #40	; 0x28
 80029b0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80029b2:	4b2a      	ldr	r3, [pc, #168]	; (8002a5c <HAL_RCC_GetSysClockFreq+0xb0>)
 80029b4:	1d3c      	adds	r4, r7, #4
 80029b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80029bc:	4b28      	ldr	r3, [pc, #160]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029be:	881b      	ldrh	r3, [r3, #0]
 80029c0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	61fb      	str	r3, [r7, #28]
 80029c6:	2300      	movs	r3, #0
 80029c8:	61bb      	str	r3, [r7, #24]
 80029ca:	2300      	movs	r3, #0
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029d6:	4b23      	ldr	r3, [pc, #140]	; (8002a64 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f003 030c 	and.w	r3, r3, #12
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d002      	beq.n	80029ec <HAL_RCC_GetSysClockFreq+0x40>
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d003      	beq.n	80029f2 <HAL_RCC_GetSysClockFreq+0x46>
 80029ea:	e02d      	b.n	8002a48 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029ec:	4b1e      	ldr	r3, [pc, #120]	; (8002a68 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029ee:	623b      	str	r3, [r7, #32]
      break;
 80029f0:	e02d      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	0c9b      	lsrs	r3, r3, #18
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029fe:	4413      	add	r3, r2
 8002a00:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a04:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d013      	beq.n	8002a38 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a10:	4b14      	ldr	r3, [pc, #80]	; (8002a64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	0c5b      	lsrs	r3, r3, #17
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a1e:	4413      	add	r3, r2
 8002a20:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a24:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	4a0f      	ldr	r2, [pc, #60]	; (8002a68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a2a:	fb02 f203 	mul.w	r2, r2, r3
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24
 8002a36:	e004      	b.n	8002a42 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	4a0c      	ldr	r2, [pc, #48]	; (8002a6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a3c:	fb02 f303 	mul.w	r3, r2, r3
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	623b      	str	r3, [r7, #32]
      break;
 8002a46:	e002      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a48:	4b07      	ldr	r3, [pc, #28]	; (8002a68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a4a:	623b      	str	r3, [r7, #32]
      break;
 8002a4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3728      	adds	r7, #40	; 0x28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc90      	pop	{r4, r7}
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	08004b98 	.word	0x08004b98
 8002a60:	08004ba8 	.word	0x08004ba8
 8002a64:	40021000 	.word	0x40021000
 8002a68:	007a1200 	.word	0x007a1200
 8002a6c:	003d0900 	.word	0x003d0900

08002a70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a74:	4b02      	ldr	r3, [pc, #8]	; (8002a80 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a76:	681b      	ldr	r3, [r3, #0]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr
 8002a80:	200003d8 	.word	0x200003d8

08002a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a88:	f7ff fff2 	bl	8002a70 <HAL_RCC_GetHCLKFreq>
 8002a8c:	4601      	mov	r1, r0
 8002a8e:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	0a1b      	lsrs	r3, r3, #8
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	4a03      	ldr	r2, [pc, #12]	; (8002aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a9a:	5cd3      	ldrb	r3, [r2, r3]
 8002a9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	08004bbc 	.word	0x08004bbc

08002aac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ab0:	f7ff ffde 	bl	8002a70 <HAL_RCC_GetHCLKFreq>
 8002ab4:	4601      	mov	r1, r0
 8002ab6:	4b05      	ldr	r3, [pc, #20]	; (8002acc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	0adb      	lsrs	r3, r3, #11
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	4a03      	ldr	r2, [pc, #12]	; (8002ad0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ac2:	5cd3      	ldrb	r3, [r2, r3]
 8002ac4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	08004bbc 	.word	0x08004bbc

08002ad4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002adc:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <RCC_Delay+0x34>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a0a      	ldr	r2, [pc, #40]	; (8002b0c <RCC_Delay+0x38>)
 8002ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae6:	0a5b      	lsrs	r3, r3, #9
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	fb02 f303 	mul.w	r3, r2, r3
 8002aee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002af0:	bf00      	nop
  }
  while (Delay --);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	1e5a      	subs	r2, r3, #1
 8002af6:	60fa      	str	r2, [r7, #12]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1f9      	bne.n	8002af0 <RCC_Delay+0x1c>
}
 8002afc:	bf00      	nop
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bc80      	pop	{r7}
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	200003d8 	.word	0x200003d8
 8002b0c:	10624dd3 	.word	0x10624dd3

08002b10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e041      	b.n	8002ba6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d106      	bne.n	8002b3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7fe fae6 	bl	8001108 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4610      	mov	r0, r2
 8002b50:	f000 fbd2 	bl	80032f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b082      	sub	sp, #8
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e041      	b.n	8002c44 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d106      	bne.n	8002bda <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f839 	bl	8002c4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2202      	movs	r2, #2
 8002bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	3304      	adds	r3, #4
 8002bea:	4619      	mov	r1, r3
 8002bec:	4610      	mov	r0, r2
 8002bee:	f000 fb83 	bl	80032f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bc80      	pop	{r7}
 8002c5c:	4770      	bx	lr
	...

08002c60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d109      	bne.n	8002c84 <HAL_TIM_PWM_Start+0x24>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	bf14      	ite	ne
 8002c7c:	2301      	movne	r3, #1
 8002c7e:	2300      	moveq	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	e022      	b.n	8002cca <HAL_TIM_PWM_Start+0x6a>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d109      	bne.n	8002c9e <HAL_TIM_PWM_Start+0x3e>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	bf14      	ite	ne
 8002c96:	2301      	movne	r3, #1
 8002c98:	2300      	moveq	r3, #0
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	e015      	b.n	8002cca <HAL_TIM_PWM_Start+0x6a>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d109      	bne.n	8002cb8 <HAL_TIM_PWM_Start+0x58>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	bf14      	ite	ne
 8002cb0:	2301      	movne	r3, #1
 8002cb2:	2300      	moveq	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	e008      	b.n	8002cca <HAL_TIM_PWM_Start+0x6a>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	bf14      	ite	ne
 8002cc4:	2301      	movne	r3, #1
 8002cc6:	2300      	moveq	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e05e      	b.n	8002d90 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d104      	bne.n	8002ce2 <HAL_TIM_PWM_Start+0x82>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2202      	movs	r2, #2
 8002cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ce0:	e013      	b.n	8002d0a <HAL_TIM_PWM_Start+0xaa>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d104      	bne.n	8002cf2 <HAL_TIM_PWM_Start+0x92>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2202      	movs	r2, #2
 8002cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cf0:	e00b      	b.n	8002d0a <HAL_TIM_PWM_Start+0xaa>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d104      	bne.n	8002d02 <HAL_TIM_PWM_Start+0xa2>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d00:	e003      	b.n	8002d0a <HAL_TIM_PWM_Start+0xaa>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2202      	movs	r2, #2
 8002d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	6839      	ldr	r1, [r7, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 fd70 	bl	80037f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a1e      	ldr	r2, [pc, #120]	; (8002d98 <HAL_TIM_PWM_Start+0x138>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d107      	bne.n	8002d32 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a18      	ldr	r2, [pc, #96]	; (8002d98 <HAL_TIM_PWM_Start+0x138>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d00e      	beq.n	8002d5a <HAL_TIM_PWM_Start+0xfa>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d44:	d009      	beq.n	8002d5a <HAL_TIM_PWM_Start+0xfa>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a14      	ldr	r2, [pc, #80]	; (8002d9c <HAL_TIM_PWM_Start+0x13c>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d004      	beq.n	8002d5a <HAL_TIM_PWM_Start+0xfa>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a12      	ldr	r2, [pc, #72]	; (8002da0 <HAL_TIM_PWM_Start+0x140>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d111      	bne.n	8002d7e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2b06      	cmp	r3, #6
 8002d6a:	d010      	beq.n	8002d8e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f042 0201 	orr.w	r2, r2, #1
 8002d7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d7c:	e007      	b.n	8002d8e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f042 0201 	orr.w	r2, r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40012c00 	.word	0x40012c00
 8002d9c:	40000400 	.word	0x40000400
 8002da0:	40000800 	.word	0x40000800

08002da4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d122      	bne.n	8002e00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d11b      	bne.n	8002e00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f06f 0202 	mvn.w	r2, #2
 8002dd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 fa6b 	bl	80032c2 <HAL_TIM_IC_CaptureCallback>
 8002dec:	e005      	b.n	8002dfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 fa5e 	bl	80032b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 fa6d 	bl	80032d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d122      	bne.n	8002e54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d11b      	bne.n	8002e54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f06f 0204 	mvn.w	r2, #4
 8002e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2202      	movs	r2, #2
 8002e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 fa41 	bl	80032c2 <HAL_TIM_IC_CaptureCallback>
 8002e40:	e005      	b.n	8002e4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 fa34 	bl	80032b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 fa43 	bl	80032d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	2b08      	cmp	r3, #8
 8002e60:	d122      	bne.n	8002ea8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d11b      	bne.n	8002ea8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f06f 0208 	mvn.w	r2, #8
 8002e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2204      	movs	r2, #4
 8002e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 fa17 	bl	80032c2 <HAL_TIM_IC_CaptureCallback>
 8002e94:	e005      	b.n	8002ea2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 fa0a 	bl	80032b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 fa19 	bl	80032d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	f003 0310 	and.w	r3, r3, #16
 8002eb2:	2b10      	cmp	r3, #16
 8002eb4:	d122      	bne.n	8002efc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	2b10      	cmp	r3, #16
 8002ec2:	d11b      	bne.n	8002efc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f06f 0210 	mvn.w	r2, #16
 8002ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2208      	movs	r2, #8
 8002ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f9ed 	bl	80032c2 <HAL_TIM_IC_CaptureCallback>
 8002ee8:	e005      	b.n	8002ef6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f9e0 	bl	80032b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f9ef 	bl	80032d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d10e      	bne.n	8002f28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d107      	bne.n	8002f28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f06f 0201 	mvn.w	r2, #1
 8002f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f9bb 	bl	800329e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f32:	2b80      	cmp	r3, #128	; 0x80
 8002f34:	d10e      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f40:	2b80      	cmp	r3, #128	; 0x80
 8002f42:	d107      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 fcdd 	bl	800390e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f5e:	2b40      	cmp	r3, #64	; 0x40
 8002f60:	d10e      	bne.n	8002f80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6c:	2b40      	cmp	r3, #64	; 0x40
 8002f6e:	d107      	bne.n	8002f80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f9b3 	bl	80032e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	f003 0320 	and.w	r3, r3, #32
 8002f8a:	2b20      	cmp	r3, #32
 8002f8c:	d10e      	bne.n	8002fac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f003 0320 	and.w	r3, r3, #32
 8002f98:	2b20      	cmp	r3, #32
 8002f9a:	d107      	bne.n	8002fac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f06f 0220 	mvn.w	r2, #32
 8002fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 fca8 	bl	80038fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fac:	bf00      	nop
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e0ac      	b.n	8003128 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b0c      	cmp	r3, #12
 8002fda:	f200 809f 	bhi.w	800311c <HAL_TIM_PWM_ConfigChannel+0x168>
 8002fde:	a201      	add	r2, pc, #4	; (adr r2, 8002fe4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe4:	08003019 	.word	0x08003019
 8002fe8:	0800311d 	.word	0x0800311d
 8002fec:	0800311d 	.word	0x0800311d
 8002ff0:	0800311d 	.word	0x0800311d
 8002ff4:	08003059 	.word	0x08003059
 8002ff8:	0800311d 	.word	0x0800311d
 8002ffc:	0800311d 	.word	0x0800311d
 8003000:	0800311d 	.word	0x0800311d
 8003004:	0800309b 	.word	0x0800309b
 8003008:	0800311d 	.word	0x0800311d
 800300c:	0800311d 	.word	0x0800311d
 8003010:	0800311d 	.word	0x0800311d
 8003014:	080030db 	.word	0x080030db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	4618      	mov	r0, r3
 8003020:	f000 f9cc 	bl	80033bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699a      	ldr	r2, [r3, #24]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0208 	orr.w	r2, r2, #8
 8003032:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	699a      	ldr	r2, [r3, #24]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0204 	bic.w	r2, r2, #4
 8003042:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6999      	ldr	r1, [r3, #24]
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	691a      	ldr	r2, [r3, #16]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	619a      	str	r2, [r3, #24]
      break;
 8003056:	e062      	b.n	800311e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68b9      	ldr	r1, [r7, #8]
 800305e:	4618      	mov	r0, r3
 8003060:	f000 fa12 	bl	8003488 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699a      	ldr	r2, [r3, #24]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003072:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	699a      	ldr	r2, [r3, #24]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003082:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6999      	ldr	r1, [r3, #24]
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	021a      	lsls	r2, r3, #8
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	430a      	orrs	r2, r1
 8003096:	619a      	str	r2, [r3, #24]
      break;
 8003098:	e041      	b.n	800311e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68b9      	ldr	r1, [r7, #8]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f000 fa5b 	bl	800355c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	69da      	ldr	r2, [r3, #28]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f042 0208 	orr.w	r2, r2, #8
 80030b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	69da      	ldr	r2, [r3, #28]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0204 	bic.w	r2, r2, #4
 80030c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	69d9      	ldr	r1, [r3, #28]
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	691a      	ldr	r2, [r3, #16]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	61da      	str	r2, [r3, #28]
      break;
 80030d8:	e021      	b.n	800311e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68b9      	ldr	r1, [r7, #8]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 faa5 	bl	8003630 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	69da      	ldr	r2, [r3, #28]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	69da      	ldr	r2, [r3, #28]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003104:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	69d9      	ldr	r1, [r3, #28]
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	021a      	lsls	r2, r3, #8
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	61da      	str	r2, [r3, #28]
      break;
 800311a:	e000      	b.n	800311e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800311c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_TIM_ConfigClockSource+0x18>
 8003144:	2302      	movs	r3, #2
 8003146:	e0a6      	b.n	8003296 <HAL_TIM_ConfigClockSource+0x166>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003166:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800316e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2b40      	cmp	r3, #64	; 0x40
 800317e:	d067      	beq.n	8003250 <HAL_TIM_ConfigClockSource+0x120>
 8003180:	2b40      	cmp	r3, #64	; 0x40
 8003182:	d80b      	bhi.n	800319c <HAL_TIM_ConfigClockSource+0x6c>
 8003184:	2b10      	cmp	r3, #16
 8003186:	d073      	beq.n	8003270 <HAL_TIM_ConfigClockSource+0x140>
 8003188:	2b10      	cmp	r3, #16
 800318a:	d802      	bhi.n	8003192 <HAL_TIM_ConfigClockSource+0x62>
 800318c:	2b00      	cmp	r3, #0
 800318e:	d06f      	beq.n	8003270 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003190:	e078      	b.n	8003284 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003192:	2b20      	cmp	r3, #32
 8003194:	d06c      	beq.n	8003270 <HAL_TIM_ConfigClockSource+0x140>
 8003196:	2b30      	cmp	r3, #48	; 0x30
 8003198:	d06a      	beq.n	8003270 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800319a:	e073      	b.n	8003284 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800319c:	2b70      	cmp	r3, #112	; 0x70
 800319e:	d00d      	beq.n	80031bc <HAL_TIM_ConfigClockSource+0x8c>
 80031a0:	2b70      	cmp	r3, #112	; 0x70
 80031a2:	d804      	bhi.n	80031ae <HAL_TIM_ConfigClockSource+0x7e>
 80031a4:	2b50      	cmp	r3, #80	; 0x50
 80031a6:	d033      	beq.n	8003210 <HAL_TIM_ConfigClockSource+0xe0>
 80031a8:	2b60      	cmp	r3, #96	; 0x60
 80031aa:	d041      	beq.n	8003230 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80031ac:	e06a      	b.n	8003284 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80031ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b2:	d066      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0x152>
 80031b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031b8:	d017      	beq.n	80031ea <HAL_TIM_ConfigClockSource+0xba>
      break;
 80031ba:	e063      	b.n	8003284 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6818      	ldr	r0, [r3, #0]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	6899      	ldr	r1, [r3, #8]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f000 faf5 	bl	80037ba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031de:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	609a      	str	r2, [r3, #8]
      break;
 80031e8:	e04c      	b.n	8003284 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6818      	ldr	r0, [r3, #0]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	6899      	ldr	r1, [r3, #8]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f000 fade 	bl	80037ba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800320c:	609a      	str	r2, [r3, #8]
      break;
 800320e:	e039      	b.n	8003284 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6818      	ldr	r0, [r3, #0]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	6859      	ldr	r1, [r3, #4]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	461a      	mov	r2, r3
 800321e:	f000 fa55 	bl	80036cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2150      	movs	r1, #80	; 0x50
 8003228:	4618      	mov	r0, r3
 800322a:	f000 faac 	bl	8003786 <TIM_ITRx_SetConfig>
      break;
 800322e:	e029      	b.n	8003284 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6818      	ldr	r0, [r3, #0]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	6859      	ldr	r1, [r3, #4]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	461a      	mov	r2, r3
 800323e:	f000 fa73 	bl	8003728 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2160      	movs	r1, #96	; 0x60
 8003248:	4618      	mov	r0, r3
 800324a:	f000 fa9c 	bl	8003786 <TIM_ITRx_SetConfig>
      break;
 800324e:	e019      	b.n	8003284 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6818      	ldr	r0, [r3, #0]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	6859      	ldr	r1, [r3, #4]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	461a      	mov	r2, r3
 800325e:	f000 fa35 	bl	80036cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2140      	movs	r1, #64	; 0x40
 8003268:	4618      	mov	r0, r3
 800326a:	f000 fa8c 	bl	8003786 <TIM_ITRx_SetConfig>
      break;
 800326e:	e009      	b.n	8003284 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4619      	mov	r1, r3
 800327a:	4610      	mov	r0, r2
 800327c:	f000 fa83 	bl	8003786 <TIM_ITRx_SetConfig>
        break;
 8003280:	e000      	b.n	8003284 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003282:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr

080032b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc80      	pop	{r7}
 80032c0:	4770      	bx	lr

080032c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr

080032d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr

080032e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr

080032f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a29      	ldr	r2, [pc, #164]	; (80033b0 <TIM_Base_SetConfig+0xb8>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d00b      	beq.n	8003328 <TIM_Base_SetConfig+0x30>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003316:	d007      	beq.n	8003328 <TIM_Base_SetConfig+0x30>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a26      	ldr	r2, [pc, #152]	; (80033b4 <TIM_Base_SetConfig+0xbc>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d003      	beq.n	8003328 <TIM_Base_SetConfig+0x30>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a25      	ldr	r2, [pc, #148]	; (80033b8 <TIM_Base_SetConfig+0xc0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d108      	bne.n	800333a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800332e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	4313      	orrs	r3, r2
 8003338:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a1c      	ldr	r2, [pc, #112]	; (80033b0 <TIM_Base_SetConfig+0xb8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00b      	beq.n	800335a <TIM_Base_SetConfig+0x62>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003348:	d007      	beq.n	800335a <TIM_Base_SetConfig+0x62>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a19      	ldr	r2, [pc, #100]	; (80033b4 <TIM_Base_SetConfig+0xbc>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d003      	beq.n	800335a <TIM_Base_SetConfig+0x62>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a18      	ldr	r2, [pc, #96]	; (80033b8 <TIM_Base_SetConfig+0xc0>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d108      	bne.n	800336c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4313      	orrs	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	4313      	orrs	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a07      	ldr	r2, [pc, #28]	; (80033b0 <TIM_Base_SetConfig+0xb8>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d103      	bne.n	80033a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	615a      	str	r2, [r3, #20]
}
 80033a6:	bf00      	nop
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr
 80033b0:	40012c00 	.word	0x40012c00
 80033b4:	40000400 	.word	0x40000400
 80033b8:	40000800 	.word	0x40000800

080033bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033bc:	b480      	push	{r7}
 80033be:	b087      	sub	sp, #28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	f023 0201 	bic.w	r2, r3, #1
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f023 0303 	bic.w	r3, r3, #3
 80033f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f023 0302 	bic.w	r3, r3, #2
 8003404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	4313      	orrs	r3, r2
 800340e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a1c      	ldr	r2, [pc, #112]	; (8003484 <TIM_OC1_SetConfig+0xc8>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d10c      	bne.n	8003432 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f023 0308 	bic.w	r3, r3, #8
 800341e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	4313      	orrs	r3, r2
 8003428:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f023 0304 	bic.w	r3, r3, #4
 8003430:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a13      	ldr	r2, [pc, #76]	; (8003484 <TIM_OC1_SetConfig+0xc8>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d111      	bne.n	800345e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003440:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003448:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	4313      	orrs	r3, r2
 800345c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	621a      	str	r2, [r3, #32]
}
 8003478:	bf00      	nop
 800347a:	371c      	adds	r7, #28
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	40012c00 	.word	0x40012c00

08003488 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003488:	b480      	push	{r7}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	f023 0210 	bic.w	r2, r3, #16
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	021b      	lsls	r3, r3, #8
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f023 0320 	bic.w	r3, r3, #32
 80034d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	4313      	orrs	r3, r2
 80034de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a1d      	ldr	r2, [pc, #116]	; (8003558 <TIM_OC2_SetConfig+0xd0>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d10d      	bne.n	8003504 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003502:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a14      	ldr	r2, [pc, #80]	; (8003558 <TIM_OC2_SetConfig+0xd0>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d113      	bne.n	8003534 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003512:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800351a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4313      	orrs	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	4313      	orrs	r3, r2
 8003532:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	621a      	str	r2, [r3, #32]
}
 800354e:	bf00      	nop
 8003550:	371c      	adds	r7, #28
 8003552:	46bd      	mov	sp, r7
 8003554:	bc80      	pop	{r7}
 8003556:	4770      	bx	lr
 8003558:	40012c00 	.word	0x40012c00

0800355c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800358a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f023 0303 	bic.w	r3, r3, #3
 8003592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	021b      	lsls	r3, r3, #8
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a1d      	ldr	r2, [pc, #116]	; (800362c <TIM_OC3_SetConfig+0xd0>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d10d      	bne.n	80035d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	021b      	lsls	r3, r3, #8
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a14      	ldr	r2, [pc, #80]	; (800362c <TIM_OC3_SetConfig+0xd0>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d113      	bne.n	8003606 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	011b      	lsls	r3, r3, #4
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4313      	orrs	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	621a      	str	r2, [r3, #32]
}
 8003620:	bf00      	nop
 8003622:	371c      	adds	r7, #28
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	40012c00 	.word	0x40012c00

08003630 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003630:	b480      	push	{r7}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800365e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	021b      	lsls	r3, r3, #8
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	4313      	orrs	r3, r2
 8003672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800367a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	031b      	lsls	r3, r3, #12
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a0f      	ldr	r2, [pc, #60]	; (80036c8 <TIM_OC4_SetConfig+0x98>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d109      	bne.n	80036a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003696:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	019b      	lsls	r3, r3, #6
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	621a      	str	r2, [r3, #32]
}
 80036be:	bf00      	nop
 80036c0:	371c      	adds	r7, #28
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr
 80036c8:	40012c00 	.word	0x40012c00

080036cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	f023 0201 	bic.w	r2, r3, #1
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	011b      	lsls	r3, r3, #4
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	4313      	orrs	r3, r2
 8003700:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f023 030a 	bic.w	r3, r3, #10
 8003708:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4313      	orrs	r3, r2
 8003710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	621a      	str	r2, [r3, #32]
}
 800371e:	bf00      	nop
 8003720:	371c      	adds	r7, #28
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr

08003728 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003728:	b480      	push	{r7}
 800372a:	b087      	sub	sp, #28
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	f023 0210 	bic.w	r2, r3, #16
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003752:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	031b      	lsls	r3, r3, #12
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	4313      	orrs	r3, r2
 800375c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003764:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	621a      	str	r2, [r3, #32]
}
 800377c:	bf00      	nop
 800377e:	371c      	adds	r7, #28
 8003780:	46bd      	mov	sp, r7
 8003782:	bc80      	pop	{r7}
 8003784:	4770      	bx	lr

08003786 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003786:	b480      	push	{r7}
 8003788:	b085      	sub	sp, #20
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
 800378e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800379c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	f043 0307 	orr.w	r3, r3, #7
 80037a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	609a      	str	r2, [r3, #8]
}
 80037b0:	bf00      	nop
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bc80      	pop	{r7}
 80037b8:	4770      	bx	lr

080037ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b087      	sub	sp, #28
 80037be:	af00      	add	r7, sp, #0
 80037c0:	60f8      	str	r0, [r7, #12]
 80037c2:	60b9      	str	r1, [r7, #8]
 80037c4:	607a      	str	r2, [r7, #4]
 80037c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	021a      	lsls	r2, r3, #8
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	431a      	orrs	r2, r3
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	609a      	str	r2, [r3, #8]
}
 80037ee:	bf00      	nop
 80037f0:	371c      	adds	r7, #28
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr

080037f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b087      	sub	sp, #28
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f003 031f 	and.w	r3, r3, #31
 800380a:	2201      	movs	r2, #1
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6a1a      	ldr	r2, [r3, #32]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	43db      	mvns	r3, r3
 800381a:	401a      	ands	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6a1a      	ldr	r2, [r3, #32]
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	f003 031f 	and.w	r3, r3, #31
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	fa01 f303 	lsl.w	r3, r1, r3
 8003830:	431a      	orrs	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	621a      	str	r2, [r3, #32]
}
 8003836:	bf00      	nop
 8003838:	371c      	adds	r7, #28
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr

08003840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003850:	2b01      	cmp	r3, #1
 8003852:	d101      	bne.n	8003858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003854:	2302      	movs	r3, #2
 8003856:	e046      	b.n	80038e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2202      	movs	r2, #2
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800387e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	4313      	orrs	r3, r2
 8003888:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a16      	ldr	r2, [pc, #88]	; (80038f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d00e      	beq.n	80038ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a4:	d009      	beq.n	80038ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a12      	ldr	r2, [pc, #72]	; (80038f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d004      	beq.n	80038ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a10      	ldr	r2, [pc, #64]	; (80038f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d10c      	bne.n	80038d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr
 80038f0:	40012c00 	.word	0x40012c00
 80038f4:	40000400 	.word	0x40000400
 80038f8:	40000800 	.word	0x40000800

080038fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	bc80      	pop	{r7}
 800390c:	4770      	bx	lr

0800390e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr

08003920 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e03f      	b.n	80039b2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d106      	bne.n	800394c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7fd fc5c 	bl	8001204 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2224      	movs	r2, #36	; 0x24
 8003950:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003962:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 fbd7 	bl	8004118 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003978:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695a      	ldr	r2, [r3, #20]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003988:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68da      	ldr	r2, [r3, #12]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003998:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2220      	movs	r2, #32
 80039ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b08a      	sub	sp, #40	; 0x28
 80039be:	af02      	add	r7, sp, #8
 80039c0:	60f8      	str	r0, [r7, #12]
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	603b      	str	r3, [r7, #0]
 80039c6:	4613      	mov	r3, r2
 80039c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b20      	cmp	r3, #32
 80039d8:	d17c      	bne.n	8003ad4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d002      	beq.n	80039e6 <HAL_UART_Transmit+0x2c>
 80039e0:	88fb      	ldrh	r3, [r7, #6]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e075      	b.n	8003ad6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_UART_Transmit+0x3e>
 80039f4:	2302      	movs	r3, #2
 80039f6:	e06e      	b.n	8003ad6 <HAL_UART_Transmit+0x11c>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2221      	movs	r2, #33	; 0x21
 8003a0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003a0e:	f7fd fcc9 	bl	80013a4 <HAL_GetTick>
 8003a12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	88fa      	ldrh	r2, [r7, #6]
 8003a18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	88fa      	ldrh	r2, [r7, #6]
 8003a1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a28:	d108      	bne.n	8003a3c <HAL_UART_Transmit+0x82>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d104      	bne.n	8003a3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a32:	2300      	movs	r3, #0
 8003a34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	61bb      	str	r3, [r7, #24]
 8003a3a:	e003      	b.n	8003a44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a40:	2300      	movs	r3, #0
 8003a42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003a4c:	e02a      	b.n	8003aa4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	2200      	movs	r2, #0
 8003a56:	2180      	movs	r1, #128	; 0x80
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f000 f9fa 	bl	8003e52 <UART_WaitOnFlagUntilTimeout>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e036      	b.n	8003ad6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10b      	bne.n	8003a86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	881b      	ldrh	r3, [r3, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	3302      	adds	r3, #2
 8003a82:	61bb      	str	r3, [r7, #24]
 8003a84:	e007      	b.n	8003a96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	781a      	ldrb	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	3301      	adds	r3, #1
 8003a94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1cf      	bne.n	8003a4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	2140      	movs	r1, #64	; 0x40
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 f9ca 	bl	8003e52 <UART_WaitOnFlagUntilTimeout>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e006      	b.n	8003ad6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2220      	movs	r2, #32
 8003acc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	e000      	b.n	8003ad6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ad4:	2302      	movs	r3, #2
  }
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3720      	adds	r7, #32
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b08a      	sub	sp, #40	; 0x28
 8003ae2:	af02      	add	r7, sp, #8
 8003ae4:	60f8      	str	r0, [r7, #12]
 8003ae6:	60b9      	str	r1, [r7, #8]
 8003ae8:	603b      	str	r3, [r7, #0]
 8003aea:	4613      	mov	r3, r2
 8003aec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b20      	cmp	r3, #32
 8003afc:	f040 8089 	bne.w	8003c12 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <HAL_UART_Receive+0x2e>
 8003b06:	88fb      	ldrh	r3, [r7, #6]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e081      	b.n	8003c14 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d101      	bne.n	8003b1e <HAL_UART_Receive+0x40>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e07a      	b.n	8003c14 <HAL_UART_Receive+0x136>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2222      	movs	r2, #34	; 0x22
 8003b30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003b34:	f7fd fc36 	bl	80013a4 <HAL_GetTick>
 8003b38:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	88fa      	ldrh	r2, [r7, #6]
 8003b3e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	88fa      	ldrh	r2, [r7, #6]
 8003b44:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b4e:	d108      	bne.n	8003b62 <HAL_UART_Receive+0x84>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d104      	bne.n	8003b62 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	61bb      	str	r3, [r7, #24]
 8003b60:	e003      	b.n	8003b6a <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b66:	2300      	movs	r3, #0
 8003b68:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003b72:	e043      	b.n	8003bfc <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	2120      	movs	r1, #32
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 f967 	bl	8003e52 <UART_WaitOnFlagUntilTimeout>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e042      	b.n	8003c14 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10c      	bne.n	8003bae <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	3302      	adds	r3, #2
 8003baa:	61bb      	str	r3, [r7, #24]
 8003bac:	e01f      	b.n	8003bee <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb6:	d007      	beq.n	8003bc8 <HAL_UART_Receive+0xea>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10a      	bne.n	8003bd6 <HAL_UART_Receive+0xf8>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d106      	bne.n	8003bd6 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	701a      	strb	r2, [r3, #0]
 8003bd4:	e008      	b.n	8003be8 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	3301      	adds	r3, #1
 8003bec:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1b6      	bne.n	8003b74 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	e000      	b.n	8003c14 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003c12:	2302      	movs	r3, #2
  }
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3720      	adds	r7, #32
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10d      	bne.n	8003c6e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	f003 0320 	and.w	r3, r3, #32
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d008      	beq.n	8003c6e <HAL_UART_IRQHandler+0x52>
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	f003 0320 	and.w	r3, r3, #32
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f9d5 	bl	8004016 <UART_Receive_IT>
      return;
 8003c6c:	e0d1      	b.n	8003e12 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 80b0 	beq.w	8003dd6 <HAL_UART_IRQHandler+0x1ba>
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d105      	bne.n	8003c8c <HAL_UART_IRQHandler+0x70>
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 80a5 	beq.w	8003dd6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00a      	beq.n	8003cac <HAL_UART_IRQHandler+0x90>
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d005      	beq.n	8003cac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca4:	f043 0201 	orr.w	r2, r3, #1
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	f003 0304 	and.w	r3, r3, #4
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00a      	beq.n	8003ccc <HAL_UART_IRQHandler+0xb0>
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d005      	beq.n	8003ccc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc4:	f043 0202 	orr.w	r2, r3, #2
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <HAL_UART_IRQHandler+0xd0>
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d005      	beq.n	8003cec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce4:	f043 0204 	orr.w	r2, r3, #4
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00f      	beq.n	8003d16 <HAL_UART_IRQHandler+0xfa>
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	f003 0320 	and.w	r3, r3, #32
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d104      	bne.n	8003d0a <HAL_UART_IRQHandler+0xee>
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d005      	beq.n	8003d16 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0e:	f043 0208 	orr.w	r2, r3, #8
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d078      	beq.n	8003e10 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	f003 0320 	and.w	r3, r3, #32
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d007      	beq.n	8003d38 <HAL_UART_IRQHandler+0x11c>
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	f003 0320 	and.w	r3, r3, #32
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d002      	beq.n	8003d38 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f96f 	bl	8004016 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	bf14      	ite	ne
 8003d46:	2301      	movne	r3, #1
 8003d48:	2300      	moveq	r3, #0
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d52:	f003 0308 	and.w	r3, r3, #8
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d102      	bne.n	8003d60 <HAL_UART_IRQHandler+0x144>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d031      	beq.n	8003dc4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 f8c0 	bl	8003ee6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d023      	beq.n	8003dbc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695a      	ldr	r2, [r3, #20]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d82:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d013      	beq.n	8003db4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d90:	4a21      	ldr	r2, [pc, #132]	; (8003e18 <HAL_UART_IRQHandler+0x1fc>)
 8003d92:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7fd fc3d 	bl	8001618 <HAL_DMA_Abort_IT>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d016      	beq.n	8003dd2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003dae:	4610      	mov	r0, r2
 8003db0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db2:	e00e      	b.n	8003dd2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f843 	bl	8003e40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dba:	e00a      	b.n	8003dd2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 f83f 	bl	8003e40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc2:	e006      	b.n	8003dd2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 f83b 	bl	8003e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003dd0:	e01e      	b.n	8003e10 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd2:	bf00      	nop
    return;
 8003dd4:	e01c      	b.n	8003e10 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d008      	beq.n	8003df2 <HAL_UART_IRQHandler+0x1d6>
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f8ac 	bl	8003f48 <UART_Transmit_IT>
    return;
 8003df0:	e00f      	b.n	8003e12 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00a      	beq.n	8003e12 <HAL_UART_IRQHandler+0x1f6>
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d005      	beq.n	8003e12 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f8ed 	bl	8003fe6 <UART_EndTransmit_IT>
    return;
 8003e0c:	bf00      	nop
 8003e0e:	e000      	b.n	8003e12 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003e10:	bf00      	nop
  }
}
 8003e12:	3720      	adds	r7, #32
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	08003f21 	.word	0x08003f21

08003e1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bc80      	pop	{r7}
 8003e2c:	4770      	bx	lr

08003e2e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bc80      	pop	{r7}
 8003e3e:	4770      	bx	lr

08003e40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bc80      	pop	{r7}
 8003e50:	4770      	bx	lr

08003e52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b084      	sub	sp, #16
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	60f8      	str	r0, [r7, #12]
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	603b      	str	r3, [r7, #0]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e62:	e02c      	b.n	8003ebe <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6a:	d028      	beq.n	8003ebe <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d007      	beq.n	8003e82 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e72:	f7fd fa97 	bl	80013a4 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d21d      	bcs.n	8003ebe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68da      	ldr	r2, [r3, #12]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e90:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	695a      	ldr	r2, [r3, #20]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0201 	bic.w	r2, r2, #1
 8003ea0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2220      	movs	r2, #32
 8003eae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e00f      	b.n	8003ede <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	bf0c      	ite	eq
 8003ece:	2301      	moveq	r3, #1
 8003ed0:	2300      	movne	r3, #0
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	79fb      	ldrb	r3, [r7, #7]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d0c3      	beq.n	8003e64 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b083      	sub	sp, #12
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68da      	ldr	r2, [r3, #12]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003efc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	695a      	ldr	r2, [r3, #20]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0201 	bic.w	r2, r2, #1
 8003f0c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003f16:	bf00      	nop
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bc80      	pop	{r7}
 8003f1e:	4770      	bx	lr

08003f20 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f7ff ff80 	bl	8003e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f40:	bf00      	nop
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b21      	cmp	r3, #33	; 0x21
 8003f5a:	d13e      	bne.n	8003fda <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f64:	d114      	bne.n	8003f90 <UART_Transmit_IT+0x48>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d110      	bne.n	8003f90 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	461a      	mov	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f82:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	1c9a      	adds	r2, r3, #2
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	621a      	str	r2, [r3, #32]
 8003f8e:	e008      	b.n	8003fa2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	1c59      	adds	r1, r3, #1
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6211      	str	r1, [r2, #32]
 8003f9a:	781a      	ldrb	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	4619      	mov	r1, r3
 8003fb0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10f      	bne.n	8003fd6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68da      	ldr	r2, [r3, #12]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fc4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68da      	ldr	r2, [r3, #12]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fd4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	e000      	b.n	8003fdc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003fda:	2302      	movs	r3, #2
  }
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bc80      	pop	{r7}
 8003fe4:	4770      	bx	lr

08003fe6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b082      	sub	sp, #8
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ffc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2220      	movs	r2, #32
 8004002:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7ff ff08 	bl	8003e1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b084      	sub	sp, #16
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b22      	cmp	r3, #34	; 0x22
 8004028:	d170      	bne.n	800410c <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004032:	d117      	bne.n	8004064 <UART_Receive_IT+0x4e>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d113      	bne.n	8004064 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800403c:	2300      	movs	r3, #0
 800403e:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004044:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	b29b      	uxth	r3, r3
 800404e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004052:	b29a      	uxth	r2, r3
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405c:	1c9a      	adds	r2, r3, #2
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	629a      	str	r2, [r3, #40]	; 0x28
 8004062:	e026      	b.n	80040b2 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004068:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800406a:	2300      	movs	r3, #0
 800406c:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004076:	d007      	beq.n	8004088 <UART_Receive_IT+0x72>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10a      	bne.n	8004096 <UART_Receive_IT+0x80>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d106      	bne.n	8004096 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	b2da      	uxtb	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	701a      	strb	r2, [r3, #0]
 8004094:	e008      	b.n	80040a8 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	b2db      	uxtb	r3, r3
 800409e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ac:	1c5a      	adds	r2, r3, #1
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	4619      	mov	r1, r3
 80040c0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d120      	bne.n	8004108 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0220 	bic.w	r2, r2, #32
 80040d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68da      	ldr	r2, [r3, #12]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	695a      	ldr	r2, [r3, #20]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0201 	bic.w	r2, r2, #1
 80040f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2220      	movs	r2, #32
 80040fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7ff fe95 	bl	8003e2e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004104:	2300      	movs	r3, #0
 8004106:	e002      	b.n	800410e <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8004108:	2300      	movs	r3, #0
 800410a:	e000      	b.n	800410e <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800410c:	2302      	movs	r3, #2
  }
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
	...

08004118 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	431a      	orrs	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	4313      	orrs	r3, r2
 8004146:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004152:	f023 030c 	bic.w	r3, r3, #12
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	6812      	ldr	r2, [r2, #0]
 800415a:	68b9      	ldr	r1, [r7, #8]
 800415c:	430b      	orrs	r3, r1
 800415e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699a      	ldr	r2, [r3, #24]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a2c      	ldr	r2, [pc, #176]	; (800422c <UART_SetConfig+0x114>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d103      	bne.n	8004188 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004180:	f7fe fc94 	bl	8002aac <HAL_RCC_GetPCLK2Freq>
 8004184:	60f8      	str	r0, [r7, #12]
 8004186:	e002      	b.n	800418e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004188:	f7fe fc7c 	bl	8002a84 <HAL_RCC_GetPCLK1Freq>
 800418c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	4613      	mov	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4413      	add	r3, r2
 8004196:	009a      	lsls	r2, r3, #2
 8004198:	441a      	add	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a4:	4a22      	ldr	r2, [pc, #136]	; (8004230 <UART_SetConfig+0x118>)
 80041a6:	fba2 2303 	umull	r2, r3, r2, r3
 80041aa:	095b      	lsrs	r3, r3, #5
 80041ac:	0119      	lsls	r1, r3, #4
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	4613      	mov	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	009a      	lsls	r2, r3, #2
 80041b8:	441a      	add	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80041c4:	4b1a      	ldr	r3, [pc, #104]	; (8004230 <UART_SetConfig+0x118>)
 80041c6:	fba3 0302 	umull	r0, r3, r3, r2
 80041ca:	095b      	lsrs	r3, r3, #5
 80041cc:	2064      	movs	r0, #100	; 0x64
 80041ce:	fb00 f303 	mul.w	r3, r0, r3
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	3332      	adds	r3, #50	; 0x32
 80041d8:	4a15      	ldr	r2, [pc, #84]	; (8004230 <UART_SetConfig+0x118>)
 80041da:	fba2 2303 	umull	r2, r3, r2, r3
 80041de:	095b      	lsrs	r3, r3, #5
 80041e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041e4:	4419      	add	r1, r3
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	4613      	mov	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	009a      	lsls	r2, r3, #2
 80041f0:	441a      	add	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80041fc:	4b0c      	ldr	r3, [pc, #48]	; (8004230 <UART_SetConfig+0x118>)
 80041fe:	fba3 0302 	umull	r0, r3, r3, r2
 8004202:	095b      	lsrs	r3, r3, #5
 8004204:	2064      	movs	r0, #100	; 0x64
 8004206:	fb00 f303 	mul.w	r3, r0, r3
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	3332      	adds	r3, #50	; 0x32
 8004210:	4a07      	ldr	r2, [pc, #28]	; (8004230 <UART_SetConfig+0x118>)
 8004212:	fba2 2303 	umull	r2, r3, r2, r3
 8004216:	095b      	lsrs	r3, r3, #5
 8004218:	f003 020f 	and.w	r2, r3, #15
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	440a      	add	r2, r1
 8004222:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004224:	bf00      	nop
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40013800 	.word	0x40013800
 8004230:	51eb851f 	.word	0x51eb851f

08004234 <__errno>:
 8004234:	4b01      	ldr	r3, [pc, #4]	; (800423c <__errno+0x8>)
 8004236:	6818      	ldr	r0, [r3, #0]
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	200003e4 	.word	0x200003e4

08004240 <__libc_init_array>:
 8004240:	b570      	push	{r4, r5, r6, lr}
 8004242:	2500      	movs	r5, #0
 8004244:	4e0c      	ldr	r6, [pc, #48]	; (8004278 <__libc_init_array+0x38>)
 8004246:	4c0d      	ldr	r4, [pc, #52]	; (800427c <__libc_init_array+0x3c>)
 8004248:	1ba4      	subs	r4, r4, r6
 800424a:	10a4      	asrs	r4, r4, #2
 800424c:	42a5      	cmp	r5, r4
 800424e:	d109      	bne.n	8004264 <__libc_init_array+0x24>
 8004250:	f000 fc94 	bl	8004b7c <_init>
 8004254:	2500      	movs	r5, #0
 8004256:	4e0a      	ldr	r6, [pc, #40]	; (8004280 <__libc_init_array+0x40>)
 8004258:	4c0a      	ldr	r4, [pc, #40]	; (8004284 <__libc_init_array+0x44>)
 800425a:	1ba4      	subs	r4, r4, r6
 800425c:	10a4      	asrs	r4, r4, #2
 800425e:	42a5      	cmp	r5, r4
 8004260:	d105      	bne.n	800426e <__libc_init_array+0x2e>
 8004262:	bd70      	pop	{r4, r5, r6, pc}
 8004264:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004268:	4798      	blx	r3
 800426a:	3501      	adds	r5, #1
 800426c:	e7ee      	b.n	800424c <__libc_init_array+0xc>
 800426e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004272:	4798      	blx	r3
 8004274:	3501      	adds	r5, #1
 8004276:	e7f2      	b.n	800425e <__libc_init_array+0x1e>
 8004278:	08004c28 	.word	0x08004c28
 800427c:	08004c28 	.word	0x08004c28
 8004280:	08004c28 	.word	0x08004c28
 8004284:	08004c2c 	.word	0x08004c2c

08004288 <memcpy>:
 8004288:	b510      	push	{r4, lr}
 800428a:	1e43      	subs	r3, r0, #1
 800428c:	440a      	add	r2, r1
 800428e:	4291      	cmp	r1, r2
 8004290:	d100      	bne.n	8004294 <memcpy+0xc>
 8004292:	bd10      	pop	{r4, pc}
 8004294:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004298:	f803 4f01 	strb.w	r4, [r3, #1]!
 800429c:	e7f7      	b.n	800428e <memcpy+0x6>

0800429e <memset>:
 800429e:	4603      	mov	r3, r0
 80042a0:	4402      	add	r2, r0
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d100      	bne.n	80042a8 <memset+0xa>
 80042a6:	4770      	bx	lr
 80042a8:	f803 1b01 	strb.w	r1, [r3], #1
 80042ac:	e7f9      	b.n	80042a2 <memset+0x4>
	...

080042b0 <_puts_r>:
 80042b0:	b570      	push	{r4, r5, r6, lr}
 80042b2:	460e      	mov	r6, r1
 80042b4:	4605      	mov	r5, r0
 80042b6:	b118      	cbz	r0, 80042c0 <_puts_r+0x10>
 80042b8:	6983      	ldr	r3, [r0, #24]
 80042ba:	b90b      	cbnz	r3, 80042c0 <_puts_r+0x10>
 80042bc:	f000 fa0c 	bl	80046d8 <__sinit>
 80042c0:	69ab      	ldr	r3, [r5, #24]
 80042c2:	68ac      	ldr	r4, [r5, #8]
 80042c4:	b913      	cbnz	r3, 80042cc <_puts_r+0x1c>
 80042c6:	4628      	mov	r0, r5
 80042c8:	f000 fa06 	bl	80046d8 <__sinit>
 80042cc:	4b23      	ldr	r3, [pc, #140]	; (800435c <_puts_r+0xac>)
 80042ce:	429c      	cmp	r4, r3
 80042d0:	d117      	bne.n	8004302 <_puts_r+0x52>
 80042d2:	686c      	ldr	r4, [r5, #4]
 80042d4:	89a3      	ldrh	r3, [r4, #12]
 80042d6:	071b      	lsls	r3, r3, #28
 80042d8:	d51d      	bpl.n	8004316 <_puts_r+0x66>
 80042da:	6923      	ldr	r3, [r4, #16]
 80042dc:	b1db      	cbz	r3, 8004316 <_puts_r+0x66>
 80042de:	3e01      	subs	r6, #1
 80042e0:	68a3      	ldr	r3, [r4, #8]
 80042e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80042e6:	3b01      	subs	r3, #1
 80042e8:	60a3      	str	r3, [r4, #8]
 80042ea:	b9e9      	cbnz	r1, 8004328 <_puts_r+0x78>
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	da2e      	bge.n	800434e <_puts_r+0x9e>
 80042f0:	4622      	mov	r2, r4
 80042f2:	210a      	movs	r1, #10
 80042f4:	4628      	mov	r0, r5
 80042f6:	f000 f83f 	bl	8004378 <__swbuf_r>
 80042fa:	3001      	adds	r0, #1
 80042fc:	d011      	beq.n	8004322 <_puts_r+0x72>
 80042fe:	200a      	movs	r0, #10
 8004300:	e011      	b.n	8004326 <_puts_r+0x76>
 8004302:	4b17      	ldr	r3, [pc, #92]	; (8004360 <_puts_r+0xb0>)
 8004304:	429c      	cmp	r4, r3
 8004306:	d101      	bne.n	800430c <_puts_r+0x5c>
 8004308:	68ac      	ldr	r4, [r5, #8]
 800430a:	e7e3      	b.n	80042d4 <_puts_r+0x24>
 800430c:	4b15      	ldr	r3, [pc, #84]	; (8004364 <_puts_r+0xb4>)
 800430e:	429c      	cmp	r4, r3
 8004310:	bf08      	it	eq
 8004312:	68ec      	ldreq	r4, [r5, #12]
 8004314:	e7de      	b.n	80042d4 <_puts_r+0x24>
 8004316:	4621      	mov	r1, r4
 8004318:	4628      	mov	r0, r5
 800431a:	f000 f87f 	bl	800441c <__swsetup_r>
 800431e:	2800      	cmp	r0, #0
 8004320:	d0dd      	beq.n	80042de <_puts_r+0x2e>
 8004322:	f04f 30ff 	mov.w	r0, #4294967295
 8004326:	bd70      	pop	{r4, r5, r6, pc}
 8004328:	2b00      	cmp	r3, #0
 800432a:	da04      	bge.n	8004336 <_puts_r+0x86>
 800432c:	69a2      	ldr	r2, [r4, #24]
 800432e:	429a      	cmp	r2, r3
 8004330:	dc06      	bgt.n	8004340 <_puts_r+0x90>
 8004332:	290a      	cmp	r1, #10
 8004334:	d004      	beq.n	8004340 <_puts_r+0x90>
 8004336:	6823      	ldr	r3, [r4, #0]
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	6022      	str	r2, [r4, #0]
 800433c:	7019      	strb	r1, [r3, #0]
 800433e:	e7cf      	b.n	80042e0 <_puts_r+0x30>
 8004340:	4622      	mov	r2, r4
 8004342:	4628      	mov	r0, r5
 8004344:	f000 f818 	bl	8004378 <__swbuf_r>
 8004348:	3001      	adds	r0, #1
 800434a:	d1c9      	bne.n	80042e0 <_puts_r+0x30>
 800434c:	e7e9      	b.n	8004322 <_puts_r+0x72>
 800434e:	200a      	movs	r0, #10
 8004350:	6823      	ldr	r3, [r4, #0]
 8004352:	1c5a      	adds	r2, r3, #1
 8004354:	6022      	str	r2, [r4, #0]
 8004356:	7018      	strb	r0, [r3, #0]
 8004358:	e7e5      	b.n	8004326 <_puts_r+0x76>
 800435a:	bf00      	nop
 800435c:	08004be8 	.word	0x08004be8
 8004360:	08004c08 	.word	0x08004c08
 8004364:	08004bc8 	.word	0x08004bc8

08004368 <puts>:
 8004368:	4b02      	ldr	r3, [pc, #8]	; (8004374 <puts+0xc>)
 800436a:	4601      	mov	r1, r0
 800436c:	6818      	ldr	r0, [r3, #0]
 800436e:	f7ff bf9f 	b.w	80042b0 <_puts_r>
 8004372:	bf00      	nop
 8004374:	200003e4 	.word	0x200003e4

08004378 <__swbuf_r>:
 8004378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800437a:	460e      	mov	r6, r1
 800437c:	4614      	mov	r4, r2
 800437e:	4605      	mov	r5, r0
 8004380:	b118      	cbz	r0, 800438a <__swbuf_r+0x12>
 8004382:	6983      	ldr	r3, [r0, #24]
 8004384:	b90b      	cbnz	r3, 800438a <__swbuf_r+0x12>
 8004386:	f000 f9a7 	bl	80046d8 <__sinit>
 800438a:	4b21      	ldr	r3, [pc, #132]	; (8004410 <__swbuf_r+0x98>)
 800438c:	429c      	cmp	r4, r3
 800438e:	d12a      	bne.n	80043e6 <__swbuf_r+0x6e>
 8004390:	686c      	ldr	r4, [r5, #4]
 8004392:	69a3      	ldr	r3, [r4, #24]
 8004394:	60a3      	str	r3, [r4, #8]
 8004396:	89a3      	ldrh	r3, [r4, #12]
 8004398:	071a      	lsls	r2, r3, #28
 800439a:	d52e      	bpl.n	80043fa <__swbuf_r+0x82>
 800439c:	6923      	ldr	r3, [r4, #16]
 800439e:	b363      	cbz	r3, 80043fa <__swbuf_r+0x82>
 80043a0:	6923      	ldr	r3, [r4, #16]
 80043a2:	6820      	ldr	r0, [r4, #0]
 80043a4:	b2f6      	uxtb	r6, r6
 80043a6:	1ac0      	subs	r0, r0, r3
 80043a8:	6963      	ldr	r3, [r4, #20]
 80043aa:	4637      	mov	r7, r6
 80043ac:	4283      	cmp	r3, r0
 80043ae:	dc04      	bgt.n	80043ba <__swbuf_r+0x42>
 80043b0:	4621      	mov	r1, r4
 80043b2:	4628      	mov	r0, r5
 80043b4:	f000 f926 	bl	8004604 <_fflush_r>
 80043b8:	bb28      	cbnz	r0, 8004406 <__swbuf_r+0x8e>
 80043ba:	68a3      	ldr	r3, [r4, #8]
 80043bc:	3001      	adds	r0, #1
 80043be:	3b01      	subs	r3, #1
 80043c0:	60a3      	str	r3, [r4, #8]
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	1c5a      	adds	r2, r3, #1
 80043c6:	6022      	str	r2, [r4, #0]
 80043c8:	701e      	strb	r6, [r3, #0]
 80043ca:	6963      	ldr	r3, [r4, #20]
 80043cc:	4283      	cmp	r3, r0
 80043ce:	d004      	beq.n	80043da <__swbuf_r+0x62>
 80043d0:	89a3      	ldrh	r3, [r4, #12]
 80043d2:	07db      	lsls	r3, r3, #31
 80043d4:	d519      	bpl.n	800440a <__swbuf_r+0x92>
 80043d6:	2e0a      	cmp	r6, #10
 80043d8:	d117      	bne.n	800440a <__swbuf_r+0x92>
 80043da:	4621      	mov	r1, r4
 80043dc:	4628      	mov	r0, r5
 80043de:	f000 f911 	bl	8004604 <_fflush_r>
 80043e2:	b190      	cbz	r0, 800440a <__swbuf_r+0x92>
 80043e4:	e00f      	b.n	8004406 <__swbuf_r+0x8e>
 80043e6:	4b0b      	ldr	r3, [pc, #44]	; (8004414 <__swbuf_r+0x9c>)
 80043e8:	429c      	cmp	r4, r3
 80043ea:	d101      	bne.n	80043f0 <__swbuf_r+0x78>
 80043ec:	68ac      	ldr	r4, [r5, #8]
 80043ee:	e7d0      	b.n	8004392 <__swbuf_r+0x1a>
 80043f0:	4b09      	ldr	r3, [pc, #36]	; (8004418 <__swbuf_r+0xa0>)
 80043f2:	429c      	cmp	r4, r3
 80043f4:	bf08      	it	eq
 80043f6:	68ec      	ldreq	r4, [r5, #12]
 80043f8:	e7cb      	b.n	8004392 <__swbuf_r+0x1a>
 80043fa:	4621      	mov	r1, r4
 80043fc:	4628      	mov	r0, r5
 80043fe:	f000 f80d 	bl	800441c <__swsetup_r>
 8004402:	2800      	cmp	r0, #0
 8004404:	d0cc      	beq.n	80043a0 <__swbuf_r+0x28>
 8004406:	f04f 37ff 	mov.w	r7, #4294967295
 800440a:	4638      	mov	r0, r7
 800440c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800440e:	bf00      	nop
 8004410:	08004be8 	.word	0x08004be8
 8004414:	08004c08 	.word	0x08004c08
 8004418:	08004bc8 	.word	0x08004bc8

0800441c <__swsetup_r>:
 800441c:	4b32      	ldr	r3, [pc, #200]	; (80044e8 <__swsetup_r+0xcc>)
 800441e:	b570      	push	{r4, r5, r6, lr}
 8004420:	681d      	ldr	r5, [r3, #0]
 8004422:	4606      	mov	r6, r0
 8004424:	460c      	mov	r4, r1
 8004426:	b125      	cbz	r5, 8004432 <__swsetup_r+0x16>
 8004428:	69ab      	ldr	r3, [r5, #24]
 800442a:	b913      	cbnz	r3, 8004432 <__swsetup_r+0x16>
 800442c:	4628      	mov	r0, r5
 800442e:	f000 f953 	bl	80046d8 <__sinit>
 8004432:	4b2e      	ldr	r3, [pc, #184]	; (80044ec <__swsetup_r+0xd0>)
 8004434:	429c      	cmp	r4, r3
 8004436:	d10f      	bne.n	8004458 <__swsetup_r+0x3c>
 8004438:	686c      	ldr	r4, [r5, #4]
 800443a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800443e:	b29a      	uxth	r2, r3
 8004440:	0715      	lsls	r5, r2, #28
 8004442:	d42c      	bmi.n	800449e <__swsetup_r+0x82>
 8004444:	06d0      	lsls	r0, r2, #27
 8004446:	d411      	bmi.n	800446c <__swsetup_r+0x50>
 8004448:	2209      	movs	r2, #9
 800444a:	6032      	str	r2, [r6, #0]
 800444c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004450:	81a3      	strh	r3, [r4, #12]
 8004452:	f04f 30ff 	mov.w	r0, #4294967295
 8004456:	e03e      	b.n	80044d6 <__swsetup_r+0xba>
 8004458:	4b25      	ldr	r3, [pc, #148]	; (80044f0 <__swsetup_r+0xd4>)
 800445a:	429c      	cmp	r4, r3
 800445c:	d101      	bne.n	8004462 <__swsetup_r+0x46>
 800445e:	68ac      	ldr	r4, [r5, #8]
 8004460:	e7eb      	b.n	800443a <__swsetup_r+0x1e>
 8004462:	4b24      	ldr	r3, [pc, #144]	; (80044f4 <__swsetup_r+0xd8>)
 8004464:	429c      	cmp	r4, r3
 8004466:	bf08      	it	eq
 8004468:	68ec      	ldreq	r4, [r5, #12]
 800446a:	e7e6      	b.n	800443a <__swsetup_r+0x1e>
 800446c:	0751      	lsls	r1, r2, #29
 800446e:	d512      	bpl.n	8004496 <__swsetup_r+0x7a>
 8004470:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004472:	b141      	cbz	r1, 8004486 <__swsetup_r+0x6a>
 8004474:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004478:	4299      	cmp	r1, r3
 800447a:	d002      	beq.n	8004482 <__swsetup_r+0x66>
 800447c:	4630      	mov	r0, r6
 800447e:	f000 fa19 	bl	80048b4 <_free_r>
 8004482:	2300      	movs	r3, #0
 8004484:	6363      	str	r3, [r4, #52]	; 0x34
 8004486:	89a3      	ldrh	r3, [r4, #12]
 8004488:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800448c:	81a3      	strh	r3, [r4, #12]
 800448e:	2300      	movs	r3, #0
 8004490:	6063      	str	r3, [r4, #4]
 8004492:	6923      	ldr	r3, [r4, #16]
 8004494:	6023      	str	r3, [r4, #0]
 8004496:	89a3      	ldrh	r3, [r4, #12]
 8004498:	f043 0308 	orr.w	r3, r3, #8
 800449c:	81a3      	strh	r3, [r4, #12]
 800449e:	6923      	ldr	r3, [r4, #16]
 80044a0:	b94b      	cbnz	r3, 80044b6 <__swsetup_r+0x9a>
 80044a2:	89a3      	ldrh	r3, [r4, #12]
 80044a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80044a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044ac:	d003      	beq.n	80044b6 <__swsetup_r+0x9a>
 80044ae:	4621      	mov	r1, r4
 80044b0:	4630      	mov	r0, r6
 80044b2:	f000 f9bf 	bl	8004834 <__smakebuf_r>
 80044b6:	89a2      	ldrh	r2, [r4, #12]
 80044b8:	f012 0301 	ands.w	r3, r2, #1
 80044bc:	d00c      	beq.n	80044d8 <__swsetup_r+0xbc>
 80044be:	2300      	movs	r3, #0
 80044c0:	60a3      	str	r3, [r4, #8]
 80044c2:	6963      	ldr	r3, [r4, #20]
 80044c4:	425b      	negs	r3, r3
 80044c6:	61a3      	str	r3, [r4, #24]
 80044c8:	6923      	ldr	r3, [r4, #16]
 80044ca:	b953      	cbnz	r3, 80044e2 <__swsetup_r+0xc6>
 80044cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044d0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80044d4:	d1ba      	bne.n	800444c <__swsetup_r+0x30>
 80044d6:	bd70      	pop	{r4, r5, r6, pc}
 80044d8:	0792      	lsls	r2, r2, #30
 80044da:	bf58      	it	pl
 80044dc:	6963      	ldrpl	r3, [r4, #20]
 80044de:	60a3      	str	r3, [r4, #8]
 80044e0:	e7f2      	b.n	80044c8 <__swsetup_r+0xac>
 80044e2:	2000      	movs	r0, #0
 80044e4:	e7f7      	b.n	80044d6 <__swsetup_r+0xba>
 80044e6:	bf00      	nop
 80044e8:	200003e4 	.word	0x200003e4
 80044ec:	08004be8 	.word	0x08004be8
 80044f0:	08004c08 	.word	0x08004c08
 80044f4:	08004bc8 	.word	0x08004bc8

080044f8 <__sflush_r>:
 80044f8:	898a      	ldrh	r2, [r1, #12]
 80044fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044fe:	4605      	mov	r5, r0
 8004500:	0710      	lsls	r0, r2, #28
 8004502:	460c      	mov	r4, r1
 8004504:	d458      	bmi.n	80045b8 <__sflush_r+0xc0>
 8004506:	684b      	ldr	r3, [r1, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	dc05      	bgt.n	8004518 <__sflush_r+0x20>
 800450c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800450e:	2b00      	cmp	r3, #0
 8004510:	dc02      	bgt.n	8004518 <__sflush_r+0x20>
 8004512:	2000      	movs	r0, #0
 8004514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004518:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800451a:	2e00      	cmp	r6, #0
 800451c:	d0f9      	beq.n	8004512 <__sflush_r+0x1a>
 800451e:	2300      	movs	r3, #0
 8004520:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004524:	682f      	ldr	r7, [r5, #0]
 8004526:	6a21      	ldr	r1, [r4, #32]
 8004528:	602b      	str	r3, [r5, #0]
 800452a:	d032      	beq.n	8004592 <__sflush_r+0x9a>
 800452c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800452e:	89a3      	ldrh	r3, [r4, #12]
 8004530:	075a      	lsls	r2, r3, #29
 8004532:	d505      	bpl.n	8004540 <__sflush_r+0x48>
 8004534:	6863      	ldr	r3, [r4, #4]
 8004536:	1ac0      	subs	r0, r0, r3
 8004538:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800453a:	b10b      	cbz	r3, 8004540 <__sflush_r+0x48>
 800453c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800453e:	1ac0      	subs	r0, r0, r3
 8004540:	2300      	movs	r3, #0
 8004542:	4602      	mov	r2, r0
 8004544:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004546:	6a21      	ldr	r1, [r4, #32]
 8004548:	4628      	mov	r0, r5
 800454a:	47b0      	blx	r6
 800454c:	1c43      	adds	r3, r0, #1
 800454e:	89a3      	ldrh	r3, [r4, #12]
 8004550:	d106      	bne.n	8004560 <__sflush_r+0x68>
 8004552:	6829      	ldr	r1, [r5, #0]
 8004554:	291d      	cmp	r1, #29
 8004556:	d848      	bhi.n	80045ea <__sflush_r+0xf2>
 8004558:	4a29      	ldr	r2, [pc, #164]	; (8004600 <__sflush_r+0x108>)
 800455a:	40ca      	lsrs	r2, r1
 800455c:	07d6      	lsls	r6, r2, #31
 800455e:	d544      	bpl.n	80045ea <__sflush_r+0xf2>
 8004560:	2200      	movs	r2, #0
 8004562:	6062      	str	r2, [r4, #4]
 8004564:	6922      	ldr	r2, [r4, #16]
 8004566:	04d9      	lsls	r1, r3, #19
 8004568:	6022      	str	r2, [r4, #0]
 800456a:	d504      	bpl.n	8004576 <__sflush_r+0x7e>
 800456c:	1c42      	adds	r2, r0, #1
 800456e:	d101      	bne.n	8004574 <__sflush_r+0x7c>
 8004570:	682b      	ldr	r3, [r5, #0]
 8004572:	b903      	cbnz	r3, 8004576 <__sflush_r+0x7e>
 8004574:	6560      	str	r0, [r4, #84]	; 0x54
 8004576:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004578:	602f      	str	r7, [r5, #0]
 800457a:	2900      	cmp	r1, #0
 800457c:	d0c9      	beq.n	8004512 <__sflush_r+0x1a>
 800457e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004582:	4299      	cmp	r1, r3
 8004584:	d002      	beq.n	800458c <__sflush_r+0x94>
 8004586:	4628      	mov	r0, r5
 8004588:	f000 f994 	bl	80048b4 <_free_r>
 800458c:	2000      	movs	r0, #0
 800458e:	6360      	str	r0, [r4, #52]	; 0x34
 8004590:	e7c0      	b.n	8004514 <__sflush_r+0x1c>
 8004592:	2301      	movs	r3, #1
 8004594:	4628      	mov	r0, r5
 8004596:	47b0      	blx	r6
 8004598:	1c41      	adds	r1, r0, #1
 800459a:	d1c8      	bne.n	800452e <__sflush_r+0x36>
 800459c:	682b      	ldr	r3, [r5, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0c5      	beq.n	800452e <__sflush_r+0x36>
 80045a2:	2b1d      	cmp	r3, #29
 80045a4:	d001      	beq.n	80045aa <__sflush_r+0xb2>
 80045a6:	2b16      	cmp	r3, #22
 80045a8:	d101      	bne.n	80045ae <__sflush_r+0xb6>
 80045aa:	602f      	str	r7, [r5, #0]
 80045ac:	e7b1      	b.n	8004512 <__sflush_r+0x1a>
 80045ae:	89a3      	ldrh	r3, [r4, #12]
 80045b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045b4:	81a3      	strh	r3, [r4, #12]
 80045b6:	e7ad      	b.n	8004514 <__sflush_r+0x1c>
 80045b8:	690f      	ldr	r7, [r1, #16]
 80045ba:	2f00      	cmp	r7, #0
 80045bc:	d0a9      	beq.n	8004512 <__sflush_r+0x1a>
 80045be:	0793      	lsls	r3, r2, #30
 80045c0:	bf18      	it	ne
 80045c2:	2300      	movne	r3, #0
 80045c4:	680e      	ldr	r6, [r1, #0]
 80045c6:	bf08      	it	eq
 80045c8:	694b      	ldreq	r3, [r1, #20]
 80045ca:	eba6 0807 	sub.w	r8, r6, r7
 80045ce:	600f      	str	r7, [r1, #0]
 80045d0:	608b      	str	r3, [r1, #8]
 80045d2:	f1b8 0f00 	cmp.w	r8, #0
 80045d6:	dd9c      	ble.n	8004512 <__sflush_r+0x1a>
 80045d8:	4643      	mov	r3, r8
 80045da:	463a      	mov	r2, r7
 80045dc:	6a21      	ldr	r1, [r4, #32]
 80045de:	4628      	mov	r0, r5
 80045e0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80045e2:	47b0      	blx	r6
 80045e4:	2800      	cmp	r0, #0
 80045e6:	dc06      	bgt.n	80045f6 <__sflush_r+0xfe>
 80045e8:	89a3      	ldrh	r3, [r4, #12]
 80045ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045ee:	81a3      	strh	r3, [r4, #12]
 80045f0:	f04f 30ff 	mov.w	r0, #4294967295
 80045f4:	e78e      	b.n	8004514 <__sflush_r+0x1c>
 80045f6:	4407      	add	r7, r0
 80045f8:	eba8 0800 	sub.w	r8, r8, r0
 80045fc:	e7e9      	b.n	80045d2 <__sflush_r+0xda>
 80045fe:	bf00      	nop
 8004600:	20400001 	.word	0x20400001

08004604 <_fflush_r>:
 8004604:	b538      	push	{r3, r4, r5, lr}
 8004606:	690b      	ldr	r3, [r1, #16]
 8004608:	4605      	mov	r5, r0
 800460a:	460c      	mov	r4, r1
 800460c:	b1db      	cbz	r3, 8004646 <_fflush_r+0x42>
 800460e:	b118      	cbz	r0, 8004618 <_fflush_r+0x14>
 8004610:	6983      	ldr	r3, [r0, #24]
 8004612:	b90b      	cbnz	r3, 8004618 <_fflush_r+0x14>
 8004614:	f000 f860 	bl	80046d8 <__sinit>
 8004618:	4b0c      	ldr	r3, [pc, #48]	; (800464c <_fflush_r+0x48>)
 800461a:	429c      	cmp	r4, r3
 800461c:	d109      	bne.n	8004632 <_fflush_r+0x2e>
 800461e:	686c      	ldr	r4, [r5, #4]
 8004620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004624:	b17b      	cbz	r3, 8004646 <_fflush_r+0x42>
 8004626:	4621      	mov	r1, r4
 8004628:	4628      	mov	r0, r5
 800462a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800462e:	f7ff bf63 	b.w	80044f8 <__sflush_r>
 8004632:	4b07      	ldr	r3, [pc, #28]	; (8004650 <_fflush_r+0x4c>)
 8004634:	429c      	cmp	r4, r3
 8004636:	d101      	bne.n	800463c <_fflush_r+0x38>
 8004638:	68ac      	ldr	r4, [r5, #8]
 800463a:	e7f1      	b.n	8004620 <_fflush_r+0x1c>
 800463c:	4b05      	ldr	r3, [pc, #20]	; (8004654 <_fflush_r+0x50>)
 800463e:	429c      	cmp	r4, r3
 8004640:	bf08      	it	eq
 8004642:	68ec      	ldreq	r4, [r5, #12]
 8004644:	e7ec      	b.n	8004620 <_fflush_r+0x1c>
 8004646:	2000      	movs	r0, #0
 8004648:	bd38      	pop	{r3, r4, r5, pc}
 800464a:	bf00      	nop
 800464c:	08004be8 	.word	0x08004be8
 8004650:	08004c08 	.word	0x08004c08
 8004654:	08004bc8 	.word	0x08004bc8

08004658 <std>:
 8004658:	2300      	movs	r3, #0
 800465a:	b510      	push	{r4, lr}
 800465c:	4604      	mov	r4, r0
 800465e:	e9c0 3300 	strd	r3, r3, [r0]
 8004662:	6083      	str	r3, [r0, #8]
 8004664:	8181      	strh	r1, [r0, #12]
 8004666:	6643      	str	r3, [r0, #100]	; 0x64
 8004668:	81c2      	strh	r2, [r0, #14]
 800466a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800466e:	6183      	str	r3, [r0, #24]
 8004670:	4619      	mov	r1, r3
 8004672:	2208      	movs	r2, #8
 8004674:	305c      	adds	r0, #92	; 0x5c
 8004676:	f7ff fe12 	bl	800429e <memset>
 800467a:	4b05      	ldr	r3, [pc, #20]	; (8004690 <std+0x38>)
 800467c:	6224      	str	r4, [r4, #32]
 800467e:	6263      	str	r3, [r4, #36]	; 0x24
 8004680:	4b04      	ldr	r3, [pc, #16]	; (8004694 <std+0x3c>)
 8004682:	62a3      	str	r3, [r4, #40]	; 0x28
 8004684:	4b04      	ldr	r3, [pc, #16]	; (8004698 <std+0x40>)
 8004686:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004688:	4b04      	ldr	r3, [pc, #16]	; (800469c <std+0x44>)
 800468a:	6323      	str	r3, [r4, #48]	; 0x30
 800468c:	bd10      	pop	{r4, pc}
 800468e:	bf00      	nop
 8004690:	08004a21 	.word	0x08004a21
 8004694:	08004a43 	.word	0x08004a43
 8004698:	08004a7b 	.word	0x08004a7b
 800469c:	08004a9f 	.word	0x08004a9f

080046a0 <_cleanup_r>:
 80046a0:	4901      	ldr	r1, [pc, #4]	; (80046a8 <_cleanup_r+0x8>)
 80046a2:	f000 b885 	b.w	80047b0 <_fwalk_reent>
 80046a6:	bf00      	nop
 80046a8:	08004605 	.word	0x08004605

080046ac <__sfmoreglue>:
 80046ac:	b570      	push	{r4, r5, r6, lr}
 80046ae:	2568      	movs	r5, #104	; 0x68
 80046b0:	1e4a      	subs	r2, r1, #1
 80046b2:	4355      	muls	r5, r2
 80046b4:	460e      	mov	r6, r1
 80046b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80046ba:	f000 f947 	bl	800494c <_malloc_r>
 80046be:	4604      	mov	r4, r0
 80046c0:	b140      	cbz	r0, 80046d4 <__sfmoreglue+0x28>
 80046c2:	2100      	movs	r1, #0
 80046c4:	e9c0 1600 	strd	r1, r6, [r0]
 80046c8:	300c      	adds	r0, #12
 80046ca:	60a0      	str	r0, [r4, #8]
 80046cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80046d0:	f7ff fde5 	bl	800429e <memset>
 80046d4:	4620      	mov	r0, r4
 80046d6:	bd70      	pop	{r4, r5, r6, pc}

080046d8 <__sinit>:
 80046d8:	6983      	ldr	r3, [r0, #24]
 80046da:	b510      	push	{r4, lr}
 80046dc:	4604      	mov	r4, r0
 80046de:	bb33      	cbnz	r3, 800472e <__sinit+0x56>
 80046e0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80046e4:	6503      	str	r3, [r0, #80]	; 0x50
 80046e6:	4b12      	ldr	r3, [pc, #72]	; (8004730 <__sinit+0x58>)
 80046e8:	4a12      	ldr	r2, [pc, #72]	; (8004734 <__sinit+0x5c>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6282      	str	r2, [r0, #40]	; 0x28
 80046ee:	4298      	cmp	r0, r3
 80046f0:	bf04      	itt	eq
 80046f2:	2301      	moveq	r3, #1
 80046f4:	6183      	streq	r3, [r0, #24]
 80046f6:	f000 f81f 	bl	8004738 <__sfp>
 80046fa:	6060      	str	r0, [r4, #4]
 80046fc:	4620      	mov	r0, r4
 80046fe:	f000 f81b 	bl	8004738 <__sfp>
 8004702:	60a0      	str	r0, [r4, #8]
 8004704:	4620      	mov	r0, r4
 8004706:	f000 f817 	bl	8004738 <__sfp>
 800470a:	2200      	movs	r2, #0
 800470c:	60e0      	str	r0, [r4, #12]
 800470e:	2104      	movs	r1, #4
 8004710:	6860      	ldr	r0, [r4, #4]
 8004712:	f7ff ffa1 	bl	8004658 <std>
 8004716:	2201      	movs	r2, #1
 8004718:	2109      	movs	r1, #9
 800471a:	68a0      	ldr	r0, [r4, #8]
 800471c:	f7ff ff9c 	bl	8004658 <std>
 8004720:	2202      	movs	r2, #2
 8004722:	2112      	movs	r1, #18
 8004724:	68e0      	ldr	r0, [r4, #12]
 8004726:	f7ff ff97 	bl	8004658 <std>
 800472a:	2301      	movs	r3, #1
 800472c:	61a3      	str	r3, [r4, #24]
 800472e:	bd10      	pop	{r4, pc}
 8004730:	08004bc4 	.word	0x08004bc4
 8004734:	080046a1 	.word	0x080046a1

08004738 <__sfp>:
 8004738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473a:	4b1b      	ldr	r3, [pc, #108]	; (80047a8 <__sfp+0x70>)
 800473c:	4607      	mov	r7, r0
 800473e:	681e      	ldr	r6, [r3, #0]
 8004740:	69b3      	ldr	r3, [r6, #24]
 8004742:	b913      	cbnz	r3, 800474a <__sfp+0x12>
 8004744:	4630      	mov	r0, r6
 8004746:	f7ff ffc7 	bl	80046d8 <__sinit>
 800474a:	3648      	adds	r6, #72	; 0x48
 800474c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004750:	3b01      	subs	r3, #1
 8004752:	d503      	bpl.n	800475c <__sfp+0x24>
 8004754:	6833      	ldr	r3, [r6, #0]
 8004756:	b133      	cbz	r3, 8004766 <__sfp+0x2e>
 8004758:	6836      	ldr	r6, [r6, #0]
 800475a:	e7f7      	b.n	800474c <__sfp+0x14>
 800475c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004760:	b16d      	cbz	r5, 800477e <__sfp+0x46>
 8004762:	3468      	adds	r4, #104	; 0x68
 8004764:	e7f4      	b.n	8004750 <__sfp+0x18>
 8004766:	2104      	movs	r1, #4
 8004768:	4638      	mov	r0, r7
 800476a:	f7ff ff9f 	bl	80046ac <__sfmoreglue>
 800476e:	6030      	str	r0, [r6, #0]
 8004770:	2800      	cmp	r0, #0
 8004772:	d1f1      	bne.n	8004758 <__sfp+0x20>
 8004774:	230c      	movs	r3, #12
 8004776:	4604      	mov	r4, r0
 8004778:	603b      	str	r3, [r7, #0]
 800477a:	4620      	mov	r0, r4
 800477c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800477e:	4b0b      	ldr	r3, [pc, #44]	; (80047ac <__sfp+0x74>)
 8004780:	6665      	str	r5, [r4, #100]	; 0x64
 8004782:	e9c4 5500 	strd	r5, r5, [r4]
 8004786:	60a5      	str	r5, [r4, #8]
 8004788:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800478c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004790:	2208      	movs	r2, #8
 8004792:	4629      	mov	r1, r5
 8004794:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004798:	f7ff fd81 	bl	800429e <memset>
 800479c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80047a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80047a4:	e7e9      	b.n	800477a <__sfp+0x42>
 80047a6:	bf00      	nop
 80047a8:	08004bc4 	.word	0x08004bc4
 80047ac:	ffff0001 	.word	0xffff0001

080047b0 <_fwalk_reent>:
 80047b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047b4:	4680      	mov	r8, r0
 80047b6:	4689      	mov	r9, r1
 80047b8:	2600      	movs	r6, #0
 80047ba:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80047be:	b914      	cbnz	r4, 80047c6 <_fwalk_reent+0x16>
 80047c0:	4630      	mov	r0, r6
 80047c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047c6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80047ca:	3f01      	subs	r7, #1
 80047cc:	d501      	bpl.n	80047d2 <_fwalk_reent+0x22>
 80047ce:	6824      	ldr	r4, [r4, #0]
 80047d0:	e7f5      	b.n	80047be <_fwalk_reent+0xe>
 80047d2:	89ab      	ldrh	r3, [r5, #12]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d907      	bls.n	80047e8 <_fwalk_reent+0x38>
 80047d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047dc:	3301      	adds	r3, #1
 80047de:	d003      	beq.n	80047e8 <_fwalk_reent+0x38>
 80047e0:	4629      	mov	r1, r5
 80047e2:	4640      	mov	r0, r8
 80047e4:	47c8      	blx	r9
 80047e6:	4306      	orrs	r6, r0
 80047e8:	3568      	adds	r5, #104	; 0x68
 80047ea:	e7ee      	b.n	80047ca <_fwalk_reent+0x1a>

080047ec <__swhatbuf_r>:
 80047ec:	b570      	push	{r4, r5, r6, lr}
 80047ee:	460e      	mov	r6, r1
 80047f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047f4:	b096      	sub	sp, #88	; 0x58
 80047f6:	2900      	cmp	r1, #0
 80047f8:	4614      	mov	r4, r2
 80047fa:	461d      	mov	r5, r3
 80047fc:	da07      	bge.n	800480e <__swhatbuf_r+0x22>
 80047fe:	2300      	movs	r3, #0
 8004800:	602b      	str	r3, [r5, #0]
 8004802:	89b3      	ldrh	r3, [r6, #12]
 8004804:	061a      	lsls	r2, r3, #24
 8004806:	d410      	bmi.n	800482a <__swhatbuf_r+0x3e>
 8004808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800480c:	e00e      	b.n	800482c <__swhatbuf_r+0x40>
 800480e:	466a      	mov	r2, sp
 8004810:	f000 f96c 	bl	8004aec <_fstat_r>
 8004814:	2800      	cmp	r0, #0
 8004816:	dbf2      	blt.n	80047fe <__swhatbuf_r+0x12>
 8004818:	9a01      	ldr	r2, [sp, #4]
 800481a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800481e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004822:	425a      	negs	r2, r3
 8004824:	415a      	adcs	r2, r3
 8004826:	602a      	str	r2, [r5, #0]
 8004828:	e7ee      	b.n	8004808 <__swhatbuf_r+0x1c>
 800482a:	2340      	movs	r3, #64	; 0x40
 800482c:	2000      	movs	r0, #0
 800482e:	6023      	str	r3, [r4, #0]
 8004830:	b016      	add	sp, #88	; 0x58
 8004832:	bd70      	pop	{r4, r5, r6, pc}

08004834 <__smakebuf_r>:
 8004834:	898b      	ldrh	r3, [r1, #12]
 8004836:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004838:	079d      	lsls	r5, r3, #30
 800483a:	4606      	mov	r6, r0
 800483c:	460c      	mov	r4, r1
 800483e:	d507      	bpl.n	8004850 <__smakebuf_r+0x1c>
 8004840:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004844:	6023      	str	r3, [r4, #0]
 8004846:	6123      	str	r3, [r4, #16]
 8004848:	2301      	movs	r3, #1
 800484a:	6163      	str	r3, [r4, #20]
 800484c:	b002      	add	sp, #8
 800484e:	bd70      	pop	{r4, r5, r6, pc}
 8004850:	ab01      	add	r3, sp, #4
 8004852:	466a      	mov	r2, sp
 8004854:	f7ff ffca 	bl	80047ec <__swhatbuf_r>
 8004858:	9900      	ldr	r1, [sp, #0]
 800485a:	4605      	mov	r5, r0
 800485c:	4630      	mov	r0, r6
 800485e:	f000 f875 	bl	800494c <_malloc_r>
 8004862:	b948      	cbnz	r0, 8004878 <__smakebuf_r+0x44>
 8004864:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004868:	059a      	lsls	r2, r3, #22
 800486a:	d4ef      	bmi.n	800484c <__smakebuf_r+0x18>
 800486c:	f023 0303 	bic.w	r3, r3, #3
 8004870:	f043 0302 	orr.w	r3, r3, #2
 8004874:	81a3      	strh	r3, [r4, #12]
 8004876:	e7e3      	b.n	8004840 <__smakebuf_r+0xc>
 8004878:	4b0d      	ldr	r3, [pc, #52]	; (80048b0 <__smakebuf_r+0x7c>)
 800487a:	62b3      	str	r3, [r6, #40]	; 0x28
 800487c:	89a3      	ldrh	r3, [r4, #12]
 800487e:	6020      	str	r0, [r4, #0]
 8004880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004884:	81a3      	strh	r3, [r4, #12]
 8004886:	9b00      	ldr	r3, [sp, #0]
 8004888:	6120      	str	r0, [r4, #16]
 800488a:	6163      	str	r3, [r4, #20]
 800488c:	9b01      	ldr	r3, [sp, #4]
 800488e:	b15b      	cbz	r3, 80048a8 <__smakebuf_r+0x74>
 8004890:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004894:	4630      	mov	r0, r6
 8004896:	f000 f93b 	bl	8004b10 <_isatty_r>
 800489a:	b128      	cbz	r0, 80048a8 <__smakebuf_r+0x74>
 800489c:	89a3      	ldrh	r3, [r4, #12]
 800489e:	f023 0303 	bic.w	r3, r3, #3
 80048a2:	f043 0301 	orr.w	r3, r3, #1
 80048a6:	81a3      	strh	r3, [r4, #12]
 80048a8:	89a3      	ldrh	r3, [r4, #12]
 80048aa:	431d      	orrs	r5, r3
 80048ac:	81a5      	strh	r5, [r4, #12]
 80048ae:	e7cd      	b.n	800484c <__smakebuf_r+0x18>
 80048b0:	080046a1 	.word	0x080046a1

080048b4 <_free_r>:
 80048b4:	b538      	push	{r3, r4, r5, lr}
 80048b6:	4605      	mov	r5, r0
 80048b8:	2900      	cmp	r1, #0
 80048ba:	d043      	beq.n	8004944 <_free_r+0x90>
 80048bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048c0:	1f0c      	subs	r4, r1, #4
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	bfb8      	it	lt
 80048c6:	18e4      	addlt	r4, r4, r3
 80048c8:	f000 f944 	bl	8004b54 <__malloc_lock>
 80048cc:	4a1e      	ldr	r2, [pc, #120]	; (8004948 <_free_r+0x94>)
 80048ce:	6813      	ldr	r3, [r2, #0]
 80048d0:	4610      	mov	r0, r2
 80048d2:	b933      	cbnz	r3, 80048e2 <_free_r+0x2e>
 80048d4:	6063      	str	r3, [r4, #4]
 80048d6:	6014      	str	r4, [r2, #0]
 80048d8:	4628      	mov	r0, r5
 80048da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048de:	f000 b93a 	b.w	8004b56 <__malloc_unlock>
 80048e2:	42a3      	cmp	r3, r4
 80048e4:	d90b      	bls.n	80048fe <_free_r+0x4a>
 80048e6:	6821      	ldr	r1, [r4, #0]
 80048e8:	1862      	adds	r2, r4, r1
 80048ea:	4293      	cmp	r3, r2
 80048ec:	bf01      	itttt	eq
 80048ee:	681a      	ldreq	r2, [r3, #0]
 80048f0:	685b      	ldreq	r3, [r3, #4]
 80048f2:	1852      	addeq	r2, r2, r1
 80048f4:	6022      	streq	r2, [r4, #0]
 80048f6:	6063      	str	r3, [r4, #4]
 80048f8:	6004      	str	r4, [r0, #0]
 80048fa:	e7ed      	b.n	80048d8 <_free_r+0x24>
 80048fc:	4613      	mov	r3, r2
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	b10a      	cbz	r2, 8004906 <_free_r+0x52>
 8004902:	42a2      	cmp	r2, r4
 8004904:	d9fa      	bls.n	80048fc <_free_r+0x48>
 8004906:	6819      	ldr	r1, [r3, #0]
 8004908:	1858      	adds	r0, r3, r1
 800490a:	42a0      	cmp	r0, r4
 800490c:	d10b      	bne.n	8004926 <_free_r+0x72>
 800490e:	6820      	ldr	r0, [r4, #0]
 8004910:	4401      	add	r1, r0
 8004912:	1858      	adds	r0, r3, r1
 8004914:	4282      	cmp	r2, r0
 8004916:	6019      	str	r1, [r3, #0]
 8004918:	d1de      	bne.n	80048d8 <_free_r+0x24>
 800491a:	6810      	ldr	r0, [r2, #0]
 800491c:	6852      	ldr	r2, [r2, #4]
 800491e:	4401      	add	r1, r0
 8004920:	6019      	str	r1, [r3, #0]
 8004922:	605a      	str	r2, [r3, #4]
 8004924:	e7d8      	b.n	80048d8 <_free_r+0x24>
 8004926:	d902      	bls.n	800492e <_free_r+0x7a>
 8004928:	230c      	movs	r3, #12
 800492a:	602b      	str	r3, [r5, #0]
 800492c:	e7d4      	b.n	80048d8 <_free_r+0x24>
 800492e:	6820      	ldr	r0, [r4, #0]
 8004930:	1821      	adds	r1, r4, r0
 8004932:	428a      	cmp	r2, r1
 8004934:	bf01      	itttt	eq
 8004936:	6811      	ldreq	r1, [r2, #0]
 8004938:	6852      	ldreq	r2, [r2, #4]
 800493a:	1809      	addeq	r1, r1, r0
 800493c:	6021      	streq	r1, [r4, #0]
 800493e:	6062      	str	r2, [r4, #4]
 8004940:	605c      	str	r4, [r3, #4]
 8004942:	e7c9      	b.n	80048d8 <_free_r+0x24>
 8004944:	bd38      	pop	{r3, r4, r5, pc}
 8004946:	bf00      	nop
 8004948:	200004b4 	.word	0x200004b4

0800494c <_malloc_r>:
 800494c:	b570      	push	{r4, r5, r6, lr}
 800494e:	1ccd      	adds	r5, r1, #3
 8004950:	f025 0503 	bic.w	r5, r5, #3
 8004954:	3508      	adds	r5, #8
 8004956:	2d0c      	cmp	r5, #12
 8004958:	bf38      	it	cc
 800495a:	250c      	movcc	r5, #12
 800495c:	2d00      	cmp	r5, #0
 800495e:	4606      	mov	r6, r0
 8004960:	db01      	blt.n	8004966 <_malloc_r+0x1a>
 8004962:	42a9      	cmp	r1, r5
 8004964:	d903      	bls.n	800496e <_malloc_r+0x22>
 8004966:	230c      	movs	r3, #12
 8004968:	6033      	str	r3, [r6, #0]
 800496a:	2000      	movs	r0, #0
 800496c:	bd70      	pop	{r4, r5, r6, pc}
 800496e:	f000 f8f1 	bl	8004b54 <__malloc_lock>
 8004972:	4a21      	ldr	r2, [pc, #132]	; (80049f8 <_malloc_r+0xac>)
 8004974:	6814      	ldr	r4, [r2, #0]
 8004976:	4621      	mov	r1, r4
 8004978:	b991      	cbnz	r1, 80049a0 <_malloc_r+0x54>
 800497a:	4c20      	ldr	r4, [pc, #128]	; (80049fc <_malloc_r+0xb0>)
 800497c:	6823      	ldr	r3, [r4, #0]
 800497e:	b91b      	cbnz	r3, 8004988 <_malloc_r+0x3c>
 8004980:	4630      	mov	r0, r6
 8004982:	f000 f83d 	bl	8004a00 <_sbrk_r>
 8004986:	6020      	str	r0, [r4, #0]
 8004988:	4629      	mov	r1, r5
 800498a:	4630      	mov	r0, r6
 800498c:	f000 f838 	bl	8004a00 <_sbrk_r>
 8004990:	1c43      	adds	r3, r0, #1
 8004992:	d124      	bne.n	80049de <_malloc_r+0x92>
 8004994:	230c      	movs	r3, #12
 8004996:	4630      	mov	r0, r6
 8004998:	6033      	str	r3, [r6, #0]
 800499a:	f000 f8dc 	bl	8004b56 <__malloc_unlock>
 800499e:	e7e4      	b.n	800496a <_malloc_r+0x1e>
 80049a0:	680b      	ldr	r3, [r1, #0]
 80049a2:	1b5b      	subs	r3, r3, r5
 80049a4:	d418      	bmi.n	80049d8 <_malloc_r+0x8c>
 80049a6:	2b0b      	cmp	r3, #11
 80049a8:	d90f      	bls.n	80049ca <_malloc_r+0x7e>
 80049aa:	600b      	str	r3, [r1, #0]
 80049ac:	18cc      	adds	r4, r1, r3
 80049ae:	50cd      	str	r5, [r1, r3]
 80049b0:	4630      	mov	r0, r6
 80049b2:	f000 f8d0 	bl	8004b56 <__malloc_unlock>
 80049b6:	f104 000b 	add.w	r0, r4, #11
 80049ba:	1d23      	adds	r3, r4, #4
 80049bc:	f020 0007 	bic.w	r0, r0, #7
 80049c0:	1ac3      	subs	r3, r0, r3
 80049c2:	d0d3      	beq.n	800496c <_malloc_r+0x20>
 80049c4:	425a      	negs	r2, r3
 80049c6:	50e2      	str	r2, [r4, r3]
 80049c8:	e7d0      	b.n	800496c <_malloc_r+0x20>
 80049ca:	684b      	ldr	r3, [r1, #4]
 80049cc:	428c      	cmp	r4, r1
 80049ce:	bf16      	itet	ne
 80049d0:	6063      	strne	r3, [r4, #4]
 80049d2:	6013      	streq	r3, [r2, #0]
 80049d4:	460c      	movne	r4, r1
 80049d6:	e7eb      	b.n	80049b0 <_malloc_r+0x64>
 80049d8:	460c      	mov	r4, r1
 80049da:	6849      	ldr	r1, [r1, #4]
 80049dc:	e7cc      	b.n	8004978 <_malloc_r+0x2c>
 80049de:	1cc4      	adds	r4, r0, #3
 80049e0:	f024 0403 	bic.w	r4, r4, #3
 80049e4:	42a0      	cmp	r0, r4
 80049e6:	d005      	beq.n	80049f4 <_malloc_r+0xa8>
 80049e8:	1a21      	subs	r1, r4, r0
 80049ea:	4630      	mov	r0, r6
 80049ec:	f000 f808 	bl	8004a00 <_sbrk_r>
 80049f0:	3001      	adds	r0, #1
 80049f2:	d0cf      	beq.n	8004994 <_malloc_r+0x48>
 80049f4:	6025      	str	r5, [r4, #0]
 80049f6:	e7db      	b.n	80049b0 <_malloc_r+0x64>
 80049f8:	200004b4 	.word	0x200004b4
 80049fc:	200004b8 	.word	0x200004b8

08004a00 <_sbrk_r>:
 8004a00:	b538      	push	{r3, r4, r5, lr}
 8004a02:	2300      	movs	r3, #0
 8004a04:	4c05      	ldr	r4, [pc, #20]	; (8004a1c <_sbrk_r+0x1c>)
 8004a06:	4605      	mov	r5, r0
 8004a08:	4608      	mov	r0, r1
 8004a0a:	6023      	str	r3, [r4, #0]
 8004a0c:	f7fc faca 	bl	8000fa4 <_sbrk>
 8004a10:	1c43      	adds	r3, r0, #1
 8004a12:	d102      	bne.n	8004a1a <_sbrk_r+0x1a>
 8004a14:	6823      	ldr	r3, [r4, #0]
 8004a16:	b103      	cbz	r3, 8004a1a <_sbrk_r+0x1a>
 8004a18:	602b      	str	r3, [r5, #0]
 8004a1a:	bd38      	pop	{r3, r4, r5, pc}
 8004a1c:	2000062c 	.word	0x2000062c

08004a20 <__sread>:
 8004a20:	b510      	push	{r4, lr}
 8004a22:	460c      	mov	r4, r1
 8004a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a28:	f000 f896 	bl	8004b58 <_read_r>
 8004a2c:	2800      	cmp	r0, #0
 8004a2e:	bfab      	itete	ge
 8004a30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a32:	89a3      	ldrhlt	r3, [r4, #12]
 8004a34:	181b      	addge	r3, r3, r0
 8004a36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a3a:	bfac      	ite	ge
 8004a3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a3e:	81a3      	strhlt	r3, [r4, #12]
 8004a40:	bd10      	pop	{r4, pc}

08004a42 <__swrite>:
 8004a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a46:	461f      	mov	r7, r3
 8004a48:	898b      	ldrh	r3, [r1, #12]
 8004a4a:	4605      	mov	r5, r0
 8004a4c:	05db      	lsls	r3, r3, #23
 8004a4e:	460c      	mov	r4, r1
 8004a50:	4616      	mov	r6, r2
 8004a52:	d505      	bpl.n	8004a60 <__swrite+0x1e>
 8004a54:	2302      	movs	r3, #2
 8004a56:	2200      	movs	r2, #0
 8004a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a5c:	f000 f868 	bl	8004b30 <_lseek_r>
 8004a60:	89a3      	ldrh	r3, [r4, #12]
 8004a62:	4632      	mov	r2, r6
 8004a64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a68:	81a3      	strh	r3, [r4, #12]
 8004a6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a6e:	463b      	mov	r3, r7
 8004a70:	4628      	mov	r0, r5
 8004a72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a76:	f000 b817 	b.w	8004aa8 <_write_r>

08004a7a <__sseek>:
 8004a7a:	b510      	push	{r4, lr}
 8004a7c:	460c      	mov	r4, r1
 8004a7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a82:	f000 f855 	bl	8004b30 <_lseek_r>
 8004a86:	1c43      	adds	r3, r0, #1
 8004a88:	89a3      	ldrh	r3, [r4, #12]
 8004a8a:	bf15      	itete	ne
 8004a8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004a92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004a96:	81a3      	strheq	r3, [r4, #12]
 8004a98:	bf18      	it	ne
 8004a9a:	81a3      	strhne	r3, [r4, #12]
 8004a9c:	bd10      	pop	{r4, pc}

08004a9e <__sclose>:
 8004a9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aa2:	f000 b813 	b.w	8004acc <_close_r>
	...

08004aa8 <_write_r>:
 8004aa8:	b538      	push	{r3, r4, r5, lr}
 8004aaa:	4605      	mov	r5, r0
 8004aac:	4608      	mov	r0, r1
 8004aae:	4611      	mov	r1, r2
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	4c05      	ldr	r4, [pc, #20]	; (8004ac8 <_write_r+0x20>)
 8004ab4:	6022      	str	r2, [r4, #0]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	f7fc fa27 	bl	8000f0a <_write>
 8004abc:	1c43      	adds	r3, r0, #1
 8004abe:	d102      	bne.n	8004ac6 <_write_r+0x1e>
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	b103      	cbz	r3, 8004ac6 <_write_r+0x1e>
 8004ac4:	602b      	str	r3, [r5, #0]
 8004ac6:	bd38      	pop	{r3, r4, r5, pc}
 8004ac8:	2000062c 	.word	0x2000062c

08004acc <_close_r>:
 8004acc:	b538      	push	{r3, r4, r5, lr}
 8004ace:	2300      	movs	r3, #0
 8004ad0:	4c05      	ldr	r4, [pc, #20]	; (8004ae8 <_close_r+0x1c>)
 8004ad2:	4605      	mov	r5, r0
 8004ad4:	4608      	mov	r0, r1
 8004ad6:	6023      	str	r3, [r4, #0]
 8004ad8:	f7fc fa33 	bl	8000f42 <_close>
 8004adc:	1c43      	adds	r3, r0, #1
 8004ade:	d102      	bne.n	8004ae6 <_close_r+0x1a>
 8004ae0:	6823      	ldr	r3, [r4, #0]
 8004ae2:	b103      	cbz	r3, 8004ae6 <_close_r+0x1a>
 8004ae4:	602b      	str	r3, [r5, #0]
 8004ae6:	bd38      	pop	{r3, r4, r5, pc}
 8004ae8:	2000062c 	.word	0x2000062c

08004aec <_fstat_r>:
 8004aec:	b538      	push	{r3, r4, r5, lr}
 8004aee:	2300      	movs	r3, #0
 8004af0:	4c06      	ldr	r4, [pc, #24]	; (8004b0c <_fstat_r+0x20>)
 8004af2:	4605      	mov	r5, r0
 8004af4:	4608      	mov	r0, r1
 8004af6:	4611      	mov	r1, r2
 8004af8:	6023      	str	r3, [r4, #0]
 8004afa:	f7fc fa2d 	bl	8000f58 <_fstat>
 8004afe:	1c43      	adds	r3, r0, #1
 8004b00:	d102      	bne.n	8004b08 <_fstat_r+0x1c>
 8004b02:	6823      	ldr	r3, [r4, #0]
 8004b04:	b103      	cbz	r3, 8004b08 <_fstat_r+0x1c>
 8004b06:	602b      	str	r3, [r5, #0]
 8004b08:	bd38      	pop	{r3, r4, r5, pc}
 8004b0a:	bf00      	nop
 8004b0c:	2000062c 	.word	0x2000062c

08004b10 <_isatty_r>:
 8004b10:	b538      	push	{r3, r4, r5, lr}
 8004b12:	2300      	movs	r3, #0
 8004b14:	4c05      	ldr	r4, [pc, #20]	; (8004b2c <_isatty_r+0x1c>)
 8004b16:	4605      	mov	r5, r0
 8004b18:	4608      	mov	r0, r1
 8004b1a:	6023      	str	r3, [r4, #0]
 8004b1c:	f7fc fa2b 	bl	8000f76 <_isatty>
 8004b20:	1c43      	adds	r3, r0, #1
 8004b22:	d102      	bne.n	8004b2a <_isatty_r+0x1a>
 8004b24:	6823      	ldr	r3, [r4, #0]
 8004b26:	b103      	cbz	r3, 8004b2a <_isatty_r+0x1a>
 8004b28:	602b      	str	r3, [r5, #0]
 8004b2a:	bd38      	pop	{r3, r4, r5, pc}
 8004b2c:	2000062c 	.word	0x2000062c

08004b30 <_lseek_r>:
 8004b30:	b538      	push	{r3, r4, r5, lr}
 8004b32:	4605      	mov	r5, r0
 8004b34:	4608      	mov	r0, r1
 8004b36:	4611      	mov	r1, r2
 8004b38:	2200      	movs	r2, #0
 8004b3a:	4c05      	ldr	r4, [pc, #20]	; (8004b50 <_lseek_r+0x20>)
 8004b3c:	6022      	str	r2, [r4, #0]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	f7fc fa23 	bl	8000f8a <_lseek>
 8004b44:	1c43      	adds	r3, r0, #1
 8004b46:	d102      	bne.n	8004b4e <_lseek_r+0x1e>
 8004b48:	6823      	ldr	r3, [r4, #0]
 8004b4a:	b103      	cbz	r3, 8004b4e <_lseek_r+0x1e>
 8004b4c:	602b      	str	r3, [r5, #0]
 8004b4e:	bd38      	pop	{r3, r4, r5, pc}
 8004b50:	2000062c 	.word	0x2000062c

08004b54 <__malloc_lock>:
 8004b54:	4770      	bx	lr

08004b56 <__malloc_unlock>:
 8004b56:	4770      	bx	lr

08004b58 <_read_r>:
 8004b58:	b538      	push	{r3, r4, r5, lr}
 8004b5a:	4605      	mov	r5, r0
 8004b5c:	4608      	mov	r0, r1
 8004b5e:	4611      	mov	r1, r2
 8004b60:	2200      	movs	r2, #0
 8004b62:	4c05      	ldr	r4, [pc, #20]	; (8004b78 <_read_r+0x20>)
 8004b64:	6022      	str	r2, [r4, #0]
 8004b66:	461a      	mov	r2, r3
 8004b68:	f7fc f9b2 	bl	8000ed0 <_read>
 8004b6c:	1c43      	adds	r3, r0, #1
 8004b6e:	d102      	bne.n	8004b76 <_read_r+0x1e>
 8004b70:	6823      	ldr	r3, [r4, #0]
 8004b72:	b103      	cbz	r3, 8004b76 <_read_r+0x1e>
 8004b74:	602b      	str	r3, [r5, #0]
 8004b76:	bd38      	pop	{r3, r4, r5, pc}
 8004b78:	2000062c 	.word	0x2000062c

08004b7c <_init>:
 8004b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b7e:	bf00      	nop
 8004b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b82:	bc08      	pop	{r3}
 8004b84:	469e      	mov	lr, r3
 8004b86:	4770      	bx	lr

08004b88 <_fini>:
 8004b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b8a:	bf00      	nop
 8004b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b8e:	bc08      	pop	{r3}
 8004b90:	469e      	mov	lr, r3
 8004b92:	4770      	bx	lr
