
Access_control_door.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c50  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08005d5c  08005d5c  00015d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e04  08005e04  00020448  2**0
                  CONTENTS
  4 .ARM          00000000  08005e04  08005e04  00020448  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e04  08005e04  00020448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e04  08005e04  00015e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e08  08005e08  00015e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000448  20000000  08005e0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  20000448  08006254  00020448  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006e0  08006254  000206e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020448  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014588  00000000  00000000  00020471  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033f2  00000000  00000000  000349f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001390  00000000  00000000  00037df0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011f0  00000000  00000000  00039180  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ad81  00000000  00000000  0003a370  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012ec4  00000000  00000000  000550f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009048c  00000000  00000000  00067fb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f8441  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005528  00000000  00000000  000f84bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000448 	.word	0x20000448
 8000128:	00000000 	.word	0x00000000
 800012c:	08005d44 	.word	0x08005d44

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000044c 	.word	0x2000044c
 8000148:	08005d44 	.word	0x08005d44

0800014c <myDelayUS>:
#include "../Re_commDrv.h"

#if mcu_stm32f1_hal

void myDelayUS(uint64_t t)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t startval,tickn,delays,wait;
 
  startval = SysTick->VAL;
 8000156:	4b1d      	ldr	r3, [pc, #116]	; (80001cc <myDelayUS+0x80>)
 8000158:	689b      	ldr	r3, [r3, #8]
 800015a:	617b      	str	r3, [r7, #20]
  tickn = HAL_GetTick();
 800015c:	f001 fcd2 	bl	8001b04 <HAL_GetTick>
 8000160:	6138      	str	r0, [r7, #16]
  delays =t * 72; 
 8000162:	683a      	ldr	r2, [r7, #0]
 8000164:	4613      	mov	r3, r2
 8000166:	00db      	lsls	r3, r3, #3
 8000168:	4413      	add	r3, r2
 800016a:	00db      	lsls	r3, r3, #3
 800016c:	60fb      	str	r3, [r7, #12]
  if(delays > startval)
 800016e:	68fa      	ldr	r2, [r7, #12]
 8000170:	697b      	ldr	r3, [r7, #20]
 8000172:	429a      	cmp	r2, r3
 8000174:	d915      	bls.n	80001a2 <myDelayUS+0x56>
    {
      while(HAL_GetTick() == tickn)
 8000176:	bf00      	nop
 8000178:	f001 fcc4 	bl	8001b04 <HAL_GetTick>
 800017c:	4602      	mov	r2, r0
 800017e:	693b      	ldr	r3, [r7, #16]
 8000180:	4293      	cmp	r3, r2
 8000182:	d0f9      	beq.n	8000178 <myDelayUS+0x2c>
        {
 
        }
      wait = 72000 + startval - delays;
 8000184:	697a      	ldr	r2, [r7, #20]
 8000186:	68fb      	ldr	r3, [r7, #12]
 8000188:	1ad3      	subs	r3, r2, r3
 800018a:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800018e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000192:	60bb      	str	r3, [r7, #8]
      while(wait < SysTick->VAL)
 8000194:	bf00      	nop
 8000196:	4b0d      	ldr	r3, [pc, #52]	; (80001cc <myDelayUS+0x80>)
 8000198:	689b      	ldr	r3, [r3, #8]
 800019a:	68ba      	ldr	r2, [r7, #8]
 800019c:	429a      	cmp	r2, r3
 800019e:	d3fa      	bcc.n	8000196 <myDelayUS+0x4a>
      while(wait < SysTick->VAL && HAL_GetTick() == tickn)
        {
 
        }
    }
}
 80001a0:	e00f      	b.n	80001c2 <myDelayUS+0x76>
      wait = startval - delays;
 80001a2:	697a      	ldr	r2, [r7, #20]
 80001a4:	68fb      	ldr	r3, [r7, #12]
 80001a6:	1ad3      	subs	r3, r2, r3
 80001a8:	60bb      	str	r3, [r7, #8]
      while(wait < SysTick->VAL && HAL_GetTick() == tickn)
 80001aa:	bf00      	nop
 80001ac:	4b07      	ldr	r3, [pc, #28]	; (80001cc <myDelayUS+0x80>)
 80001ae:	689b      	ldr	r3, [r3, #8]
 80001b0:	68ba      	ldr	r2, [r7, #8]
 80001b2:	429a      	cmp	r2, r3
 80001b4:	d205      	bcs.n	80001c2 <myDelayUS+0x76>
 80001b6:	f001 fca5 	bl	8001b04 <HAL_GetTick>
 80001ba:	4602      	mov	r2, r0
 80001bc:	693b      	ldr	r3, [r7, #16]
 80001be:	4293      	cmp	r3, r2
 80001c0:	d0f4      	beq.n	80001ac <myDelayUS+0x60>
}
 80001c2:	bf00      	nop
 80001c4:	3718      	adds	r7, #24
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	e000e010 	.word	0xe000e010

080001d0 <myDelayMS>:

void myDelayMS(uint64_t t)
{
 80001d0:	b590      	push	{r4, r7, lr}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	e9c7 0100 	strd	r0, r1, [r7]
	uint32_t i;
	for(i=0;i<t;i++) myDelayUS(1000);
 80001da:	2300      	movs	r3, #0
 80001dc:	60fb      	str	r3, [r7, #12]
 80001de:	e008      	b.n	80001f2 <myDelayMS+0x22>
 80001e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001e4:	f04f 0100 	mov.w	r1, #0
 80001e8:	f7ff ffb0 	bl	800014c <myDelayUS>
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	3301      	adds	r3, #1
 80001f0:	60fb      	str	r3, [r7, #12]
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	4619      	mov	r1, r3
 80001f6:	f04f 0200 	mov.w	r2, #0
 80001fa:	e9d7 3400 	ldrd	r3, r4, [r7]
 80001fe:	42a2      	cmp	r2, r4
 8000200:	bf08      	it	eq
 8000202:	4299      	cmpeq	r1, r3
 8000204:	d3ec      	bcc.n	80001e0 <myDelayMS+0x10>
}
 8000206:	bf00      	nop
 8000208:	3714      	adds	r7, #20
 800020a:	46bd      	mov	sp, r7
 800020c:	bd90      	pop	{r4, r7, pc}
	...

08000210 <keypad_init>:
void (*keypadCallback)(unsigned char x, unsigned char y);
void keypad_init(
    Pin_input_mode mode,
    short cnt_trig,
    void (*callback)(unsigned char x, unsigned char y))
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	603a      	str	r2, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
 800021c:	460b      	mov	r3, r1
 800021e:	80bb      	strh	r3, [r7, #4]
    keypad_init_hardware(mode);
 8000220:	79fb      	ldrb	r3, [r7, #7]
 8000222:	4618      	mov	r0, r3
 8000224:	f000 f834 	bl	8000290 <keypad_init_hardware>
    configMode = mode;
 8000228:	4a16      	ldr	r2, [pc, #88]	; (8000284 <keypad_init+0x74>)
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	7013      	strb	r3, [r2, #0]
    keypad_cnt = cnt_trig;
 800022e:	4a16      	ldr	r2, [pc, #88]	; (8000288 <keypad_init+0x78>)
 8000230:	88bb      	ldrh	r3, [r7, #4]
 8000232:	8013      	strh	r3, [r2, #0]
    keypadCallback = callback;
 8000234:	4a15      	ldr	r2, [pc, #84]	; (800028c <keypad_init+0x7c>)
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	6013      	str	r3, [r2, #0]
    if (configMode == Pullup)
 800023a:	4b12      	ldr	r3, [pc, #72]	; (8000284 <keypad_init+0x74>)
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d10e      	bne.n	8000260 <keypad_init+0x50>
    {
        for (char i = 0; i < 4; i++)
 8000242:	2300      	movs	r3, #0
 8000244:	73fb      	strb	r3, [r7, #15]
 8000246:	e007      	b.n	8000258 <keypad_init+0x48>
        {
            keypad_writecol(i, 1);
 8000248:	7bfb      	ldrb	r3, [r7, #15]
 800024a:	2101      	movs	r1, #1
 800024c:	4618      	mov	r0, r3
 800024e:	f000 f861 	bl	8000314 <keypad_writecol>
        for (char i = 0; i < 4; i++)
 8000252:	7bfb      	ldrb	r3, [r7, #15]
 8000254:	3301      	adds	r3, #1
 8000256:	73fb      	strb	r3, [r7, #15]
 8000258:	7bfb      	ldrb	r3, [r7, #15]
 800025a:	2b03      	cmp	r3, #3
 800025c:	d9f4      	bls.n	8000248 <keypad_init+0x38>
        for (char i = 0; i < 4; i++)
        {
            keypad_writecol(i, 0);
        }
    }
}
 800025e:	e00d      	b.n	800027c <keypad_init+0x6c>
        for (char i = 0; i < 4; i++)
 8000260:	2300      	movs	r3, #0
 8000262:	73bb      	strb	r3, [r7, #14]
 8000264:	e007      	b.n	8000276 <keypad_init+0x66>
            keypad_writecol(i, 0);
 8000266:	7bbb      	ldrb	r3, [r7, #14]
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f000 f852 	bl	8000314 <keypad_writecol>
        for (char i = 0; i < 4; i++)
 8000270:	7bbb      	ldrb	r3, [r7, #14]
 8000272:	3301      	adds	r3, #1
 8000274:	73bb      	strb	r3, [r7, #14]
 8000276:	7bbb      	ldrb	r3, [r7, #14]
 8000278:	2b03      	cmp	r3, #3
 800027a:	d9f4      	bls.n	8000266 <keypad_init+0x56>
}
 800027c:	bf00      	nop
 800027e:	3710      	adds	r7, #16
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	200004c4 	.word	0x200004c4
 8000288:	200004c2 	.word	0x200004c2
 800028c:	200004bc 	.word	0x200004bc

08000290 <keypad_init_hardware>:

#define COL3_Pin GPIO_PIN_15
#define COL3_GPIO_Port GPIOB

void keypad_init_hardware(Pin_input_mode index)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b088      	sub	sp, #32
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800029a:	f107 0310 	add.w	r3, r7, #16
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	609a      	str	r2, [r3, #8]
 80002a6:	60da      	str	r2, [r3, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002a8:	4b18      	ldr	r3, [pc, #96]	; (800030c <keypad_init_hardware+0x7c>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	4a17      	ldr	r2, [pc, #92]	; (800030c <keypad_init_hardware+0x7c>)
 80002ae:	f043 0308 	orr.w	r3, r3, #8
 80002b2:	6193      	str	r3, [r2, #24]
 80002b4:	4b15      	ldr	r3, [pc, #84]	; (800030c <keypad_init_hardware+0x7c>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	f003 0308 	and.w	r3, r3, #8
 80002bc:	60fb      	str	r3, [r7, #12]
 80002be:	68fb      	ldr	r3, [r7, #12]

    GPIO_InitStruct.Pin = ROW0_Pin | ROW1_Pin | ROW2_Pin | ROW3_Pin;
 80002c0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80002c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002c6:	2300      	movs	r3, #0
 80002c8:	617b      	str	r3, [r7, #20]
    if (index == Pullup)
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d102      	bne.n	80002d6 <keypad_init_hardware+0x46>
    {
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002d0:	2301      	movs	r3, #1
 80002d2:	61bb      	str	r3, [r7, #24]
 80002d4:	e001      	b.n	80002da <keypad_init_hardware+0x4a>
    }
    else
    {
        GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80002d6:	2302      	movs	r3, #2
 80002d8:	61bb      	str	r3, [r7, #24]
    }
    HAL_GPIO_Init(ROW0_GPIO_Port, &GPIO_InitStruct);
 80002da:	f107 0310 	add.w	r3, r7, #16
 80002de:	4619      	mov	r1, r3
 80002e0:	480b      	ldr	r0, [pc, #44]	; (8000310 <keypad_init_hardware+0x80>)
 80002e2:	f001 fdbf 	bl	8001e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = COL0_Pin | COL1_Pin | COL2_Pin | COL3_Pin;
 80002e6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80002ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ec:	2301      	movs	r3, #1
 80002ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002f0:	2301      	movs	r3, #1
 80002f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f4:	2302      	movs	r3, #2
 80002f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(COL0_GPIO_Port, &GPIO_InitStruct);
 80002f8:	f107 0310 	add.w	r3, r7, #16
 80002fc:	4619      	mov	r1, r3
 80002fe:	4804      	ldr	r0, [pc, #16]	; (8000310 <keypad_init_hardware+0x80>)
 8000300:	f001 fdb0 	bl	8001e64 <HAL_GPIO_Init>
}
 8000304:	bf00      	nop
 8000306:	3720      	adds	r7, #32
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	40021000 	.word	0x40021000
 8000310:	40010c00 	.word	0x40010c00

08000314 <keypad_writecol>:
        return HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin);
        break;
    }
}
void keypad_writecol(char index, char state)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	460a      	mov	r2, r1
 800031e:	71fb      	strb	r3, [r7, #7]
 8000320:	4613      	mov	r3, r2
 8000322:	71bb      	strb	r3, [r7, #6]
    switch (index)
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	2b03      	cmp	r3, #3
 8000328:	d82a      	bhi.n	8000380 <keypad_writecol+0x6c>
 800032a:	a201      	add	r2, pc, #4	; (adr r2, 8000330 <keypad_writecol+0x1c>)
 800032c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000330:	08000341 	.word	0x08000341
 8000334:	08000351 	.word	0x08000351
 8000338:	08000361 	.word	0x08000361
 800033c:	08000371 	.word	0x08000371
    {
    case 0:
        HAL_GPIO_WritePin(COL0_GPIO_Port,COL0_Pin,state);
 8000340:	79bb      	ldrb	r3, [r7, #6]
 8000342:	461a      	mov	r2, r3
 8000344:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000348:	480f      	ldr	r0, [pc, #60]	; (8000388 <keypad_writecol+0x74>)
 800034a:	f001 fefc 	bl	8002146 <HAL_GPIO_WritePin>
        break;
 800034e:	e017      	b.n	8000380 <keypad_writecol+0x6c>
    case 1:
        HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin,state);
 8000350:	79bb      	ldrb	r3, [r7, #6]
 8000352:	461a      	mov	r2, r3
 8000354:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000358:	480b      	ldr	r0, [pc, #44]	; (8000388 <keypad_writecol+0x74>)
 800035a:	f001 fef4 	bl	8002146 <HAL_GPIO_WritePin>
        break;
 800035e:	e00f      	b.n	8000380 <keypad_writecol+0x6c>
    case 2:
        HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin,state);
 8000360:	79bb      	ldrb	r3, [r7, #6]
 8000362:	461a      	mov	r2, r3
 8000364:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000368:	4807      	ldr	r0, [pc, #28]	; (8000388 <keypad_writecol+0x74>)
 800036a:	f001 feec 	bl	8002146 <HAL_GPIO_WritePin>
        break;
 800036e:	e007      	b.n	8000380 <keypad_writecol+0x6c>
    case 3:
        HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin,state);
 8000370:	79bb      	ldrb	r3, [r7, #6]
 8000372:	461a      	mov	r2, r3
 8000374:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000378:	4803      	ldr	r0, [pc, #12]	; (8000388 <keypad_writecol+0x74>)
 800037a:	f001 fee4 	bl	8002146 <HAL_GPIO_WritePin>
        break;
 800037e:	bf00      	nop
    }
}
 8000380:	bf00      	nop
 8000382:	3708      	adds	r7, #8
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010c00 	.word	0x40010c00

0800038c <setFrame>:
extern __IO uint8_t readSta;
uint8_t RxBuff[100];
uint8_t TxBuff[__MAXLEN] = {0};

void setFrame(void)
{
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
	TxBuff[0] = 0xEF;
 8000392:	4b18      	ldr	r3, [pc, #96]	; (80003f4 <setFrame+0x68>)
 8000394:	22ef      	movs	r2, #239	; 0xef
 8000396:	701a      	strb	r2, [r3, #0]
	TxBuff[1] = 0x01;
 8000398:	4b16      	ldr	r3, [pc, #88]	; (80003f4 <setFrame+0x68>)
 800039a:	2201      	movs	r2, #1
 800039c:	705a      	strb	r2, [r3, #1]
	TxBuff[2] = AS608Addr >> 24;
 800039e:	4b16      	ldr	r3, [pc, #88]	; (80003f8 <setFrame+0x6c>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	0e1b      	lsrs	r3, r3, #24
 80003a4:	b2da      	uxtb	r2, r3
 80003a6:	4b13      	ldr	r3, [pc, #76]	; (80003f4 <setFrame+0x68>)
 80003a8:	709a      	strb	r2, [r3, #2]
	TxBuff[3] = AS608Addr >> 16;
 80003aa:	4b13      	ldr	r3, [pc, #76]	; (80003f8 <setFrame+0x6c>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	0c1b      	lsrs	r3, r3, #16
 80003b0:	b2da      	uxtb	r2, r3
 80003b2:	4b10      	ldr	r3, [pc, #64]	; (80003f4 <setFrame+0x68>)
 80003b4:	70da      	strb	r2, [r3, #3]
	TxBuff[4] = AS608Addr >> 8;
 80003b6:	4b10      	ldr	r3, [pc, #64]	; (80003f8 <setFrame+0x6c>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	0a1b      	lsrs	r3, r3, #8
 80003bc:	b2da      	uxtb	r2, r3
 80003be:	4b0d      	ldr	r3, [pc, #52]	; (80003f4 <setFrame+0x68>)
 80003c0:	711a      	strb	r2, [r3, #4]
	TxBuff[5] = AS608Addr;
 80003c2:	4b0d      	ldr	r3, [pc, #52]	; (80003f8 <setFrame+0x6c>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	b2da      	uxtb	r2, r3
 80003c8:	4b0a      	ldr	r3, [pc, #40]	; (80003f4 <setFrame+0x68>)
 80003ca:	715a      	strb	r2, [r3, #5]
	for(int i = 6;i<__MAXLEN;++i)
 80003cc:	2306      	movs	r3, #6
 80003ce:	607b      	str	r3, [r7, #4]
 80003d0:	e007      	b.n	80003e2 <setFrame+0x56>
	{
		TxBuff[i] = 0;
 80003d2:	4a08      	ldr	r2, [pc, #32]	; (80003f4 <setFrame+0x68>)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4413      	add	r3, r2
 80003d8:	2200      	movs	r2, #0
 80003da:	701a      	strb	r2, [r3, #0]
	for(int i = 6;i<__MAXLEN;++i)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	3301      	adds	r3, #1
 80003e0:	607b      	str	r3, [r7, #4]
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	2b31      	cmp	r3, #49	; 0x31
 80003e6:	ddf4      	ble.n	80003d2 <setFrame+0x46>
	}
}
 80003e8:	bf00      	nop
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bc80      	pop	{r7}
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	20000464 	.word	0x20000464
 80003f8:	20000000 	.word	0x20000000

080003fc <PS_GetImage>:
uint8_t PS_GetImage(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef xx;
	uint8_t packType = 0x01;		
 8000402:	2301      	movs	r3, #1
 8000404:	73fb      	strb	r3, [r7, #15]
	uint16_t packLen = 0x03;
 8000406:	2303      	movs	r3, #3
 8000408:	81bb      	strh	r3, [r7, #12]
	uint8_t cmd = 0x01;				//pack command
 800040a:	2301      	movs	r3, #1
 800040c:	72fb      	strb	r3, [r7, #11]
	uint16_t sum=0;					//frame sum
 800040e:	2300      	movs	r3, #0
 8000410:	813b      	strh	r3, [r7, #8]
	
	uint16_t ansLen = 3;				// answer pack length
 8000412:	2303      	movs	r3, #3
 8000414:	80fb      	strh	r3, [r7, #6]
	
	uint8_t temp = 6;				//....just temp
 8000416:	2306      	movs	r3, #6
 8000418:	717b      	strb	r3, [r7, #5]
	
	setFrame();
 800041a:	f7ff ffb7 	bl	800038c <setFrame>
	
	sum = packType + packLen + cmd;
 800041e:	7bfb      	ldrb	r3, [r7, #15]
 8000420:	b29a      	uxth	r2, r3
 8000422:	89bb      	ldrh	r3, [r7, #12]
 8000424:	4413      	add	r3, r2
 8000426:	b29a      	uxth	r2, r3
 8000428:	7afb      	ldrb	r3, [r7, #11]
 800042a:	b29b      	uxth	r3, r3
 800042c:	4413      	add	r3, r2
 800042e:	813b      	strh	r3, [r7, #8]
	
	TxBuff[temp++] = packType;
 8000430:	797b      	ldrb	r3, [r7, #5]
 8000432:	1c5a      	adds	r2, r3, #1
 8000434:	717a      	strb	r2, [r7, #5]
 8000436:	4619      	mov	r1, r3
 8000438:	4a27      	ldr	r2, [pc, #156]	; (80004d8 <PS_GetImage+0xdc>)
 800043a:	7bfb      	ldrb	r3, [r7, #15]
 800043c:	5453      	strb	r3, [r2, r1]
	
	TxBuff[temp++] = packLen>>8;
 800043e:	89bb      	ldrh	r3, [r7, #12]
 8000440:	0a1b      	lsrs	r3, r3, #8
 8000442:	b299      	uxth	r1, r3
 8000444:	797b      	ldrb	r3, [r7, #5]
 8000446:	1c5a      	adds	r2, r3, #1
 8000448:	717a      	strb	r2, [r7, #5]
 800044a:	461a      	mov	r2, r3
 800044c:	b2c9      	uxtb	r1, r1
 800044e:	4b22      	ldr	r3, [pc, #136]	; (80004d8 <PS_GetImage+0xdc>)
 8000450:	5499      	strb	r1, [r3, r2]
	TxBuff[temp++] = packLen;
 8000452:	797b      	ldrb	r3, [r7, #5]
 8000454:	1c5a      	adds	r2, r3, #1
 8000456:	717a      	strb	r2, [r7, #5]
 8000458:	461a      	mov	r2, r3
 800045a:	89bb      	ldrh	r3, [r7, #12]
 800045c:	b2d9      	uxtb	r1, r3
 800045e:	4b1e      	ldr	r3, [pc, #120]	; (80004d8 <PS_GetImage+0xdc>)
 8000460:	5499      	strb	r1, [r3, r2]
	
	TxBuff[temp++] = cmd;
 8000462:	797b      	ldrb	r3, [r7, #5]
 8000464:	1c5a      	adds	r2, r3, #1
 8000466:	717a      	strb	r2, [r7, #5]
 8000468:	4619      	mov	r1, r3
 800046a:	4a1b      	ldr	r2, [pc, #108]	; (80004d8 <PS_GetImage+0xdc>)
 800046c:	7afb      	ldrb	r3, [r7, #11]
 800046e:	5453      	strb	r3, [r2, r1]
	
	TxBuff[temp++] = sum>>8;
 8000470:	893b      	ldrh	r3, [r7, #8]
 8000472:	0a1b      	lsrs	r3, r3, #8
 8000474:	b299      	uxth	r1, r3
 8000476:	797b      	ldrb	r3, [r7, #5]
 8000478:	1c5a      	adds	r2, r3, #1
 800047a:	717a      	strb	r2, [r7, #5]
 800047c:	461a      	mov	r2, r3
 800047e:	b2c9      	uxtb	r1, r1
 8000480:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <PS_GetImage+0xdc>)
 8000482:	5499      	strb	r1, [r3, r2]
	TxBuff[temp++] = sum;
 8000484:	797b      	ldrb	r3, [r7, #5]
 8000486:	1c5a      	adds	r2, r3, #1
 8000488:	717a      	strb	r2, [r7, #5]
 800048a:	461a      	mov	r2, r3
 800048c:	893b      	ldrh	r3, [r7, #8]
 800048e:	b2d9      	uxtb	r1, r3
 8000490:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <PS_GetImage+0xdc>)
 8000492:	5499      	strb	r1, [r3, r2]
	
	HAL_UART_Transmit(&huart2,TxBuff,temp,200);
 8000494:	797b      	ldrb	r3, [r7, #5]
 8000496:	b29a      	uxth	r2, r3
 8000498:	23c8      	movs	r3, #200	; 0xc8
 800049a:	490f      	ldr	r1, [pc, #60]	; (80004d8 <PS_GetImage+0xdc>)
 800049c:	480f      	ldr	r0, [pc, #60]	; (80004dc <PS_GetImage+0xe0>)
 800049e:	f004 fb70 	bl	8004b82 <HAL_UART_Transmit>

	sum=0;
 80004a2:	2300      	movs	r3, #0
 80004a4:	813b      	strh	r3, [r7, #8]
	temp = ansLen+9;
 80004a6:	88fb      	ldrh	r3, [r7, #6]
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	3309      	adds	r3, #9
 80004ac:	717b      	strb	r3, [r7, #5]
	xx = HAL_UART_Receive(&huart2,RxBuff,temp,5000);
 80004ae:	797b      	ldrb	r3, [r7, #5]
 80004b0:	b29a      	uxth	r2, r3
 80004b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80004b6:	490a      	ldr	r1, [pc, #40]	; (80004e0 <PS_GetImage+0xe4>)
 80004b8:	4808      	ldr	r0, [pc, #32]	; (80004dc <PS_GetImage+0xe0>)
 80004ba:	f004 fbf4 	bl	8004ca6 <HAL_UART_Receive>
 80004be:	4603      	mov	r3, r0
 80004c0:	713b      	strb	r3, [r7, #4]
	if (xx!= HAL_OK)
 80004c2:	793b      	ldrb	r3, [r7, #4]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d002      	beq.n	80004ce <PS_GetImage+0xd2>
	{
			return RxBuff[9];
 80004c8:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <PS_GetImage+0xe4>)
 80004ca:	7a5b      	ldrb	r3, [r3, #9]
 80004cc:	e000      	b.n	80004d0 <PS_GetImage+0xd4>
	}
	else
		return 0xff;
 80004ce:	23ff      	movs	r3, #255	; 0xff
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	3710      	adds	r7, #16
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	20000464 	.word	0x20000464
 80004dc:	20000698 	.word	0x20000698
 80004e0:	200004c8 	.word	0x200004c8

080004e4 <PS_GenChar>:

uint8_t PS_GenChar(uint8_t BufferID)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]
	uint8_t packType = 0x01;		
 80004ee:	2301      	movs	r3, #1
 80004f0:	75fb      	strb	r3, [r7, #23]
	uint16_t packLen = 0x04;
 80004f2:	2304      	movs	r3, #4
 80004f4:	82bb      	strh	r3, [r7, #20]
	uint8_t cmd = 0x02;				//pack command
 80004f6:	2302      	movs	r3, #2
 80004f8:	74fb      	strb	r3, [r7, #19]
	uint16_t sum=0;					//frame sum
 80004fa:	2300      	movs	r3, #0
 80004fc:	83fb      	strh	r3, [r7, #30]
	
	uint16_t ansLen = 3;				// answer pack length
 80004fe:	2303      	movs	r3, #3
 8000500:	823b      	strh	r3, [r7, #16]
	
	uint8_t temp = 6;				//....just temp
 8000502:	2306      	movs	r3, #6
 8000504:	73fb      	strb	r3, [r7, #15]
	
	setFrame();
 8000506:	f7ff ff41 	bl	800038c <setFrame>
	//////////////
	sum = packType + packLen + cmd + BufferID;
 800050a:	7dfb      	ldrb	r3, [r7, #23]
 800050c:	b29a      	uxth	r2, r3
 800050e:	8abb      	ldrh	r3, [r7, #20]
 8000510:	4413      	add	r3, r2
 8000512:	b29a      	uxth	r2, r3
 8000514:	7cfb      	ldrb	r3, [r7, #19]
 8000516:	b29b      	uxth	r3, r3
 8000518:	4413      	add	r3, r2
 800051a:	b29a      	uxth	r2, r3
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	b29b      	uxth	r3, r3
 8000520:	4413      	add	r3, r2
 8000522:	83fb      	strh	r3, [r7, #30]
	//////////////
	TxBuff[temp++] = packType;
 8000524:	7bfb      	ldrb	r3, [r7, #15]
 8000526:	1c5a      	adds	r2, r3, #1
 8000528:	73fa      	strb	r2, [r7, #15]
 800052a:	4619      	mov	r1, r3
 800052c:	4a3b      	ldr	r2, [pc, #236]	; (800061c <PS_GenChar+0x138>)
 800052e:	7dfb      	ldrb	r3, [r7, #23]
 8000530:	5453      	strb	r3, [r2, r1]
	
	TxBuff[temp++] = packLen>>8;
 8000532:	8abb      	ldrh	r3, [r7, #20]
 8000534:	0a1b      	lsrs	r3, r3, #8
 8000536:	b299      	uxth	r1, r3
 8000538:	7bfb      	ldrb	r3, [r7, #15]
 800053a:	1c5a      	adds	r2, r3, #1
 800053c:	73fa      	strb	r2, [r7, #15]
 800053e:	461a      	mov	r2, r3
 8000540:	b2c9      	uxtb	r1, r1
 8000542:	4b36      	ldr	r3, [pc, #216]	; (800061c <PS_GenChar+0x138>)
 8000544:	5499      	strb	r1, [r3, r2]
	TxBuff[temp++] = packLen;
 8000546:	7bfb      	ldrb	r3, [r7, #15]
 8000548:	1c5a      	adds	r2, r3, #1
 800054a:	73fa      	strb	r2, [r7, #15]
 800054c:	461a      	mov	r2, r3
 800054e:	8abb      	ldrh	r3, [r7, #20]
 8000550:	b2d9      	uxtb	r1, r3
 8000552:	4b32      	ldr	r3, [pc, #200]	; (800061c <PS_GenChar+0x138>)
 8000554:	5499      	strb	r1, [r3, r2]
	
	TxBuff[temp++] = cmd;
 8000556:	7bfb      	ldrb	r3, [r7, #15]
 8000558:	1c5a      	adds	r2, r3, #1
 800055a:	73fa      	strb	r2, [r7, #15]
 800055c:	4619      	mov	r1, r3
 800055e:	4a2f      	ldr	r2, [pc, #188]	; (800061c <PS_GenChar+0x138>)
 8000560:	7cfb      	ldrb	r3, [r7, #19]
 8000562:	5453      	strb	r3, [r2, r1]
	TxBuff[temp++] = BufferID;
 8000564:	7bfb      	ldrb	r3, [r7, #15]
 8000566:	1c5a      	adds	r2, r3, #1
 8000568:	73fa      	strb	r2, [r7, #15]
 800056a:	4619      	mov	r1, r3
 800056c:	4a2b      	ldr	r2, [pc, #172]	; (800061c <PS_GenChar+0x138>)
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	5453      	strb	r3, [r2, r1]
	TxBuff[temp++] = sum>>8;
 8000572:	8bfb      	ldrh	r3, [r7, #30]
 8000574:	0a1b      	lsrs	r3, r3, #8
 8000576:	b299      	uxth	r1, r3
 8000578:	7bfb      	ldrb	r3, [r7, #15]
 800057a:	1c5a      	adds	r2, r3, #1
 800057c:	73fa      	strb	r2, [r7, #15]
 800057e:	461a      	mov	r2, r3
 8000580:	b2c9      	uxtb	r1, r1
 8000582:	4b26      	ldr	r3, [pc, #152]	; (800061c <PS_GenChar+0x138>)
 8000584:	5499      	strb	r1, [r3, r2]
	TxBuff[temp++] = sum;
 8000586:	7bfb      	ldrb	r3, [r7, #15]
 8000588:	1c5a      	adds	r2, r3, #1
 800058a:	73fa      	strb	r2, [r7, #15]
 800058c:	461a      	mov	r2, r3
 800058e:	8bfb      	ldrh	r3, [r7, #30]
 8000590:	b2d9      	uxtb	r1, r3
 8000592:	4b22      	ldr	r3, [pc, #136]	; (800061c <PS_GenChar+0x138>)
 8000594:	5499      	strb	r1, [r3, r2]
	
	HAL_UART_Transmit(&huart2,TxBuff,temp,200);
 8000596:	7bfb      	ldrb	r3, [r7, #15]
 8000598:	b29a      	uxth	r2, r3
 800059a:	23c8      	movs	r3, #200	; 0xc8
 800059c:	491f      	ldr	r1, [pc, #124]	; (800061c <PS_GenChar+0x138>)
 800059e:	4820      	ldr	r0, [pc, #128]	; (8000620 <PS_GenChar+0x13c>)
 80005a0:	f004 faef 	bl	8004b82 <HAL_UART_Transmit>
	
	sum=0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	83fb      	strh	r3, [r7, #30]
	
	temp = ansLen+9;
 80005a8:	8a3b      	ldrh	r3, [r7, #16]
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	3309      	adds	r3, #9
 80005ae:	73fb      	strb	r3, [r7, #15]
	if (HAL_UART_Receive(&huart2,RxBuff,temp,2000) == HAL_OK)
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80005b8:	491a      	ldr	r1, [pc, #104]	; (8000624 <PS_GenChar+0x140>)
 80005ba:	4819      	ldr	r0, [pc, #100]	; (8000620 <PS_GenChar+0x13c>)
 80005bc:	f004 fb73 	bl	8004ca6 <HAL_UART_Receive>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d125      	bne.n	8000612 <PS_GenChar+0x12e>
	{
		for(int i = 6; i<temp-2; i++)
 80005c6:	2306      	movs	r3, #6
 80005c8:	61bb      	str	r3, [r7, #24]
 80005ca:	e00a      	b.n	80005e2 <PS_GenChar+0xfe>
		{
			sum+=RxBuff[i];
 80005cc:	4a15      	ldr	r2, [pc, #84]	; (8000624 <PS_GenChar+0x140>)
 80005ce:	69bb      	ldr	r3, [r7, #24]
 80005d0:	4413      	add	r3, r2
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	8bfb      	ldrh	r3, [r7, #30]
 80005d8:	4413      	add	r3, r2
 80005da:	83fb      	strh	r3, [r7, #30]
		for(int i = 6; i<temp-2; i++)
 80005dc:	69bb      	ldr	r3, [r7, #24]
 80005de:	3301      	adds	r3, #1
 80005e0:	61bb      	str	r3, [r7, #24]
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	3b02      	subs	r3, #2
 80005e6:	69ba      	ldr	r2, [r7, #24]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	dbef      	blt.n	80005cc <PS_GenChar+0xe8>
		}
		if(sum == RxBuff[temp-1]+(RxBuff[temp-2]<<8))
 80005ec:	8bfa      	ldrh	r2, [r7, #30]
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	3b01      	subs	r3, #1
 80005f2:	490c      	ldr	r1, [pc, #48]	; (8000624 <PS_GenChar+0x140>)
 80005f4:	5ccb      	ldrb	r3, [r1, r3]
 80005f6:	4618      	mov	r0, r3
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	3b02      	subs	r3, #2
 80005fc:	4909      	ldr	r1, [pc, #36]	; (8000624 <PS_GenChar+0x140>)
 80005fe:	5ccb      	ldrb	r3, [r1, r3]
 8000600:	021b      	lsls	r3, r3, #8
 8000602:	4403      	add	r3, r0
 8000604:	429a      	cmp	r2, r3
 8000606:	d102      	bne.n	800060e <PS_GenChar+0x12a>
			return RxBuff[9];
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <PS_GenChar+0x140>)
 800060a:	7a5b      	ldrb	r3, [r3, #9]
 800060c:	e002      	b.n	8000614 <PS_GenChar+0x130>
		return 0xff;
 800060e:	23ff      	movs	r3, #255	; 0xff
 8000610:	e000      	b.n	8000614 <PS_GenChar+0x130>
	}
	else
		return 0xff;
 8000612:	23ff      	movs	r3, #255	; 0xff
}
 8000614:	4618      	mov	r0, r3
 8000616:	3720      	adds	r7, #32
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000464 	.word	0x20000464
 8000620:	20000698 	.word	0x20000698
 8000624:	200004c8 	.word	0x200004c8

08000628 <PS_Search>:
	else
		return 0xff;
}

u8 PS_Search(u8 BufferID, u16 StartPage, u16 PageNum,uint16_t* pageID,uint16_t* score)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af00      	add	r7, sp, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4603      	mov	r3, r0
 8000632:	73fb      	strb	r3, [r7, #15]
 8000634:	460b      	mov	r3, r1
 8000636:	81bb      	strh	r3, [r7, #12]
 8000638:	4613      	mov	r3, r2
 800063a:	817b      	strh	r3, [r7, #10]
	uint8_t packType = 0x01;		
 800063c:	2301      	movs	r3, #1
 800063e:	77fb      	strb	r3, [r7, #31]
	uint16_t packLen = 0x08;
 8000640:	2308      	movs	r3, #8
 8000642:	83bb      	strh	r3, [r7, #28]
	uint8_t cmd = 0x04;				//pack command
 8000644:	2304      	movs	r3, #4
 8000646:	76fb      	strb	r3, [r7, #27]
	uint16_t ansLen = 7;				// answer pack length
 8000648:	2307      	movs	r3, #7
 800064a:	833b      	strh	r3, [r7, #24]
	
	uint16_t sum=0;					//frame sum
 800064c:	2300      	movs	r3, #0
 800064e:	82fb      	strh	r3, [r7, #22]
	uint8_t temp = 6;				//....just temp
 8000650:	2306      	movs	r3, #6
 8000652:	757b      	strb	r3, [r7, #21]
	
	setFrame();
 8000654:	f7ff fe9a 	bl	800038c <setFrame>
	sum = packType + packLen + cmd + BufferID + StartPage + PageNum;
 8000658:	7ffb      	ldrb	r3, [r7, #31]
 800065a:	b29a      	uxth	r2, r3
 800065c:	8bbb      	ldrh	r3, [r7, #28]
 800065e:	4413      	add	r3, r2
 8000660:	b29a      	uxth	r2, r3
 8000662:	7efb      	ldrb	r3, [r7, #27]
 8000664:	b29b      	uxth	r3, r3
 8000666:	4413      	add	r3, r2
 8000668:	b29a      	uxth	r2, r3
 800066a:	7bfb      	ldrb	r3, [r7, #15]
 800066c:	b29b      	uxth	r3, r3
 800066e:	4413      	add	r3, r2
 8000670:	b29a      	uxth	r2, r3
 8000672:	89bb      	ldrh	r3, [r7, #12]
 8000674:	4413      	add	r3, r2
 8000676:	b29a      	uxth	r2, r3
 8000678:	897b      	ldrh	r3, [r7, #10]
 800067a:	4413      	add	r3, r2
 800067c:	82fb      	strh	r3, [r7, #22]
	
	TxBuff[temp++] = packType;
 800067e:	7d7b      	ldrb	r3, [r7, #21]
 8000680:	1c5a      	adds	r2, r3, #1
 8000682:	757a      	strb	r2, [r7, #21]
 8000684:	4619      	mov	r1, r3
 8000686:	4a6a      	ldr	r2, [pc, #424]	; (8000830 <PS_Search+0x208>)
 8000688:	7ffb      	ldrb	r3, [r7, #31]
 800068a:	5453      	strb	r3, [r2, r1]
	TxBuff[temp++] = packLen>>8;
 800068c:	8bbb      	ldrh	r3, [r7, #28]
 800068e:	0a1b      	lsrs	r3, r3, #8
 8000690:	b299      	uxth	r1, r3
 8000692:	7d7b      	ldrb	r3, [r7, #21]
 8000694:	1c5a      	adds	r2, r3, #1
 8000696:	757a      	strb	r2, [r7, #21]
 8000698:	461a      	mov	r2, r3
 800069a:	b2c9      	uxtb	r1, r1
 800069c:	4b64      	ldr	r3, [pc, #400]	; (8000830 <PS_Search+0x208>)
 800069e:	5499      	strb	r1, [r3, r2]
	TxBuff[temp++] = packLen;
 80006a0:	7d7b      	ldrb	r3, [r7, #21]
 80006a2:	1c5a      	adds	r2, r3, #1
 80006a4:	757a      	strb	r2, [r7, #21]
 80006a6:	461a      	mov	r2, r3
 80006a8:	8bbb      	ldrh	r3, [r7, #28]
 80006aa:	b2d9      	uxtb	r1, r3
 80006ac:	4b60      	ldr	r3, [pc, #384]	; (8000830 <PS_Search+0x208>)
 80006ae:	5499      	strb	r1, [r3, r2]
	TxBuff[temp++] = cmd;
 80006b0:	7d7b      	ldrb	r3, [r7, #21]
 80006b2:	1c5a      	adds	r2, r3, #1
 80006b4:	757a      	strb	r2, [r7, #21]
 80006b6:	4619      	mov	r1, r3
 80006b8:	4a5d      	ldr	r2, [pc, #372]	; (8000830 <PS_Search+0x208>)
 80006ba:	7efb      	ldrb	r3, [r7, #27]
 80006bc:	5453      	strb	r3, [r2, r1]
	///--->Here
	TxBuff[temp++] = BufferID;
 80006be:	7d7b      	ldrb	r3, [r7, #21]
 80006c0:	1c5a      	adds	r2, r3, #1
 80006c2:	757a      	strb	r2, [r7, #21]
 80006c4:	4619      	mov	r1, r3
 80006c6:	4a5a      	ldr	r2, [pc, #360]	; (8000830 <PS_Search+0x208>)
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	5453      	strb	r3, [r2, r1]
	TxBuff[temp++] = StartPage>>8;
 80006cc:	89bb      	ldrh	r3, [r7, #12]
 80006ce:	0a1b      	lsrs	r3, r3, #8
 80006d0:	b299      	uxth	r1, r3
 80006d2:	7d7b      	ldrb	r3, [r7, #21]
 80006d4:	1c5a      	adds	r2, r3, #1
 80006d6:	757a      	strb	r2, [r7, #21]
 80006d8:	461a      	mov	r2, r3
 80006da:	b2c9      	uxtb	r1, r1
 80006dc:	4b54      	ldr	r3, [pc, #336]	; (8000830 <PS_Search+0x208>)
 80006de:	5499      	strb	r1, [r3, r2]
	TxBuff[temp++] = StartPage;
 80006e0:	7d7b      	ldrb	r3, [r7, #21]
 80006e2:	1c5a      	adds	r2, r3, #1
 80006e4:	757a      	strb	r2, [r7, #21]
 80006e6:	461a      	mov	r2, r3
 80006e8:	89bb      	ldrh	r3, [r7, #12]
 80006ea:	b2d9      	uxtb	r1, r3
 80006ec:	4b50      	ldr	r3, [pc, #320]	; (8000830 <PS_Search+0x208>)
 80006ee:	5499      	strb	r1, [r3, r2]
	TxBuff[temp++] = PageNum>>8;
 80006f0:	897b      	ldrh	r3, [r7, #10]
 80006f2:	0a1b      	lsrs	r3, r3, #8
 80006f4:	b299      	uxth	r1, r3
 80006f6:	7d7b      	ldrb	r3, [r7, #21]
 80006f8:	1c5a      	adds	r2, r3, #1
 80006fa:	757a      	strb	r2, [r7, #21]
 80006fc:	461a      	mov	r2, r3
 80006fe:	b2c9      	uxtb	r1, r1
 8000700:	4b4b      	ldr	r3, [pc, #300]	; (8000830 <PS_Search+0x208>)
 8000702:	5499      	strb	r1, [r3, r2]
	TxBuff[temp++] = PageNum;
 8000704:	7d7b      	ldrb	r3, [r7, #21]
 8000706:	1c5a      	adds	r2, r3, #1
 8000708:	757a      	strb	r2, [r7, #21]
 800070a:	461a      	mov	r2, r3
 800070c:	897b      	ldrh	r3, [r7, #10]
 800070e:	b2d9      	uxtb	r1, r3
 8000710:	4b47      	ldr	r3, [pc, #284]	; (8000830 <PS_Search+0x208>)
 8000712:	5499      	strb	r1, [r3, r2]
	TxBuff[temp++] = sum>>8;
 8000714:	8afb      	ldrh	r3, [r7, #22]
 8000716:	0a1b      	lsrs	r3, r3, #8
 8000718:	b299      	uxth	r1, r3
 800071a:	7d7b      	ldrb	r3, [r7, #21]
 800071c:	1c5a      	adds	r2, r3, #1
 800071e:	757a      	strb	r2, [r7, #21]
 8000720:	461a      	mov	r2, r3
 8000722:	b2c9      	uxtb	r1, r1
 8000724:	4b42      	ldr	r3, [pc, #264]	; (8000830 <PS_Search+0x208>)
 8000726:	5499      	strb	r1, [r3, r2]
	TxBuff[temp++] = sum;
 8000728:	7d7b      	ldrb	r3, [r7, #21]
 800072a:	1c5a      	adds	r2, r3, #1
 800072c:	757a      	strb	r2, [r7, #21]
 800072e:	461a      	mov	r2, r3
 8000730:	8afb      	ldrh	r3, [r7, #22]
 8000732:	b2d9      	uxtb	r1, r3
 8000734:	4b3e      	ldr	r3, [pc, #248]	; (8000830 <PS_Search+0x208>)
 8000736:	5499      	strb	r1, [r3, r2]
	
	HAL_UART_Transmit(&huart2,TxBuff,temp,200);
 8000738:	7d7b      	ldrb	r3, [r7, #21]
 800073a:	b29a      	uxth	r2, r3
 800073c:	23c8      	movs	r3, #200	; 0xc8
 800073e:	493c      	ldr	r1, [pc, #240]	; (8000830 <PS_Search+0x208>)
 8000740:	483c      	ldr	r0, [pc, #240]	; (8000834 <PS_Search+0x20c>)
 8000742:	f004 fa1e 	bl	8004b82 <HAL_UART_Transmit>
	
	sum=0;
 8000746:	2300      	movs	r3, #0
 8000748:	82fb      	strh	r3, [r7, #22]
	
	temp = ansLen+9;
 800074a:	8b3b      	ldrh	r3, [r7, #24]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	3309      	adds	r3, #9
 8000750:	757b      	strb	r3, [r7, #21]
	if (HAL_UART_Receive(&huart2,RxBuff,temp,2000) == HAL_OK)
 8000752:	7d7b      	ldrb	r3, [r7, #21]
 8000754:	b29a      	uxth	r2, r3
 8000756:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800075a:	4937      	ldr	r1, [pc, #220]	; (8000838 <PS_Search+0x210>)
 800075c:	4835      	ldr	r0, [pc, #212]	; (8000834 <PS_Search+0x20c>)
 800075e:	f004 faa2 	bl	8004ca6 <HAL_UART_Receive>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d15d      	bne.n	8000824 <PS_Search+0x1fc>
	{
		sum += RxBuff[6];			//anspack identify
 8000768:	4b33      	ldr	r3, [pc, #204]	; (8000838 <PS_Search+0x210>)
 800076a:	799b      	ldrb	r3, [r3, #6]
 800076c:	b29a      	uxth	r2, r3
 800076e:	8afb      	ldrh	r3, [r7, #22]
 8000770:	4413      	add	r3, r2
 8000772:	82fb      	strh	r3, [r7, #22]
		sum += (RxBuff[7]<<8)+RxBuff[8];		//ansLen
 8000774:	4b30      	ldr	r3, [pc, #192]	; (8000838 <PS_Search+0x210>)
 8000776:	79db      	ldrb	r3, [r3, #7]
 8000778:	b29b      	uxth	r3, r3
 800077a:	021b      	lsls	r3, r3, #8
 800077c:	b29a      	uxth	r2, r3
 800077e:	4b2e      	ldr	r3, [pc, #184]	; (8000838 <PS_Search+0x210>)
 8000780:	7a1b      	ldrb	r3, [r3, #8]
 8000782:	b29b      	uxth	r3, r3
 8000784:	4413      	add	r3, r2
 8000786:	b29a      	uxth	r2, r3
 8000788:	8afb      	ldrh	r3, [r7, #22]
 800078a:	4413      	add	r3, r2
 800078c:	82fb      	strh	r3, [r7, #22]
		sum += RxBuff[9];					//yes code	
 800078e:	4b2a      	ldr	r3, [pc, #168]	; (8000838 <PS_Search+0x210>)
 8000790:	7a5b      	ldrb	r3, [r3, #9]
 8000792:	b29a      	uxth	r2, r3
 8000794:	8afb      	ldrh	r3, [r7, #22]
 8000796:	4413      	add	r3, r2
 8000798:	82fb      	strh	r3, [r7, #22]
		sum += (RxBuff[10]<<8)+RxBuff[11];	//page id 
 800079a:	4b27      	ldr	r3, [pc, #156]	; (8000838 <PS_Search+0x210>)
 800079c:	7a9b      	ldrb	r3, [r3, #10]
 800079e:	b29b      	uxth	r3, r3
 80007a0:	021b      	lsls	r3, r3, #8
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	4b24      	ldr	r3, [pc, #144]	; (8000838 <PS_Search+0x210>)
 80007a6:	7adb      	ldrb	r3, [r3, #11]
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	4413      	add	r3, r2
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	8afb      	ldrh	r3, [r7, #22]
 80007b0:	4413      	add	r3, r2
 80007b2:	82fb      	strh	r3, [r7, #22]
		sum += (RxBuff[12]<<8)+RxBuff[13];	//score
 80007b4:	4b20      	ldr	r3, [pc, #128]	; (8000838 <PS_Search+0x210>)
 80007b6:	7b1b      	ldrb	r3, [r3, #12]
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	021b      	lsls	r3, r3, #8
 80007bc:	b29a      	uxth	r2, r3
 80007be:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <PS_Search+0x210>)
 80007c0:	7b5b      	ldrb	r3, [r3, #13]
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	4413      	add	r3, r2
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	8afb      	ldrh	r3, [r7, #22]
 80007ca:	4413      	add	r3, r2
 80007cc:	82fb      	strh	r3, [r7, #22]
		if(sum == RxBuff[temp-1]+(RxBuff[temp-2]<<8))
 80007ce:	8afa      	ldrh	r2, [r7, #22]
 80007d0:	7d7b      	ldrb	r3, [r7, #21]
 80007d2:	3b01      	subs	r3, #1
 80007d4:	4918      	ldr	r1, [pc, #96]	; (8000838 <PS_Search+0x210>)
 80007d6:	5ccb      	ldrb	r3, [r1, r3]
 80007d8:	4618      	mov	r0, r3
 80007da:	7d7b      	ldrb	r3, [r7, #21]
 80007dc:	3b02      	subs	r3, #2
 80007de:	4916      	ldr	r1, [pc, #88]	; (8000838 <PS_Search+0x210>)
 80007e0:	5ccb      	ldrb	r3, [r1, r3]
 80007e2:	021b      	lsls	r3, r3, #8
 80007e4:	4403      	add	r3, r0
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d11a      	bne.n	8000820 <PS_Search+0x1f8>
		{
			*pageID = (RxBuff[10]<<8)+RxBuff[11];	//page id 
 80007ea:	4b13      	ldr	r3, [pc, #76]	; (8000838 <PS_Search+0x210>)
 80007ec:	7a9b      	ldrb	r3, [r3, #10]
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	021b      	lsls	r3, r3, #8
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	4b10      	ldr	r3, [pc, #64]	; (8000838 <PS_Search+0x210>)
 80007f6:	7adb      	ldrb	r3, [r3, #11]
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	4413      	add	r3, r2
 80007fc:	b29a      	uxth	r2, r3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	801a      	strh	r2, [r3, #0]
			*score  = (RxBuff[12]<<8)+RxBuff[13];	//score
 8000802:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <PS_Search+0x210>)
 8000804:	7b1b      	ldrb	r3, [r3, #12]
 8000806:	b29b      	uxth	r3, r3
 8000808:	021b      	lsls	r3, r3, #8
 800080a:	b29a      	uxth	r2, r3
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <PS_Search+0x210>)
 800080e:	7b5b      	ldrb	r3, [r3, #13]
 8000810:	b29b      	uxth	r3, r3
 8000812:	4413      	add	r3, r2
 8000814:	b29a      	uxth	r2, r3
 8000816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000818:	801a      	strh	r2, [r3, #0]
			return RxBuff[9];
 800081a:	4b07      	ldr	r3, [pc, #28]	; (8000838 <PS_Search+0x210>)
 800081c:	7a5b      	ldrb	r3, [r3, #9]
 800081e:	e002      	b.n	8000826 <PS_Search+0x1fe>
		}
		return 0xff;
 8000820:	23ff      	movs	r3, #255	; 0xff
 8000822:	e000      	b.n	8000826 <PS_Search+0x1fe>
	}
	else
		return 0xff;
 8000824:	23ff      	movs	r3, #255	; 0xff
}
 8000826:	4618      	mov	r0, r3
 8000828:	3720      	adds	r7, #32
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000464 	.word	0x20000464
 8000834:	20000698 	.word	0x20000698
 8000838:	200004c8 	.word	0x200004c8

0800083c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 0310 	add.w	r3, r7, #16
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000850:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <MX_GPIO_Init+0x94>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	4a1e      	ldr	r2, [pc, #120]	; (80008d0 <MX_GPIO_Init+0x94>)
 8000856:	f043 0310 	orr.w	r3, r3, #16
 800085a:	6193      	str	r3, [r2, #24]
 800085c:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <MX_GPIO_Init+0x94>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f003 0310 	and.w	r3, r3, #16
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000868:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <MX_GPIO_Init+0x94>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	4a18      	ldr	r2, [pc, #96]	; (80008d0 <MX_GPIO_Init+0x94>)
 800086e:	f043 0320 	orr.w	r3, r3, #32
 8000872:	6193      	str	r3, [r2, #24]
 8000874:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <MX_GPIO_Init+0x94>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	f003 0320 	and.w	r3, r3, #32
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000880:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <MX_GPIO_Init+0x94>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	4a12      	ldr	r2, [pc, #72]	; (80008d0 <MX_GPIO_Init+0x94>)
 8000886:	f043 0304 	orr.w	r3, r3, #4
 800088a:	6193      	str	r3, [r2, #24]
 800088c:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <MX_GPIO_Init+0x94>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	f003 0304 	and.w	r3, r3, #4
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000898:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <MX_GPIO_Init+0x94>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	4a0c      	ldr	r2, [pc, #48]	; (80008d0 <MX_GPIO_Init+0x94>)
 800089e:	f043 0308 	orr.w	r3, r3, #8
 80008a2:	6193      	str	r3, [r2, #24]
 80008a4:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <MX_GPIO_Init+0x94>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	f003 0308 	and.w	r3, r3, #8
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AS608_Pin;
 80008b0:	2302      	movs	r3, #2
 80008b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008b8:	2302      	movs	r3, #2
 80008ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AS608_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 0310 	add.w	r3, r7, #16
 80008c0:	4619      	mov	r1, r3
 80008c2:	4804      	ldr	r0, [pc, #16]	; (80008d4 <MX_GPIO_Init+0x98>)
 80008c4:	f001 face 	bl	8001e64 <HAL_GPIO_Init>

}
 80008c8:	bf00      	nop
 80008ca:	3720      	adds	r7, #32
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40021000 	.word	0x40021000
 80008d4:	40010800 	.word	0x40010800

080008d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <MX_I2C1_Init+0x50>)
 80008de:	4a13      	ldr	r2, [pc, #76]	; (800092c <MX_I2C1_Init+0x54>)
 80008e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_I2C1_Init+0x50>)
 80008e4:	4a12      	ldr	r2, [pc, #72]	; (8000930 <MX_I2C1_Init+0x58>)
 80008e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_I2C1_Init+0x50>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_I2C1_Init+0x50>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_I2C1_Init+0x50>)
 80008f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008fc:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <MX_I2C1_Init+0x50>)
 80008fe:	2200      	movs	r2, #0
 8000900:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_I2C1_Init+0x50>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000908:	4b07      	ldr	r3, [pc, #28]	; (8000928 <MX_I2C1_Init+0x50>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_I2C1_Init+0x50>)
 8000910:	2200      	movs	r2, #0
 8000912:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000914:	4804      	ldr	r0, [pc, #16]	; (8000928 <MX_I2C1_Init+0x50>)
 8000916:	f001 fc2f 	bl	8002178 <HAL_I2C_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000920:	f000 fba4 	bl	800106c <Error_Handler>
  }

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	2000052c 	.word	0x2000052c
 800092c:	40005400 	.word	0x40005400
 8000930:	000186a0 	.word	0x000186a0

08000934 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b088      	sub	sp, #32
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 0310 	add.w	r3, r7, #16
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a15      	ldr	r2, [pc, #84]	; (80009a4 <HAL_I2C_MspInit+0x70>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d123      	bne.n	800099c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <HAL_I2C_MspInit+0x74>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	4a13      	ldr	r2, [pc, #76]	; (80009a8 <HAL_I2C_MspInit+0x74>)
 800095a:	f043 0308 	orr.w	r3, r3, #8
 800095e:	6193      	str	r3, [r2, #24]
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <HAL_I2C_MspInit+0x74>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	f003 0308 	and.w	r3, r3, #8
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800096c:	23c0      	movs	r3, #192	; 0xc0
 800096e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000970:	2312      	movs	r3, #18
 8000972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000974:	2303      	movs	r3, #3
 8000976:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000978:	f107 0310 	add.w	r3, r7, #16
 800097c:	4619      	mov	r1, r3
 800097e:	480b      	ldr	r0, [pc, #44]	; (80009ac <HAL_I2C_MspInit+0x78>)
 8000980:	f001 fa70 	bl	8001e64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <HAL_I2C_MspInit+0x74>)
 8000986:	69db      	ldr	r3, [r3, #28]
 8000988:	4a07      	ldr	r2, [pc, #28]	; (80009a8 <HAL_I2C_MspInit+0x74>)
 800098a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800098e:	61d3      	str	r3, [r2, #28]
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <HAL_I2C_MspInit+0x74>)
 8000992:	69db      	ldr	r3, [r3, #28]
 8000994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800099c:	bf00      	nop
 800099e:	3720      	adds	r7, #32
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40005400 	.word	0x40005400
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40010c00 	.word	0x40010c00

080009b0 <callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void callback(unsigned char x, unsigned char y)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	460a      	mov	r2, r1
 80009ba:	71fb      	strb	r3, [r7, #7]
 80009bc:	4613      	mov	r3, r2
 80009be:	71bb      	strb	r3, [r7, #6]
  switch (x)
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	2b03      	cmp	r3, #3
 80009c4:	f200 80fd 	bhi.w	8000bc2 <callback+0x212>
 80009c8:	a201      	add	r2, pc, #4	; (adr r2, 80009d0 <callback+0x20>)
 80009ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ce:	bf00      	nop
 80009d0:	080009e1 	.word	0x080009e1
 80009d4:	08000a9b 	.word	0x08000a9b
 80009d8:	08000b53 	.word	0x08000b53
 80009dc:	08000bad 	.word	0x08000bad
  {
  case 0:
    switch (y)
 80009e0:	79bb      	ldrb	r3, [r7, #6]
 80009e2:	2b03      	cmp	r3, #3
 80009e4:	f200 80ea 	bhi.w	8000bbc <callback+0x20c>
 80009e8:	a201      	add	r2, pc, #4	; (adr r2, 80009f0 <callback+0x40>)
 80009ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ee:	bf00      	nop
 80009f0:	08000a01 	.word	0x08000a01
 80009f4:	08000a27 	.word	0x08000a27
 80009f8:	08000a4d 	.word	0x08000a4d
 80009fc:	08000a73 	.word	0x08000a73
    {
    case 0:
      input[Length] = 0;
 8000a00:	4b72      	ldr	r3, [pc, #456]	; (8000bcc <callback+0x21c>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	461a      	mov	r2, r3
 8000a06:	4b72      	ldr	r3, [pc, #456]	; (8000bd0 <callback+0x220>)
 8000a08:	2100      	movs	r1, #0
 8000a0a:	5499      	strb	r1, [r3, r2]
      sys[Length] = '*';
 8000a0c:	4b6f      	ldr	r3, [pc, #444]	; (8000bcc <callback+0x21c>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b70      	ldr	r3, [pc, #448]	; (8000bd4 <callback+0x224>)
 8000a14:	212a      	movs	r1, #42	; 0x2a
 8000a16:	5499      	strb	r1, [r3, r2]
      Length++;
 8000a18:	4b6c      	ldr	r3, [pc, #432]	; (8000bcc <callback+0x21c>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	4b6a      	ldr	r3, [pc, #424]	; (8000bcc <callback+0x21c>)
 8000a22:	701a      	strb	r2, [r3, #0]
      break;
 8000a24:	e038      	b.n	8000a98 <callback+0xe8>
    case 1:
      input[Length] = 1;
 8000a26:	4b69      	ldr	r3, [pc, #420]	; (8000bcc <callback+0x21c>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	4b68      	ldr	r3, [pc, #416]	; (8000bd0 <callback+0x220>)
 8000a2e:	2101      	movs	r1, #1
 8000a30:	5499      	strb	r1, [r3, r2]
      sys[Length] = '*';
 8000a32:	4b66      	ldr	r3, [pc, #408]	; (8000bcc <callback+0x21c>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	461a      	mov	r2, r3
 8000a38:	4b66      	ldr	r3, [pc, #408]	; (8000bd4 <callback+0x224>)
 8000a3a:	212a      	movs	r1, #42	; 0x2a
 8000a3c:	5499      	strb	r1, [r3, r2]
      Length++;
 8000a3e:	4b63      	ldr	r3, [pc, #396]	; (8000bcc <callback+0x21c>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	3301      	adds	r3, #1
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4b61      	ldr	r3, [pc, #388]	; (8000bcc <callback+0x21c>)
 8000a48:	701a      	strb	r2, [r3, #0]
      break;
 8000a4a:	e025      	b.n	8000a98 <callback+0xe8>
    case 2:
      input[Length] = 2;
 8000a4c:	4b5f      	ldr	r3, [pc, #380]	; (8000bcc <callback+0x21c>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b5f      	ldr	r3, [pc, #380]	; (8000bd0 <callback+0x220>)
 8000a54:	2102      	movs	r1, #2
 8000a56:	5499      	strb	r1, [r3, r2]
      sys[Length] = '*';
 8000a58:	4b5c      	ldr	r3, [pc, #368]	; (8000bcc <callback+0x21c>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b5d      	ldr	r3, [pc, #372]	; (8000bd4 <callback+0x224>)
 8000a60:	212a      	movs	r1, #42	; 0x2a
 8000a62:	5499      	strb	r1, [r3, r2]
      Length++;
 8000a64:	4b59      	ldr	r3, [pc, #356]	; (8000bcc <callback+0x21c>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	4b57      	ldr	r3, [pc, #348]	; (8000bcc <callback+0x21c>)
 8000a6e:	701a      	strb	r2, [r3, #0]
      break;
 8000a70:	e012      	b.n	8000a98 <callback+0xe8>
    case 3:
      input[Length] = 3;
 8000a72:	4b56      	ldr	r3, [pc, #344]	; (8000bcc <callback+0x21c>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	461a      	mov	r2, r3
 8000a78:	4b55      	ldr	r3, [pc, #340]	; (8000bd0 <callback+0x220>)
 8000a7a:	2103      	movs	r1, #3
 8000a7c:	5499      	strb	r1, [r3, r2]
      sys[Length] = '*';
 8000a7e:	4b53      	ldr	r3, [pc, #332]	; (8000bcc <callback+0x21c>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	461a      	mov	r2, r3
 8000a84:	4b53      	ldr	r3, [pc, #332]	; (8000bd4 <callback+0x224>)
 8000a86:	212a      	movs	r1, #42	; 0x2a
 8000a88:	5499      	strb	r1, [r3, r2]
      Length++;
 8000a8a:	4b50      	ldr	r3, [pc, #320]	; (8000bcc <callback+0x21c>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4b4e      	ldr	r3, [pc, #312]	; (8000bcc <callback+0x21c>)
 8000a94:	701a      	strb	r2, [r3, #0]
      break;
 8000a96:	bf00      	nop
    }
    break;
 8000a98:	e090      	b.n	8000bbc <callback+0x20c>
  case 1:
    switch (y)
 8000a9a:	79bb      	ldrb	r3, [r7, #6]
 8000a9c:	2b03      	cmp	r3, #3
 8000a9e:	f200 808f 	bhi.w	8000bc0 <callback+0x210>
 8000aa2:	a201      	add	r2, pc, #4	; (adr r2, 8000aa8 <callback+0xf8>)
 8000aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa8:	08000ab9 	.word	0x08000ab9
 8000aac:	08000adf 	.word	0x08000adf
 8000ab0:	08000b05 	.word	0x08000b05
 8000ab4:	08000b2b 	.word	0x08000b2b
    {
    case 0:
      input[Length] = 4;
 8000ab8:	4b44      	ldr	r3, [pc, #272]	; (8000bcc <callback+0x21c>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b44      	ldr	r3, [pc, #272]	; (8000bd0 <callback+0x220>)
 8000ac0:	2104      	movs	r1, #4
 8000ac2:	5499      	strb	r1, [r3, r2]
      sys[Length] = '*';
 8000ac4:	4b41      	ldr	r3, [pc, #260]	; (8000bcc <callback+0x21c>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b42      	ldr	r3, [pc, #264]	; (8000bd4 <callback+0x224>)
 8000acc:	212a      	movs	r1, #42	; 0x2a
 8000ace:	5499      	strb	r1, [r3, r2]
      Length++;
 8000ad0:	4b3e      	ldr	r3, [pc, #248]	; (8000bcc <callback+0x21c>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	4b3c      	ldr	r3, [pc, #240]	; (8000bcc <callback+0x21c>)
 8000ada:	701a      	strb	r2, [r3, #0]
      break;
 8000adc:	e038      	b.n	8000b50 <callback+0x1a0>
    case 1:
      input[Length] = 5;
 8000ade:	4b3b      	ldr	r3, [pc, #236]	; (8000bcc <callback+0x21c>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	4b3a      	ldr	r3, [pc, #232]	; (8000bd0 <callback+0x220>)
 8000ae6:	2105      	movs	r1, #5
 8000ae8:	5499      	strb	r1, [r3, r2]
      sys[Length] = '*';
 8000aea:	4b38      	ldr	r3, [pc, #224]	; (8000bcc <callback+0x21c>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	461a      	mov	r2, r3
 8000af0:	4b38      	ldr	r3, [pc, #224]	; (8000bd4 <callback+0x224>)
 8000af2:	212a      	movs	r1, #42	; 0x2a
 8000af4:	5499      	strb	r1, [r3, r2]
      Length++;
 8000af6:	4b35      	ldr	r3, [pc, #212]	; (8000bcc <callback+0x21c>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	3301      	adds	r3, #1
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4b33      	ldr	r3, [pc, #204]	; (8000bcc <callback+0x21c>)
 8000b00:	701a      	strb	r2, [r3, #0]
      break;
 8000b02:	e025      	b.n	8000b50 <callback+0x1a0>
    case 2:
      input[Length] = 6;
 8000b04:	4b31      	ldr	r3, [pc, #196]	; (8000bcc <callback+0x21c>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b31      	ldr	r3, [pc, #196]	; (8000bd0 <callback+0x220>)
 8000b0c:	2106      	movs	r1, #6
 8000b0e:	5499      	strb	r1, [r3, r2]
      sys[Length] = '*';
 8000b10:	4b2e      	ldr	r3, [pc, #184]	; (8000bcc <callback+0x21c>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b2f      	ldr	r3, [pc, #188]	; (8000bd4 <callback+0x224>)
 8000b18:	212a      	movs	r1, #42	; 0x2a
 8000b1a:	5499      	strb	r1, [r3, r2]
      Length++;
 8000b1c:	4b2b      	ldr	r3, [pc, #172]	; (8000bcc <callback+0x21c>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	3301      	adds	r3, #1
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	4b29      	ldr	r3, [pc, #164]	; (8000bcc <callback+0x21c>)
 8000b26:	701a      	strb	r2, [r3, #0]
      break;
 8000b28:	e012      	b.n	8000b50 <callback+0x1a0>
    case 3:
      input[Length] = 7;
 8000b2a:	4b28      	ldr	r3, [pc, #160]	; (8000bcc <callback+0x21c>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b27      	ldr	r3, [pc, #156]	; (8000bd0 <callback+0x220>)
 8000b32:	2107      	movs	r1, #7
 8000b34:	5499      	strb	r1, [r3, r2]
      sys[Length] = '*';
 8000b36:	4b25      	ldr	r3, [pc, #148]	; (8000bcc <callback+0x21c>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4b25      	ldr	r3, [pc, #148]	; (8000bd4 <callback+0x224>)
 8000b3e:	212a      	movs	r1, #42	; 0x2a
 8000b40:	5499      	strb	r1, [r3, r2]
      Length++;
 8000b42:	4b22      	ldr	r3, [pc, #136]	; (8000bcc <callback+0x21c>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	3301      	adds	r3, #1
 8000b48:	b2da      	uxtb	r2, r3
 8000b4a:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <callback+0x21c>)
 8000b4c:	701a      	strb	r2, [r3, #0]
      break;
 8000b4e:	bf00      	nop
    }
    break;
 8000b50:	e036      	b.n	8000bc0 <callback+0x210>
  case 2:
    switch (y)
 8000b52:	79bb      	ldrb	r3, [r7, #6]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d002      	beq.n	8000b5e <callback+0x1ae>
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d013      	beq.n	8000b84 <callback+0x1d4>
      input[Length] = 9;
      sys[Length] = '*';
      Length++;
      break;
    }
    break;
 8000b5c:	e031      	b.n	8000bc2 <callback+0x212>
      input[Length] = 8;
 8000b5e:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <callback+0x21c>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	461a      	mov	r2, r3
 8000b64:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <callback+0x220>)
 8000b66:	2108      	movs	r1, #8
 8000b68:	5499      	strb	r1, [r3, r2]
      sys[Length] = '*';
 8000b6a:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <callback+0x21c>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <callback+0x224>)
 8000b72:	212a      	movs	r1, #42	; 0x2a
 8000b74:	5499      	strb	r1, [r3, r2]
      Length++;
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <callback+0x21c>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	b2da      	uxtb	r2, r3
 8000b7e:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <callback+0x21c>)
 8000b80:	701a      	strb	r2, [r3, #0]
      break;
 8000b82:	e012      	b.n	8000baa <callback+0x1fa>
      input[Length] = 9;
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <callback+0x21c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <callback+0x220>)
 8000b8c:	2109      	movs	r1, #9
 8000b8e:	5499      	strb	r1, [r3, r2]
      sys[Length] = '*';
 8000b90:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <callback+0x21c>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <callback+0x224>)
 8000b98:	212a      	movs	r1, #42	; 0x2a
 8000b9a:	5499      	strb	r1, [r3, r2]
      Length++;
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <callback+0x21c>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <callback+0x21c>)
 8000ba6:	701a      	strb	r2, [r3, #0]
      break;
 8000ba8:	bf00      	nop
    break;
 8000baa:	e00a      	b.n	8000bc2 <callback+0x212>
  case 3:
    switch (y)
 8000bac:	79bb      	ldrb	r3, [r7, #6]
 8000bae:	2b03      	cmp	r3, #3
 8000bb0:	d000      	beq.n	8000bb4 <callback+0x204>
    {
    case 3:
      verification();
      break;
    }
    break;
 8000bb2:	e006      	b.n	8000bc2 <callback+0x212>
      verification();
 8000bb4:	f000 f9ce 	bl	8000f54 <verification>
      break;
 8000bb8:	bf00      	nop
    break;
 8000bba:	e002      	b.n	8000bc2 <callback+0x212>
    break;
 8000bbc:	bf00      	nop
 8000bbe:	e000      	b.n	8000bc2 <callback+0x212>
    break;
 8000bc0:	bf00      	nop
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000496 	.word	0x20000496
 8000bd0:	20000594 	.word	0x20000594
 8000bd4:	20000498 	.word	0x20000498

08000bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bde:	f000 ff39 	bl	8001a54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be2:	f000 f8a9 	bl	8000d38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be6:	f7ff fe29 	bl	800083c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000bea:	f7ff fe75 	bl	80008d8 <MX_I2C1_Init>
  MX_RTC_Init();
 8000bee:	f000 fb75 	bl	80012dc <MX_RTC_Init>
  MX_TIM2_Init();
 8000bf2:	f000 fced 	bl	80015d0 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000bf6:	f000 fd61 	bl	80016bc <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000bfa:	f000 fe1d 	bl	8001838 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000bfe:	f000 fe45 	bl	800188c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  keypad_init(Pullup, 100, callback);
 8000c02:	4a40      	ldr	r2, [pc, #256]	; (8000d04 <main+0x12c>)
 8000c04:	2164      	movs	r1, #100	; 0x64
 8000c06:	2000      	movs	r0, #0
 8000c08:	f7ff fb02 	bl	8000210 <keypad_init>
  HAL_TIM_Base_Start_IT(&htim4);
 8000c0c:	483e      	ldr	r0, [pc, #248]	; (8000d08 <main+0x130>)
 8000c0e:	f003 f869 	bl	8003ce4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000c12:	2100      	movs	r1, #0
 8000c14:	483d      	ldr	r0, [pc, #244]	; (8000d0c <main+0x134>)
 8000c16:	f003 f90f 	bl	8003e38 <HAL_TIM_PWM_Start>
  __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, 8);
 8000c1a:	4b3c      	ldr	r3, [pc, #240]	; (8000d0c <main+0x134>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2208      	movs	r2, #8
 8000c20:	635a      	str	r2, [r3, #52]	; 0x34
  OLED_Init();
 8000c22:	f000 faf9 	bl	8001218 <OLED_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ///Menu_display();
   	  	 if (readSta)
 8000c26:	4b3a      	ldr	r3, [pc, #232]	; (8000d10 <main+0x138>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d01d      	beq.n	8000c6c <main+0x94>
	     {
	  		if(PS_GetImage()) {printf("no\r\n");}
 8000c30:	f7ff fbe4 	bl	80003fc <PS_GetImage>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d002      	beq.n	8000c40 <main+0x68>
 8000c3a:	4836      	ldr	r0, [pc, #216]	; (8000d14 <main+0x13c>)
 8000c3c:	f004 fc78 	bl	8005530 <puts>
	     	PS_GenChar(1);
 8000c40:	2001      	movs	r0, #1
 8000c42:	f7ff fc4f 	bl	80004e4 <PS_GenChar>
	     	PS_Search(1,0,15,&pageID,&score);
 8000c46:	4b34      	ldr	r3, [pc, #208]	; (8000d18 <main+0x140>)
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	4b34      	ldr	r3, [pc, #208]	; (8000d1c <main+0x144>)
 8000c4c:	220f      	movs	r2, #15
 8000c4e:	2100      	movs	r1, #0
 8000c50:	2001      	movs	r0, #1
 8000c52:	f7ff fce9 	bl	8000628 <PS_Search>
	     	if(score >=60)
 8000c56:	4b30      	ldr	r3, [pc, #192]	; (8000d18 <main+0x140>)
 8000c58:	881b      	ldrh	r3, [r3, #0]
 8000c5a:	2b3b      	cmp	r3, #59	; 0x3b
 8000c5c:	d903      	bls.n	8000c66 <main+0x8e>
	     	{
	     		flags = 1;
 8000c5e:	4b30      	ldr	r3, [pc, #192]	; (8000d20 <main+0x148>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	701a      	strb	r2, [r3, #0]
 8000c64:	e002      	b.n	8000c6c <main+0x94>
	     	}
	     	else
	     	{
	     		flags = 2;
 8000c66:	4b2e      	ldr	r3, [pc, #184]	; (8000d20 <main+0x148>)
 8000c68:	2202      	movs	r2, #2
 8000c6a:	701a      	strb	r2, [r3, #0]
	     	}
	     }


	    if (flags == 1)
 8000c6c:	4b2c      	ldr	r3, [pc, #176]	; (8000d20 <main+0x148>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d12b      	bne.n	8000ccc <main+0xf4>
	    {
	      rightdoing();
 8000c74:	f000 f923 	bl	8000ebe <rightdoing>
	      //Menu_display();
	      __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1,17);
 8000c78:	4b24      	ldr	r3, [pc, #144]	; (8000d0c <main+0x134>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2211      	movs	r2, #17
 8000c7e:	635a      	str	r2, [r3, #52]	; 0x34
	      myDelayMS(4000);
 8000c80:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000c84:	f04f 0100 	mov.w	r1, #0
 8000c88:	f7ff faa2 	bl	80001d0 <myDelayMS>
	      __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1,8);
 8000c8c:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <main+0x134>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2208      	movs	r2, #8
 8000c92:	635a      	str	r2, [r3, #52]	; 0x34
	      myDelayMS(1000);
 8000c94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c98:	f04f 0100 	mov.w	r1, #0
 8000c9c:	f7ff fa98 	bl	80001d0 <myDelayMS>
	      flags = 0;
 8000ca0:	4b1f      	ldr	r3, [pc, #124]	; (8000d20 <main+0x148>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	701a      	strb	r2, [r3, #0]
	      Length = 0;
 8000ca6:	4b1f      	ldr	r3, [pc, #124]	; (8000d24 <main+0x14c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]
	      memset(password, 0, sizeof(password));
 8000cac:	2214      	movs	r2, #20
 8000cae:	2100      	movs	r1, #0
 8000cb0:	481d      	ldr	r0, [pc, #116]	; (8000d28 <main+0x150>)
 8000cb2:	f004 fbd8 	bl	8005466 <memset>
	      memset(input, 0, sizeof(input));
 8000cb6:	2214      	movs	r2, #20
 8000cb8:	2100      	movs	r1, #0
 8000cba:	481c      	ldr	r0, [pc, #112]	; (8000d2c <main+0x154>)
 8000cbc:	f004 fbd3 	bl	8005466 <memset>
	      memcpy(sys, demo, 15);
 8000cc0:	220f      	movs	r2, #15
 8000cc2:	491b      	ldr	r1, [pc, #108]	; (8000d30 <main+0x158>)
 8000cc4:	481b      	ldr	r0, [pc, #108]	; (8000d34 <main+0x15c>)
 8000cc6:	f004 fbc3 	bl	8005450 <memcpy>
 8000cca:	e7ac      	b.n	8000c26 <main+0x4e>
	    }
	    else if(flags == 2)
 8000ccc:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <main+0x148>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d1a8      	bne.n	8000c26 <main+0x4e>
	    {
	      wrongdoing();
 8000cd4:	f000 f8a8 	bl	8000e28 <wrongdoing>
	      //Menu_display();
	      flags = 0;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <main+0x148>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
	      Length = 0;
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <main+0x14c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
	      memset(password, 0, sizeof(password));
 8000ce4:	2214      	movs	r2, #20
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	480f      	ldr	r0, [pc, #60]	; (8000d28 <main+0x150>)
 8000cea:	f004 fbbc 	bl	8005466 <memset>
	      memset(input, 0, sizeof(input));
 8000cee:	2214      	movs	r2, #20
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	480e      	ldr	r0, [pc, #56]	; (8000d2c <main+0x154>)
 8000cf4:	f004 fbb7 	bl	8005466 <memset>
	      memcpy(sys, demo, 15);
 8000cf8:	220f      	movs	r2, #15
 8000cfa:	490d      	ldr	r1, [pc, #52]	; (8000d30 <main+0x158>)
 8000cfc:	480d      	ldr	r0, [pc, #52]	; (8000d34 <main+0x15c>)
 8000cfe:	f004 fba7 	bl	8005450 <memcpy>
   	  	 if (readSta)
 8000d02:	e790      	b.n	8000c26 <main+0x4e>
 8000d04:	080009b1 	.word	0x080009b1
 8000d08:	200005c8 	.word	0x200005c8
 8000d0c:	20000610 	.word	0x20000610
 8000d10:	200004ac 	.word	0x200004ac
 8000d14:	08005d5c 	.word	0x08005d5c
 8000d18:	200005b0 	.word	0x200005b0
 8000d1c:	200005b2 	.word	0x200005b2
 8000d20:	20000497 	.word	0x20000497
 8000d24:	20000496 	.word	0x20000496
 8000d28:	20000580 	.word	0x20000580
 8000d2c:	20000594 	.word	0x20000594
 8000d30:	20000004 	.word	0x20000004
 8000d34:	20000498 	.word	0x20000498

08000d38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b094      	sub	sp, #80	; 0x50
 8000d3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d42:	2228      	movs	r2, #40	; 0x28
 8000d44:	2100      	movs	r1, #0
 8000d46:	4618      	mov	r0, r3
 8000d48:	f004 fb8d 	bl	8005466 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000d68:	2305      	movs	r3, #5
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d72:	2300      	movs	r3, #0
 8000d74:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d76:	2301      	movs	r3, #1
 8000d78:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d88:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d92:	4618      	mov	r0, r3
 8000d94:	f001 fe3a 	bl	8002a0c <HAL_RCC_OscConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000d9e:	f000 f965 	bl	800106c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da2:	230f      	movs	r3, #15
 8000da4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da6:	2302      	movs	r3, #2
 8000da8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000db2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	2102      	movs	r1, #2
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f002 f8a4 	bl	8002f0c <HAL_RCC_ClockConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000dca:	f000 f94f 	bl	800106c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000dd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dd6:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f002 fa32 	bl	8003244 <HAL_RCCEx_PeriphCLKConfig>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000de6:	f000 f941 	bl	800106c <Error_Handler>
  }
}
 8000dea:	bf00      	nop
 8000dec:	3750      	adds	r7, #80	; 0x50
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if (htim == (&htim4))
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d107      	bne.n	8000e14 <HAL_TIM_PeriodElapsedCallback+0x20>
  {
    //keypad_scan();
	     readSta = HAL_GPIO_ReadPin(AS608_GPIO_Port,AS608_Pin);
 8000e04:	2102      	movs	r1, #2
 8000e06:	4806      	ldr	r0, [pc, #24]	; (8000e20 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000e08:	f001 f986 	bl	8002118 <HAL_GPIO_ReadPin>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	461a      	mov	r2, r3
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000e12:	701a      	strb	r2, [r3, #0]

  }
}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	200005c8 	.word	0x200005c8
 8000e20:	40010800 	.word	0x40010800
 8000e24:	200004ac 	.word	0x200004ac

08000e28 <wrongdoing>:
//  OLED_ShowNum(110, 3, GetTime.Seconds, 2, 12);
//  OLED_ShowString(6, 5, "Enter Password", 12);
//  OLED_ShowString(0, 7, sys, 12);
}
void wrongdoing()
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  OLED_Clear();
 8000e2c:	f000 f97d 	bl	800112a <OLED_Clear>
  OLED_ShowCHinese(0, 0, 0);   //??
 8000e30:	2200      	movs	r2, #0
 8000e32:	2100      	movs	r1, #0
 8000e34:	2000      	movs	r0, #0
 8000e36:	f000 f9a1 	bl	800117c <OLED_ShowCHinese>
  OLED_ShowCHinese(18, 0, 1);  //??
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2012      	movs	r0, #18
 8000e40:	f000 f99c 	bl	800117c <OLED_ShowCHinese>
  OLED_ShowCHinese(36, 0, 2);  //??
 8000e44:	2202      	movs	r2, #2
 8000e46:	2100      	movs	r1, #0
 8000e48:	2024      	movs	r0, #36	; 0x24
 8000e4a:	f000 f997 	bl	800117c <OLED_ShowCHinese>
  OLED_ShowCHinese(54, 0, 3);  //??
 8000e4e:	2203      	movs	r2, #3
 8000e50:	2100      	movs	r1, #0
 8000e52:	2036      	movs	r0, #54	; 0x36
 8000e54:	f000 f992 	bl	800117c <OLED_ShowCHinese>
  OLED_ShowCHinese(72, 0, 4);  //??
 8000e58:	2204      	movs	r2, #4
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2048      	movs	r0, #72	; 0x48
 8000e5e:	f000 f98d 	bl	800117c <OLED_ShowCHinese>
  OLED_ShowCHinese(90, 0, 5);  //??
 8000e62:	2205      	movs	r2, #5
 8000e64:	2100      	movs	r1, #0
 8000e66:	205a      	movs	r0, #90	; 0x5a
 8000e68:	f000 f988 	bl	800117c <OLED_ShowCHinese>
  OLED_ShowCHinese(108, 0, 6); //??year
 8000e6c:	2206      	movs	r2, #6
 8000e6e:	2100      	movs	r1, #0
 8000e70:	206c      	movs	r0, #108	; 0x6c
 8000e72:	f000 f983 	bl	800117c <OLED_ShowCHinese>
  OLED_ShowCHinese(24, 4, 7);
 8000e76:	2207      	movs	r2, #7
 8000e78:	2104      	movs	r1, #4
 8000e7a:	2018      	movs	r0, #24
 8000e7c:	f000 f97e 	bl	800117c <OLED_ShowCHinese>
  OLED_ShowCHinese(42, 4, 8);
 8000e80:	2208      	movs	r2, #8
 8000e82:	2104      	movs	r1, #4
 8000e84:	202a      	movs	r0, #42	; 0x2a
 8000e86:	f000 f979 	bl	800117c <OLED_ShowCHinese>
  OLED_ShowCHinese(60, 4, 9);
 8000e8a:	2209      	movs	r2, #9
 8000e8c:	2104      	movs	r1, #4
 8000e8e:	203c      	movs	r0, #60	; 0x3c
 8000e90:	f000 f974 	bl	800117c <OLED_ShowCHinese>
  OLED_ShowCHinese(78, 4, 10);
 8000e94:	220a      	movs	r2, #10
 8000e96:	2104      	movs	r1, #4
 8000e98:	204e      	movs	r0, #78	; 0x4e
 8000e9a:	f000 f96f 	bl	800117c <OLED_ShowCHinese>
  myDelayMS(800);
 8000e9e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000ea2:	f04f 0100 	mov.w	r1, #0
 8000ea6:	f7ff f993 	bl	80001d0 <myDelayMS>
  OLED_Clear();
 8000eaa:	f000 f93e 	bl	800112a <OLED_Clear>
  myDelayMS(20);
 8000eae:	f04f 0014 	mov.w	r0, #20
 8000eb2:	f04f 0100 	mov.w	r1, #0
 8000eb6:	f7ff f98b 	bl	80001d0 <myDelayMS>
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <rightdoing>:

void rightdoing()
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	af00      	add	r7, sp, #0
  OLED_Clear();
 8000ec2:	f000 f932 	bl	800112a <OLED_Clear>
  OLED_ShowCHinese(0, 0, 0);   //??
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2100      	movs	r1, #0
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f000 f956 	bl	800117c <OLED_ShowCHinese>
  OLED_ShowCHinese(18, 0, 1);  //??
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	2012      	movs	r0, #18
 8000ed6:	f000 f951 	bl	800117c <OLED_ShowCHinese>
  OLED_ShowCHinese(36, 0, 2);  //??
 8000eda:	2202      	movs	r2, #2
 8000edc:	2100      	movs	r1, #0
 8000ede:	2024      	movs	r0, #36	; 0x24
 8000ee0:	f000 f94c 	bl	800117c <OLED_ShowCHinese>
  OLED_ShowCHinese(54, 0, 3);  //??
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	2036      	movs	r0, #54	; 0x36
 8000eea:	f000 f947 	bl	800117c <OLED_ShowCHinese>
  OLED_ShowCHinese(72, 0, 4);  //??
 8000eee:	2204      	movs	r2, #4
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	2048      	movs	r0, #72	; 0x48
 8000ef4:	f000 f942 	bl	800117c <OLED_ShowCHinese>
  OLED_ShowCHinese(90, 0, 5);  //??
 8000ef8:	2205      	movs	r2, #5
 8000efa:	2100      	movs	r1, #0
 8000efc:	205a      	movs	r0, #90	; 0x5a
 8000efe:	f000 f93d 	bl	800117c <OLED_ShowCHinese>
  OLED_ShowCHinese(108, 0, 6); //??year
 8000f02:	2206      	movs	r2, #6
 8000f04:	2100      	movs	r1, #0
 8000f06:	206c      	movs	r0, #108	; 0x6c
 8000f08:	f000 f938 	bl	800117c <OLED_ShowCHinese>
  OLED_ShowCHinese(24, 4, 11);
 8000f0c:	220b      	movs	r2, #11
 8000f0e:	2104      	movs	r1, #4
 8000f10:	2018      	movs	r0, #24
 8000f12:	f000 f933 	bl	800117c <OLED_ShowCHinese>
  OLED_ShowCHinese(42, 4, 12);
 8000f16:	220c      	movs	r2, #12
 8000f18:	2104      	movs	r1, #4
 8000f1a:	202a      	movs	r0, #42	; 0x2a
 8000f1c:	f000 f92e 	bl	800117c <OLED_ShowCHinese>
  OLED_ShowCHinese(60, 4, 13);
 8000f20:	220d      	movs	r2, #13
 8000f22:	2104      	movs	r1, #4
 8000f24:	203c      	movs	r0, #60	; 0x3c
 8000f26:	f000 f929 	bl	800117c <OLED_ShowCHinese>
  OLED_ShowCHinese(78, 4, 14);
 8000f2a:	220e      	movs	r2, #14
 8000f2c:	2104      	movs	r1, #4
 8000f2e:	204e      	movs	r0, #78	; 0x4e
 8000f30:	f000 f924 	bl	800117c <OLED_ShowCHinese>
  myDelayMS(1000);
 8000f34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f38:	f04f 0100 	mov.w	r1, #0
 8000f3c:	f7ff f948 	bl	80001d0 <myDelayMS>
  OLED_Clear();
 8000f40:	f000 f8f3 	bl	800112a <OLED_Clear>
  myDelayMS(20);
 8000f44:	f04f 0014 	mov.w	r0, #20
 8000f48:	f04f 0100 	mov.w	r1, #0
 8000f4c:	f7ff f940 	bl	80001d0 <myDelayMS>
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <verification>:
void verification()
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
  if (Length != 8)
 8000f5a:	4b33      	ldr	r3, [pc, #204]	; (8001028 <verification+0xd4>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b08      	cmp	r3, #8
 8000f60:	d002      	beq.n	8000f68 <verification+0x14>
  {
    flags = 2;
 8000f62:	4b32      	ldr	r3, [pc, #200]	; (800102c <verification+0xd8>)
 8000f64:	2202      	movs	r2, #2
 8000f66:	701a      	strb	r2, [r3, #0]
  }
  password[0] = GetTime.Hours / 10;
 8000f68:	4b31      	ldr	r3, [pc, #196]	; (8001030 <verification+0xdc>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4a31      	ldr	r2, [pc, #196]	; (8001034 <verification+0xe0>)
 8000f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f72:	08db      	lsrs	r3, r3, #3
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4b30      	ldr	r3, [pc, #192]	; (8001038 <verification+0xe4>)
 8000f78:	701a      	strb	r2, [r3, #0]
  password[1] = GetTime.Hours % 10;
 8000f7a:	4b2d      	ldr	r3, [pc, #180]	; (8001030 <verification+0xdc>)
 8000f7c:	781a      	ldrb	r2, [r3, #0]
 8000f7e:	4b2d      	ldr	r3, [pc, #180]	; (8001034 <verification+0xe0>)
 8000f80:	fba3 1302 	umull	r1, r3, r3, r2
 8000f84:	08d9      	lsrs	r1, r3, #3
 8000f86:	460b      	mov	r3, r1
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4b29      	ldr	r3, [pc, #164]	; (8001038 <verification+0xe4>)
 8000f94:	705a      	strb	r2, [r3, #1]
  password[2] = GetTime.Minutes / 10;
 8000f96:	4b26      	ldr	r3, [pc, #152]	; (8001030 <verification+0xdc>)
 8000f98:	785b      	ldrb	r3, [r3, #1]
 8000f9a:	4a26      	ldr	r2, [pc, #152]	; (8001034 <verification+0xe0>)
 8000f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa0:	08db      	lsrs	r3, r3, #3
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	4b24      	ldr	r3, [pc, #144]	; (8001038 <verification+0xe4>)
 8000fa6:	709a      	strb	r2, [r3, #2]
  password[3] = GetTime.Minutes % 10;
 8000fa8:	4b21      	ldr	r3, [pc, #132]	; (8001030 <verification+0xdc>)
 8000faa:	785a      	ldrb	r2, [r3, #1]
 8000fac:	4b21      	ldr	r3, [pc, #132]	; (8001034 <verification+0xe0>)
 8000fae:	fba3 1302 	umull	r1, r3, r3, r2
 8000fb2:	08d9      	lsrs	r1, r3, #3
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	440b      	add	r3, r1
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <verification+0xe4>)
 8000fc2:	70da      	strb	r2, [r3, #3]
  password[4] = 6;
 8000fc4:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <verification+0xe4>)
 8000fc6:	2206      	movs	r2, #6
 8000fc8:	711a      	strb	r2, [r3, #4]
  password[5] = 0;
 8000fca:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <verification+0xe4>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	715a      	strb	r2, [r3, #5]
  password[6] = 1;
 8000fd0:	4b19      	ldr	r3, [pc, #100]	; (8001038 <verification+0xe4>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	719a      	strb	r2, [r3, #6]
  password[7] = 1;
 8000fd6:	4b18      	ldr	r3, [pc, #96]	; (8001038 <verification+0xe4>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	71da      	strb	r2, [r3, #7]
  for (int i = 0; i < Length; i++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	e00f      	b.n	8001002 <verification+0xae>
  {
    if (password[i] != input[i])
 8000fe2:	4a15      	ldr	r2, [pc, #84]	; (8001038 <verification+0xe4>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	781a      	ldrb	r2, [r3, #0]
 8000fea:	4914      	ldr	r1, [pc, #80]	; (800103c <verification+0xe8>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	440b      	add	r3, r1
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d002      	beq.n	8000ffc <verification+0xa8>
    {
      flags = 2;
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	; (800102c <verification+0xd8>)
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < Length; i++)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3301      	adds	r3, #1
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <verification+0xd4>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4293      	cmp	r3, r2
 800100c:	dbe9      	blt.n	8000fe2 <verification+0x8e>
    }
  }
  if (flags != 2)
 800100e:	4b07      	ldr	r3, [pc, #28]	; (800102c <verification+0xd8>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b02      	cmp	r3, #2
 8001014:	d002      	beq.n	800101c <verification+0xc8>
  {
    flags = 1;
 8001016:	4b05      	ldr	r3, [pc, #20]	; (800102c <verification+0xd8>)
 8001018:	2201      	movs	r2, #1
 800101a:	701a      	strb	r2, [r3, #0]
  }
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000496 	.word	0x20000496
 800102c:	20000497 	.word	0x20000497
 8001030:	200005ac 	.word	0x200005ac
 8001034:	cccccccd 	.word	0xcccccccd
 8001038:	20000580 	.word	0x20000580
 800103c:	20000594 	.word	0x20000594

08001040 <_write>:

int _write(int fd, char *ptr, int len)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, 0xFFFF);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	b29a      	uxth	r2, r3
 8001050:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001054:	68b9      	ldr	r1, [r7, #8]
 8001056:	4804      	ldr	r0, [pc, #16]	; (8001068 <_write+0x28>)
 8001058:	f003 fd93 	bl	8004b82 <HAL_UART_Transmit>
  return len;
 800105c:	687b      	ldr	r3, [r7, #4]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000658 	.word	0x20000658

0800106c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001070:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001072:	e7fe      	b.n	8001072 <Error_Handler+0x6>

08001074 <OLED_Write_Cmd>:
#include "oled.h"
#include "oledfont.h"


static void OLED_Write_Cmd(uint8_t cmd)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af02      	add	r7, sp, #8
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2];
	buf[0] = 0x00;
 800107e:	2300      	movs	r3, #0
 8001080:	733b      	strb	r3, [r7, #12]
	buf[1] = cmd;
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	737b      	strb	r3, [r7, #13]
	

	HAL_I2C_Master_Transmit(&hi2c1, 0x78, buf, 2, 0xFFFF);
 8001086:	f107 020c 	add.w	r2, r7, #12
 800108a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2302      	movs	r3, #2
 8001092:	2178      	movs	r1, #120	; 0x78
 8001094:	4803      	ldr	r0, [pc, #12]	; (80010a4 <OLED_Write_Cmd+0x30>)
 8001096:	f001 f9a7 	bl	80023e8 <HAL_I2C_Master_Transmit>
}
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000052c 	.word	0x2000052c

080010a8 <OLED_Write_Dat>:

static void OLED_Write_Dat(uint8_t dat)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2];
	buf[0] = 0x40;
 80010b2:	2340      	movs	r3, #64	; 0x40
 80010b4:	733b      	strb	r3, [r7, #12]
	buf[1] = dat;
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	737b      	strb	r3, [r7, #13]
	
	HAL_I2C_Master_Transmit(&hi2c1, 0x78, buf, 2, 0xFFFF);
 80010ba:	f107 020c 	add.w	r2, r7, #12
 80010be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2302      	movs	r3, #2
 80010c6:	2178      	movs	r1, #120	; 0x78
 80010c8:	4803      	ldr	r0, [pc, #12]	; (80010d8 <OLED_Write_Dat+0x30>)
 80010ca:	f001 f98d 	bl	80023e8 <HAL_I2C_Master_Transmit>
}
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	2000052c 	.word	0x2000052c

080010dc <OLED_Set_Pos>:


void OLED_Set_Pos(uint8_t x, uint8_t y)
{ 	
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	460a      	mov	r2, r1
 80010e6:	71fb      	strb	r3, [r7, #7]
 80010e8:	4613      	mov	r3, r2
 80010ea:	71bb      	strb	r3, [r7, #6]
	OLED_Write_Cmd(0xb0+y);
 80010ec:	79bb      	ldrb	r3, [r7, #6]
 80010ee:	3b50      	subs	r3, #80	; 0x50
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ffbe 	bl	8001074 <OLED_Write_Cmd>
	OLED_Write_Cmd(((x&0xf0)>>4)|0x10);
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	091b      	lsrs	r3, r3, #4
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	f043 0310 	orr.w	r3, r3, #16
 8001102:	b2db      	uxtb	r3, r3
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ffb5 	bl	8001074 <OLED_Write_Cmd>
	OLED_Write_Cmd((x&0x0f)|0x01);
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	f003 030e 	and.w	r3, r3, #14
 8001112:	b25b      	sxtb	r3, r3
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	b25b      	sxtb	r3, r3
 800111a:	b2db      	uxtb	r3, r3
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ffa9 	bl	8001074 <OLED_Write_Cmd>
}   	  
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <OLED_Clear>:
	OLED_Write_Cmd(0X10);
	OLED_Write_Cmd(0XAE);
}		   			 

void OLED_Clear(void)
{  
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8001130:	2300      	movs	r3, #0
 8001132:	71fb      	strb	r3, [r7, #7]
 8001134:	e01b      	b.n	800116e <OLED_Clear+0x44>
	{  
		OLED_Write_Cmd(0xb0+i);
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	3b50      	subs	r3, #80	; 0x50
 800113a:	b2db      	uxtb	r3, r3
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff99 	bl	8001074 <OLED_Write_Cmd>
		OLED_Write_Cmd(0x00);
 8001142:	2000      	movs	r0, #0
 8001144:	f7ff ff96 	bl	8001074 <OLED_Write_Cmd>
		OLED_Write_Cmd(0x10);
 8001148:	2010      	movs	r0, #16
 800114a:	f7ff ff93 	bl	8001074 <OLED_Write_Cmd>
		for(n=0;n<128;n++)
 800114e:	2300      	movs	r3, #0
 8001150:	71bb      	strb	r3, [r7, #6]
 8001152:	e005      	b.n	8001160 <OLED_Clear+0x36>
		{
			OLED_Write_Dat(0);
 8001154:	2000      	movs	r0, #0
 8001156:	f7ff ffa7 	bl	80010a8 <OLED_Write_Dat>
		for(n=0;n<128;n++)
 800115a:	79bb      	ldrb	r3, [r7, #6]
 800115c:	3301      	adds	r3, #1
 800115e:	71bb      	strb	r3, [r7, #6]
 8001160:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001164:	2b00      	cmp	r3, #0
 8001166:	daf5      	bge.n	8001154 <OLED_Clear+0x2a>
	for(i=0;i<8;i++)  
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	3301      	adds	r3, #1
 800116c:	71fb      	strb	r3, [r7, #7]
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	2b07      	cmp	r3, #7
 8001172:	d9e0      	bls.n	8001136 <OLED_Clear+0xc>
		}			
	}
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <OLED_ShowCHinese>:
			j++;
	}
}

void OLED_ShowCHinese(uint8_t x,uint8_t y,uint8_t no)
{      			    
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
 8001186:	460b      	mov	r3, r1
 8001188:	71bb      	strb	r3, [r7, #6]
 800118a:	4613      	mov	r3, r2
 800118c:	717b      	strb	r3, [r7, #5]
	uint8_t t,adder=0;
 800118e:	2300      	movs	r3, #0
 8001190:	73bb      	strb	r3, [r7, #14]
	OLED_Set_Pos(x,y);	
 8001192:	79ba      	ldrb	r2, [r7, #6]
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	4611      	mov	r1, r2
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff9f 	bl	80010dc <OLED_Set_Pos>
    for(t=0;t<16;t++)
 800119e:	2300      	movs	r3, #0
 80011a0:	73fb      	strb	r3, [r7, #15]
 80011a2:	e010      	b.n	80011c6 <OLED_ShowCHinese+0x4a>
		{
				OLED_Write_Dat(Hzk[2*no][t]);
 80011a4:	797b      	ldrb	r3, [r7, #5]
 80011a6:	005a      	lsls	r2, r3, #1
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	491a      	ldr	r1, [pc, #104]	; (8001214 <OLED_ShowCHinese+0x98>)
 80011ac:	0152      	lsls	r2, r2, #5
 80011ae:	440a      	add	r2, r1
 80011b0:	4413      	add	r3, r2
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff77 	bl	80010a8 <OLED_Write_Dat>
				adder+=1;
 80011ba:	7bbb      	ldrb	r3, [r7, #14]
 80011bc:	3301      	adds	r3, #1
 80011be:	73bb      	strb	r3, [r7, #14]
    for(t=0;t<16;t++)
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
 80011c2:	3301      	adds	r3, #1
 80011c4:	73fb      	strb	r3, [r7, #15]
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
 80011c8:	2b0f      	cmp	r3, #15
 80011ca:	d9eb      	bls.n	80011a4 <OLED_ShowCHinese+0x28>
     }	
		OLED_Set_Pos(x,y+1);	
 80011cc:	79bb      	ldrb	r3, [r7, #6]
 80011ce:	3301      	adds	r3, #1
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	4611      	mov	r1, r2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ff80 	bl	80010dc <OLED_Set_Pos>
    for(t=0;t<16;t++)
 80011dc:	2300      	movs	r3, #0
 80011de:	73fb      	strb	r3, [r7, #15]
 80011e0:	e011      	b.n	8001206 <OLED_ShowCHinese+0x8a>
			{	
				OLED_Write_Dat(Hzk[2*no+1][t]);
 80011e2:	797b      	ldrb	r3, [r7, #5]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	1c5a      	adds	r2, r3, #1
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	490a      	ldr	r1, [pc, #40]	; (8001214 <OLED_ShowCHinese+0x98>)
 80011ec:	0152      	lsls	r2, r2, #5
 80011ee:	440a      	add	r2, r1
 80011f0:	4413      	add	r3, r2
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff57 	bl	80010a8 <OLED_Write_Dat>
				adder+=1;
 80011fa:	7bbb      	ldrb	r3, [r7, #14]
 80011fc:	3301      	adds	r3, #1
 80011fe:	73bb      	strb	r3, [r7, #14]
    for(t=0;t<16;t++)
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	3301      	adds	r3, #1
 8001204:	73fb      	strb	r3, [r7, #15]
 8001206:	7bfb      	ldrb	r3, [r7, #15]
 8001208:	2b0f      	cmp	r3, #15
 800120a:	d9ea      	bls.n	80011e2 <OLED_ShowCHinese+0x66>
      }					
}
 800120c:	bf00      	nop
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000018 	.word	0x20000018

08001218 <OLED_Init>:
	}
} 


void OLED_Init(void)
{ 	
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0

	HAL_Delay(500);
 800121c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001220:	f000 fc7a 	bl	8001b18 <HAL_Delay>

	OLED_Write_Cmd(0xAE);//--display off
 8001224:	20ae      	movs	r0, #174	; 0xae
 8001226:	f7ff ff25 	bl	8001074 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x00);//---set low column address
 800122a:	2000      	movs	r0, #0
 800122c:	f7ff ff22 	bl	8001074 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x10);//---set high column address
 8001230:	2010      	movs	r0, #16
 8001232:	f7ff ff1f 	bl	8001074 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x40);//--set start line address  
 8001236:	2040      	movs	r0, #64	; 0x40
 8001238:	f7ff ff1c 	bl	8001074 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x81); // contract control
 800123c:	2081      	movs	r0, #129	; 0x81
 800123e:	f7ff ff19 	bl	8001074 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xFF);//--128   
 8001242:	20ff      	movs	r0, #255	; 0xff
 8001244:	f7ff ff16 	bl	8001074 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xA1);//set segment remap 
 8001248:	20a1      	movs	r0, #161	; 0xa1
 800124a:	f7ff ff13 	bl	8001074 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xC8);//Com scan direction
 800124e:	20c8      	movs	r0, #200	; 0xc8
 8001250:	f7ff ff10 	bl	8001074 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xA6);//--normal / reverse
 8001254:	20a6      	movs	r0, #166	; 0xa6
 8001256:	f7ff ff0d 	bl	8001074 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xA8);//--set multiplex ratio(1 to 64)
 800125a:	20a8      	movs	r0, #168	; 0xa8
 800125c:	f7ff ff0a 	bl	8001074 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x3F);//--1/32 duty
 8001260:	203f      	movs	r0, #63	; 0x3f
 8001262:	f7ff ff07 	bl	8001074 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xD3);//-set display offset
 8001266:	20d3      	movs	r0, #211	; 0xd3
 8001268:	f7ff ff04 	bl	8001074 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x00);//
 800126c:	2000      	movs	r0, #0
 800126e:	f7ff ff01 	bl	8001074 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xD5);//set osc division
 8001272:	20d5      	movs	r0, #213	; 0xd5
 8001274:	f7ff fefe 	bl	8001074 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x80);
 8001278:	2080      	movs	r0, #128	; 0x80
 800127a:	f7ff fefb 	bl	8001074 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xD9);//Set Pre-Charge Period
 800127e:	20d9      	movs	r0, #217	; 0xd9
 8001280:	f7ff fef8 	bl	8001074 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xF1);//
 8001284:	20f1      	movs	r0, #241	; 0xf1
 8001286:	f7ff fef5 	bl	8001074 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xDA);//set com pin configuartion
 800128a:	20da      	movs	r0, #218	; 0xda
 800128c:	f7ff fef2 	bl	8001074 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x12);//
 8001290:	2012      	movs	r0, #18
 8001292:	f7ff feef 	bl	8001074 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xDB);//set Vcomh
 8001296:	20db      	movs	r0, #219	; 0xdb
 8001298:	f7ff feec 	bl	8001074 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x40);//
 800129c:	2040      	movs	r0, #64	; 0x40
 800129e:	f7ff fee9 	bl	8001074 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x20);
 80012a2:	2020      	movs	r0, #32
 80012a4:	f7ff fee6 	bl	8001074 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x02);
 80012a8:	2002      	movs	r0, #2
 80012aa:	f7ff fee3 	bl	8001074 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x8D);//set charge pump enable
 80012ae:	208d      	movs	r0, #141	; 0x8d
 80012b0:	f7ff fee0 	bl	8001074 <OLED_Write_Cmd>
	OLED_Write_Cmd(0x14);//
 80012b4:	2014      	movs	r0, #20
 80012b6:	f7ff fedd 	bl	8001074 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xA4);
 80012ba:	20a4      	movs	r0, #164	; 0xa4
 80012bc:	f7ff feda 	bl	8001074 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xA6);
 80012c0:	20a6      	movs	r0, #166	; 0xa6
 80012c2:	f7ff fed7 	bl	8001074 <OLED_Write_Cmd>
	OLED_Write_Cmd(0xAF);//--turn on oled panel
 80012c6:	20af      	movs	r0, #175	; 0xaf
 80012c8:	f7ff fed4 	bl	8001074 <OLED_Write_Cmd>
	
	OLED_Clear();
 80012cc:	f7ff ff2d 	bl	800112a <OLED_Clear>
	OLED_Set_Pos(0,0);
 80012d0:	2100      	movs	r1, #0
 80012d2:	2000      	movs	r0, #0
 80012d4:	f7ff ff02 	bl	80010dc <OLED_Set_Pos>
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}

080012dc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	2100      	movs	r1, #0
 80012e6:	460a      	mov	r2, r1
 80012e8:	801a      	strh	r2, [r3, #0]
 80012ea:	460a      	mov	r2, r1
 80012ec:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80012ee:	2300      	movs	r3, #0
 80012f0:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012f2:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <MX_RTC_Init+0x8c>)
 80012f4:	4a1d      	ldr	r2, [pc, #116]	; (800136c <MX_RTC_Init+0x90>)
 80012f6:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80012f8:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <MX_RTC_Init+0x8c>)
 80012fa:	f04f 32ff 	mov.w	r2, #4294967295
 80012fe:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001300:	4b19      	ldr	r3, [pc, #100]	; (8001368 <MX_RTC_Init+0x8c>)
 8001302:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001306:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001308:	4817      	ldr	r0, [pc, #92]	; (8001368 <MX_RTC_Init+0x8c>)
 800130a:	f002 f90d 	bl	8003528 <HAL_RTC_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8001314:	f7ff feaa 	bl	800106c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x21;
 8001318:	2321      	movs	r3, #33	; 0x21
 800131a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800131c:	2300      	movs	r3, #0
 800131e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001320:	2300      	movs	r3, #0
 8001322:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	2201      	movs	r2, #1
 8001328:	4619      	mov	r1, r3
 800132a:	480f      	ldr	r0, [pc, #60]	; (8001368 <MX_RTC_Init+0x8c>)
 800132c:	f002 f992 	bl	8003654 <HAL_RTC_SetTime>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8001336:	f7ff fe99 	bl	800106c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_SUNDAY;
 800133a:	2300      	movs	r3, #0
 800133c:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_MARCH;
 800133e:	2303      	movs	r3, #3
 8001340:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x7;
 8001342:	2307      	movs	r3, #7
 8001344:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8001346:	2300      	movs	r3, #0
 8001348:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800134a:	463b      	mov	r3, r7
 800134c:	2201      	movs	r2, #1
 800134e:	4619      	mov	r1, r3
 8001350:	4805      	ldr	r0, [pc, #20]	; (8001368 <MX_RTC_Init+0x8c>)
 8001352:	f002 fa17 	bl	8003784 <HAL_RTC_SetDate>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 800135c:	f7ff fe86 	bl	800106c <Error_Handler>
  }

}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	200005b4 	.word	0x200005b4
 800136c:	40002800 	.word	0x40002800

08001370 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a0b      	ldr	r2, [pc, #44]	; (80013ac <HAL_RTC_MspInit+0x3c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d110      	bne.n	80013a4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001382:	f001 fb37 	bl	80029f4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001386:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <HAL_RTC_MspInit+0x40>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	4a09      	ldr	r2, [pc, #36]	; (80013b0 <HAL_RTC_MspInit+0x40>)
 800138c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001390:	61d3      	str	r3, [r2, #28]
 8001392:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <HAL_RTC_MspInit+0x40>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800139e:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <HAL_RTC_MspInit+0x44>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80013a4:	bf00      	nop
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40002800 	.word	0x40002800
 80013b0:	40021000 	.word	0x40021000
 80013b4:	4242043c 	.word	0x4242043c

080013b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <HAL_MspInit+0x5c>)
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	4a14      	ldr	r2, [pc, #80]	; (8001414 <HAL_MspInit+0x5c>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6193      	str	r3, [r2, #24]
 80013ca:	4b12      	ldr	r3, [pc, #72]	; (8001414 <HAL_MspInit+0x5c>)
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d6:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <HAL_MspInit+0x5c>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	4a0e      	ldr	r2, [pc, #56]	; (8001414 <HAL_MspInit+0x5c>)
 80013dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e0:	61d3      	str	r3, [r2, #28]
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <HAL_MspInit+0x5c>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <HAL_MspInit+0x60>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	4a04      	ldr	r2, [pc, #16]	; (8001418 <HAL_MspInit+0x60>)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr
 8001414:	40021000 	.word	0x40021000
 8001418:	40010000 	.word	0x40010000

0800141c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <NMI_Handler+0x4>

08001422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <HardFault_Handler+0x4>

08001428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <MemManage_Handler+0x4>

0800142e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001432:	e7fe      	b.n	8001432 <BusFault_Handler+0x4>

08001434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <UsageFault_Handler+0x4>

0800143a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr

08001446 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr

08001452 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr

0800145e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001462:	f000 fb3d 	bl	8001ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001470:	4802      	ldr	r0, [pc, #8]	; (800147c <TIM2_IRQHandler+0x10>)
 8001472:	f002 fd83 	bl	8003f7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000610 	.word	0x20000610

08001480 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001484:	4802      	ldr	r0, [pc, #8]	; (8001490 <TIM4_IRQHandler+0x10>)
 8001486:	f002 fd79 	bl	8003f7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	200005c8 	.word	0x200005c8

08001494 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001498:	4802      	ldr	r0, [pc, #8]	; (80014a4 <USART1_IRQHandler+0x10>)
 800149a:	f003 fca3 	bl	8004de4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000658 	.word	0x20000658

080014a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014ac:	4802      	ldr	r0, [pc, #8]	; (80014b8 <USART2_IRQHandler+0x10>)
 80014ae:	f003 fc99 	bl	8004de4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000698 	.word	0x20000698

080014bc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	e00a      	b.n	80014e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014ce:	f3af 8000 	nop.w
 80014d2:	4601      	mov	r1, r0
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	1c5a      	adds	r2, r3, #1
 80014d8:	60ba      	str	r2, [r7, #8]
 80014da:	b2ca      	uxtb	r2, r1
 80014dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	3301      	adds	r3, #1
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	dbf0      	blt.n	80014ce <_read+0x12>
	}

return len;
 80014ec:	687b      	ldr	r3, [r7, #4]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
	return -1;
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr

0800150c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800151c:	605a      	str	r2, [r3, #4]
	return 0;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr

0800152a <_isatty>:

int _isatty(int file)
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
	return 1;
 8001532:	2301      	movs	r3, #1
}
 8001534:	4618      	mov	r0, r3
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr

0800153e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800153e:	b480      	push	{r7}
 8001540:	b085      	sub	sp, #20
 8001542:	af00      	add	r7, sp, #0
 8001544:	60f8      	str	r0, [r7, #12]
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	607a      	str	r2, [r7, #4]
	return 0;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr
	...

08001558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001560:	4a14      	ldr	r2, [pc, #80]	; (80015b4 <_sbrk+0x5c>)
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <_sbrk+0x60>)
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800156c:	4b13      	ldr	r3, [pc, #76]	; (80015bc <_sbrk+0x64>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d102      	bne.n	800157a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001574:	4b11      	ldr	r3, [pc, #68]	; (80015bc <_sbrk+0x64>)
 8001576:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <_sbrk+0x68>)
 8001578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <_sbrk+0x64>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	429a      	cmp	r2, r3
 8001586:	d207      	bcs.n	8001598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001588:	f003 ff38 	bl	80053fc <__errno>
 800158c:	4602      	mov	r2, r0
 800158e:	230c      	movs	r3, #12
 8001590:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001592:	f04f 33ff 	mov.w	r3, #4294967295
 8001596:	e009      	b.n	80015ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <_sbrk+0x64>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800159e:	4b07      	ldr	r3, [pc, #28]	; (80015bc <_sbrk+0x64>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	4a05      	ldr	r2, [pc, #20]	; (80015bc <_sbrk+0x64>)
 80015a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015aa:	68fb      	ldr	r3, [r7, #12]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20005000 	.word	0x20005000
 80015b8:	00000400 	.word	0x00000400
 80015bc:	200004b0 	.word	0x200004b0
 80015c0:	200006e0 	.word	0x200006e0

080015c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr

080015d0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08e      	sub	sp, #56	; 0x38
 80015d4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e4:	f107 0320 	add.w	r3, r7, #32
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
 80015fc:	615a      	str	r2, [r3, #20]
 80015fe:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8001600:	4b2d      	ldr	r3, [pc, #180]	; (80016b8 <MX_TIM2_Init+0xe8>)
 8001602:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001606:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8001608:	4b2b      	ldr	r3, [pc, #172]	; (80016b8 <MX_TIM2_Init+0xe8>)
 800160a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800160e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001610:	4b29      	ldr	r3, [pc, #164]	; (80016b8 <MX_TIM2_Init+0xe8>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 199;
 8001616:	4b28      	ldr	r3, [pc, #160]	; (80016b8 <MX_TIM2_Init+0xe8>)
 8001618:	22c7      	movs	r2, #199	; 0xc7
 800161a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161c:	4b26      	ldr	r3, [pc, #152]	; (80016b8 <MX_TIM2_Init+0xe8>)
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001622:	4b25      	ldr	r3, [pc, #148]	; (80016b8 <MX_TIM2_Init+0xe8>)
 8001624:	2280      	movs	r2, #128	; 0x80
 8001626:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001628:	4823      	ldr	r0, [pc, #140]	; (80016b8 <MX_TIM2_Init+0xe8>)
 800162a:	f002 fb0b 	bl	8003c44 <HAL_TIM_Base_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001634:	f7ff fd1a 	bl	800106c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800163e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001642:	4619      	mov	r1, r3
 8001644:	481c      	ldr	r0, [pc, #112]	; (80016b8 <MX_TIM2_Init+0xe8>)
 8001646:	f002 fe5f 	bl	8004308 <HAL_TIM_ConfigClockSource>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001650:	f7ff fd0c 	bl	800106c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001654:	4818      	ldr	r0, [pc, #96]	; (80016b8 <MX_TIM2_Init+0xe8>)
 8001656:	f002 fb97 	bl	8003d88 <HAL_TIM_PWM_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001660:	f7ff fd04 	bl	800106c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001664:	2300      	movs	r3, #0
 8001666:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001668:	2300      	movs	r3, #0
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800166c:	f107 0320 	add.w	r3, r7, #32
 8001670:	4619      	mov	r1, r3
 8001672:	4811      	ldr	r0, [pc, #68]	; (80016b8 <MX_TIM2_Init+0xe8>)
 8001674:	f003 f9c8 	bl	8004a08 <HAL_TIMEx_MasterConfigSynchronization>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800167e:	f7ff fcf5 	bl	800106c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001682:	2360      	movs	r3, #96	; 0x60
 8001684:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	2200      	movs	r2, #0
 8001696:	4619      	mov	r1, r3
 8001698:	4807      	ldr	r0, [pc, #28]	; (80016b8 <MX_TIM2_Init+0xe8>)
 800169a:	f002 fd77 	bl	800418c <HAL_TIM_PWM_ConfigChannel>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80016a4:	f7ff fce2 	bl	800106c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80016a8:	4803      	ldr	r0, [pc, #12]	; (80016b8 <MX_TIM2_Init+0xe8>)
 80016aa:	f000 f895 	bl	80017d8 <HAL_TIM_MspPostInit>

}
 80016ae:	bf00      	nop
 80016b0:	3738      	adds	r7, #56	; 0x38
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000610 	.word	0x20000610

080016bc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d0:	463b      	mov	r3, r7
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 80016d8:	4b1d      	ldr	r3, [pc, #116]	; (8001750 <MX_TIM4_Init+0x94>)
 80016da:	4a1e      	ldr	r2, [pc, #120]	; (8001754 <MX_TIM4_Init+0x98>)
 80016dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 80016de:	4b1c      	ldr	r3, [pc, #112]	; (8001750 <MX_TIM4_Init+0x94>)
 80016e0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80016e4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e6:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <MX_TIM4_Init+0x94>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 80016ec:	4b18      	ldr	r3, [pc, #96]	; (8001750 <MX_TIM4_Init+0x94>)
 80016ee:	f240 12f3 	movw	r2, #499	; 0x1f3
 80016f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f4:	4b16      	ldr	r3, [pc, #88]	; (8001750 <MX_TIM4_Init+0x94>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <MX_TIM4_Init+0x94>)
 80016fc:	2280      	movs	r2, #128	; 0x80
 80016fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001700:	4813      	ldr	r0, [pc, #76]	; (8001750 <MX_TIM4_Init+0x94>)
 8001702:	f002 fa9f 	bl	8003c44 <HAL_TIM_Base_Init>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800170c:	f7ff fcae 	bl	800106c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001714:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001716:	f107 0308 	add.w	r3, r7, #8
 800171a:	4619      	mov	r1, r3
 800171c:	480c      	ldr	r0, [pc, #48]	; (8001750 <MX_TIM4_Init+0x94>)
 800171e:	f002 fdf3 	bl	8004308 <HAL_TIM_ConfigClockSource>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001728:	f7ff fca0 	bl	800106c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172c:	2300      	movs	r3, #0
 800172e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001730:	2300      	movs	r3, #0
 8001732:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001734:	463b      	mov	r3, r7
 8001736:	4619      	mov	r1, r3
 8001738:	4805      	ldr	r0, [pc, #20]	; (8001750 <MX_TIM4_Init+0x94>)
 800173a:	f003 f965 	bl	8004a08 <HAL_TIMEx_MasterConfigSynchronization>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001744:	f7ff fc92 	bl	800106c <Error_Handler>
  }

}
 8001748:	bf00      	nop
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	200005c8 	.word	0x200005c8
 8001754:	40000800 	.word	0x40000800

08001758 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001768:	d114      	bne.n	8001794 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800176a:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <HAL_TIM_Base_MspInit+0x78>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	4a18      	ldr	r2, [pc, #96]	; (80017d0 <HAL_TIM_Base_MspInit+0x78>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	61d3      	str	r3, [r2, #28]
 8001776:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <HAL_TIM_Base_MspInit+0x78>)
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001782:	2200      	movs	r2, #0
 8001784:	2100      	movs	r1, #0
 8001786:	201c      	movs	r0, #28
 8001788:	f000 fabf 	bl	8001d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800178c:	201c      	movs	r0, #28
 800178e:	f000 fad8 	bl	8001d42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001792:	e018      	b.n	80017c6 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM4)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <HAL_TIM_Base_MspInit+0x7c>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d113      	bne.n	80017c6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800179e:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <HAL_TIM_Base_MspInit+0x78>)
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	4a0b      	ldr	r2, [pc, #44]	; (80017d0 <HAL_TIM_Base_MspInit+0x78>)
 80017a4:	f043 0304 	orr.w	r3, r3, #4
 80017a8:	61d3      	str	r3, [r2, #28]
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <HAL_TIM_Base_MspInit+0x78>)
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2100      	movs	r1, #0
 80017ba:	201e      	movs	r0, #30
 80017bc:	f000 faa5 	bl	8001d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80017c0:	201e      	movs	r0, #30
 80017c2:	f000 fabe 	bl	8001d42 <HAL_NVIC_EnableIRQ>
}
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40000800 	.word	0x40000800

080017d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 0310 	add.w	r3, r7, #16
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017f6:	d117      	bne.n	8001828 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f8:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <HAL_TIM_MspPostInit+0x58>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	4a0c      	ldr	r2, [pc, #48]	; (8001830 <HAL_TIM_MspPostInit+0x58>)
 80017fe:	f043 0304 	orr.w	r3, r3, #4
 8001802:	6193      	str	r3, [r2, #24]
 8001804:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <HAL_TIM_MspPostInit+0x58>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001810:	2301      	movs	r3, #1
 8001812:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001814:	2302      	movs	r3, #2
 8001816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001818:	2302      	movs	r3, #2
 800181a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181c:	f107 0310 	add.w	r3, r7, #16
 8001820:	4619      	mov	r1, r3
 8001822:	4804      	ldr	r0, [pc, #16]	; (8001834 <HAL_TIM_MspPostInit+0x5c>)
 8001824:	f000 fb1e 	bl	8001e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001828:	bf00      	nop
 800182a:	3720      	adds	r7, #32
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40021000 	.word	0x40021000
 8001834:	40010800 	.word	0x40010800

08001838 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800183c:	4b11      	ldr	r3, [pc, #68]	; (8001884 <MX_USART1_UART_Init+0x4c>)
 800183e:	4a12      	ldr	r2, [pc, #72]	; (8001888 <MX_USART1_UART_Init+0x50>)
 8001840:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001842:	4b10      	ldr	r3, [pc, #64]	; (8001884 <MX_USART1_UART_Init+0x4c>)
 8001844:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001848:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800184a:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <MX_USART1_UART_Init+0x4c>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <MX_USART1_UART_Init+0x4c>)
 8001852:	2200      	movs	r2, #0
 8001854:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001856:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <MX_USART1_UART_Init+0x4c>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800185c:	4b09      	ldr	r3, [pc, #36]	; (8001884 <MX_USART1_UART_Init+0x4c>)
 800185e:	220c      	movs	r2, #12
 8001860:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001862:	4b08      	ldr	r3, [pc, #32]	; (8001884 <MX_USART1_UART_Init+0x4c>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001868:	4b06      	ldr	r3, [pc, #24]	; (8001884 <MX_USART1_UART_Init+0x4c>)
 800186a:	2200      	movs	r2, #0
 800186c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800186e:	4805      	ldr	r0, [pc, #20]	; (8001884 <MX_USART1_UART_Init+0x4c>)
 8001870:	f003 f93a 	bl	8004ae8 <HAL_UART_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800187a:	f7ff fbf7 	bl	800106c <Error_Handler>
  }

}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000658 	.word	0x20000658
 8001888:	40013800 	.word	0x40013800

0800188c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <MX_USART2_UART_Init+0x4c>)
 8001892:	4a12      	ldr	r2, [pc, #72]	; (80018dc <MX_USART2_UART_Init+0x50>)
 8001894:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <MX_USART2_UART_Init+0x4c>)
 8001898:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800189c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <MX_USART2_UART_Init+0x4c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018a4:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <MX_USART2_UART_Init+0x4c>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018aa:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <MX_USART2_UART_Init+0x4c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018b0:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <MX_USART2_UART_Init+0x4c>)
 80018b2:	220c      	movs	r2, #12
 80018b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018b6:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <MX_USART2_UART_Init+0x4c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <MX_USART2_UART_Init+0x4c>)
 80018be:	2200      	movs	r2, #0
 80018c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018c2:	4805      	ldr	r0, [pc, #20]	; (80018d8 <MX_USART2_UART_Init+0x4c>)
 80018c4:	f003 f910 	bl	8004ae8 <HAL_UART_Init>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018ce:	f7ff fbcd 	bl	800106c <Error_Handler>
  }

}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000698 	.word	0x20000698
 80018dc:	40004400 	.word	0x40004400

080018e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0318 	add.w	r3, r7, #24
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a3f      	ldr	r2, [pc, #252]	; (80019f8 <HAL_UART_MspInit+0x118>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d13a      	bne.n	8001976 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001900:	4b3e      	ldr	r3, [pc, #248]	; (80019fc <HAL_UART_MspInit+0x11c>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	4a3d      	ldr	r2, [pc, #244]	; (80019fc <HAL_UART_MspInit+0x11c>)
 8001906:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800190a:	6193      	str	r3, [r2, #24]
 800190c:	4b3b      	ldr	r3, [pc, #236]	; (80019fc <HAL_UART_MspInit+0x11c>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001918:	4b38      	ldr	r3, [pc, #224]	; (80019fc <HAL_UART_MspInit+0x11c>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	4a37      	ldr	r2, [pc, #220]	; (80019fc <HAL_UART_MspInit+0x11c>)
 800191e:	f043 0304 	orr.w	r3, r3, #4
 8001922:	6193      	str	r3, [r2, #24]
 8001924:	4b35      	ldr	r3, [pc, #212]	; (80019fc <HAL_UART_MspInit+0x11c>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001930:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800193a:	2303      	movs	r3, #3
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193e:	f107 0318 	add.w	r3, r7, #24
 8001942:	4619      	mov	r1, r3
 8001944:	482e      	ldr	r0, [pc, #184]	; (8001a00 <HAL_UART_MspInit+0x120>)
 8001946:	f000 fa8d 	bl	8001e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800194a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800194e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001950:	2300      	movs	r3, #0
 8001952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001958:	f107 0318 	add.w	r3, r7, #24
 800195c:	4619      	mov	r1, r3
 800195e:	4828      	ldr	r0, [pc, #160]	; (8001a00 <HAL_UART_MspInit+0x120>)
 8001960:	f000 fa80 	bl	8001e64 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001964:	2200      	movs	r2, #0
 8001966:	2100      	movs	r1, #0
 8001968:	2025      	movs	r0, #37	; 0x25
 800196a:	f000 f9ce 	bl	8001d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800196e:	2025      	movs	r0, #37	; 0x25
 8001970:	f000 f9e7 	bl	8001d42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001974:	e03c      	b.n	80019f0 <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART2)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a22      	ldr	r2, [pc, #136]	; (8001a04 <HAL_UART_MspInit+0x124>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d137      	bne.n	80019f0 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001980:	4b1e      	ldr	r3, [pc, #120]	; (80019fc <HAL_UART_MspInit+0x11c>)
 8001982:	69db      	ldr	r3, [r3, #28]
 8001984:	4a1d      	ldr	r2, [pc, #116]	; (80019fc <HAL_UART_MspInit+0x11c>)
 8001986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800198a:	61d3      	str	r3, [r2, #28]
 800198c:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <HAL_UART_MspInit+0x11c>)
 800198e:	69db      	ldr	r3, [r3, #28]
 8001990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <HAL_UART_MspInit+0x11c>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	4a17      	ldr	r2, [pc, #92]	; (80019fc <HAL_UART_MspInit+0x11c>)
 800199e:	f043 0304 	orr.w	r3, r3, #4
 80019a2:	6193      	str	r3, [r2, #24]
 80019a4:	4b15      	ldr	r3, [pc, #84]	; (80019fc <HAL_UART_MspInit+0x11c>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019b0:	2304      	movs	r3, #4
 80019b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019b8:	2303      	movs	r3, #3
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019bc:	f107 0318 	add.w	r3, r7, #24
 80019c0:	4619      	mov	r1, r3
 80019c2:	480f      	ldr	r0, [pc, #60]	; (8001a00 <HAL_UART_MspInit+0x120>)
 80019c4:	f000 fa4e 	bl	8001e64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019c8:	2308      	movs	r3, #8
 80019ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d4:	f107 0318 	add.w	r3, r7, #24
 80019d8:	4619      	mov	r1, r3
 80019da:	4809      	ldr	r0, [pc, #36]	; (8001a00 <HAL_UART_MspInit+0x120>)
 80019dc:	f000 fa42 	bl	8001e64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019e0:	2200      	movs	r2, #0
 80019e2:	2100      	movs	r1, #0
 80019e4:	2026      	movs	r0, #38	; 0x26
 80019e6:	f000 f990 	bl	8001d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019ea:	2026      	movs	r0, #38	; 0x26
 80019ec:	f000 f9a9 	bl	8001d42 <HAL_NVIC_EnableIRQ>
}
 80019f0:	bf00      	nop
 80019f2:	3728      	adds	r7, #40	; 0x28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40013800 	.word	0x40013800
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40010800 	.word	0x40010800
 8001a04:	40004400 	.word	0x40004400

08001a08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001a08:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001a0a:	e003      	b.n	8001a14 <LoopCopyDataInit>

08001a0c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001a0e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001a10:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001a12:	3104      	adds	r1, #4

08001a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001a14:	480a      	ldr	r0, [pc, #40]	; (8001a40 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001a18:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001a1a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001a1c:	d3f6      	bcc.n	8001a0c <CopyDataInit>
  ldr r2, =_sbss
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001a20:	e002      	b.n	8001a28 <LoopFillZerobss>

08001a22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001a24:	f842 3b04 	str.w	r3, [r2], #4

08001a28 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001a2a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001a2c:	d3f9      	bcc.n	8001a22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a2e:	f7ff fdc9 	bl	80015c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a32:	f003 fce9 	bl	8005408 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a36:	f7ff f8cf 	bl	8000bd8 <main>
  bx lr
 8001a3a:	4770      	bx	lr
  ldr r3, =_sidata
 8001a3c:	08005e0c 	.word	0x08005e0c
  ldr r0, =_sdata
 8001a40:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001a44:	20000448 	.word	0x20000448
  ldr r2, =_sbss
 8001a48:	20000448 	.word	0x20000448
  ldr r3, = _ebss
 8001a4c:	200006e0 	.word	0x200006e0

08001a50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a50:	e7fe      	b.n	8001a50 <ADC1_2_IRQHandler>
	...

08001a54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <HAL_Init+0x28>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a07      	ldr	r2, [pc, #28]	; (8001a7c <HAL_Init+0x28>)
 8001a5e:	f043 0310 	orr.w	r3, r3, #16
 8001a62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a64:	2003      	movs	r0, #3
 8001a66:	f000 f945 	bl	8001cf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	f000 f808 	bl	8001a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a70:	f7ff fca2 	bl	80013b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40022000 	.word	0x40022000

08001a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_InitTick+0x54>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <HAL_InitTick+0x58>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	4619      	mov	r1, r3
 8001a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f000 f95d 	bl	8001d5e <HAL_SYSTICK_Config>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e00e      	b.n	8001acc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b0f      	cmp	r3, #15
 8001ab2:	d80a      	bhi.n	8001aca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8001abc:	f000 f925 	bl	8001d0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ac0:	4a06      	ldr	r2, [pc, #24]	; (8001adc <HAL_InitTick+0x5c>)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	e000      	b.n	8001acc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	200003d8 	.word	0x200003d8
 8001ad8:	200003e0 	.word	0x200003e0
 8001adc:	200003dc 	.word	0x200003dc

08001ae0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <HAL_IncTick+0x1c>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_IncTick+0x20>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4413      	add	r3, r2
 8001af0:	4a03      	ldr	r2, [pc, #12]	; (8001b00 <HAL_IncTick+0x20>)
 8001af2:	6013      	str	r3, [r2, #0]
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr
 8001afc:	200003e0 	.word	0x200003e0
 8001b00:	200006d8 	.word	0x200006d8

08001b04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return uwTick;
 8001b08:	4b02      	ldr	r3, [pc, #8]	; (8001b14 <HAL_GetTick+0x10>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr
 8001b14:	200006d8 	.word	0x200006d8

08001b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b20:	f7ff fff0 	bl	8001b04 <HAL_GetTick>
 8001b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b30:	d005      	beq.n	8001b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <HAL_Delay+0x40>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b3e:	bf00      	nop
 8001b40:	f7ff ffe0 	bl	8001b04 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d8f7      	bhi.n	8001b40 <HAL_Delay+0x28>
  {
  }
}
 8001b50:	bf00      	nop
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	200003e0 	.word	0x200003e0

08001b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b8e:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	60d3      	str	r3, [r2, #12]
}
 8001b94:	bf00      	nop
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba8:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <__NVIC_GetPriorityGrouping+0x18>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	0a1b      	lsrs	r3, r3, #8
 8001bae:	f003 0307 	and.w	r3, r3, #7
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	db0b      	blt.n	8001bea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	f003 021f 	and.w	r2, r3, #31
 8001bd8:	4906      	ldr	r1, [pc, #24]	; (8001bf4 <__NVIC_EnableIRQ+0x34>)
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	095b      	lsrs	r3, r3, #5
 8001be0:	2001      	movs	r0, #1
 8001be2:	fa00 f202 	lsl.w	r2, r0, r2
 8001be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr
 8001bf4:	e000e100 	.word	0xe000e100

08001bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	6039      	str	r1, [r7, #0]
 8001c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	db0a      	blt.n	8001c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	490c      	ldr	r1, [pc, #48]	; (8001c44 <__NVIC_SetPriority+0x4c>)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	0112      	lsls	r2, r2, #4
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c20:	e00a      	b.n	8001c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	4908      	ldr	r1, [pc, #32]	; (8001c48 <__NVIC_SetPriority+0x50>)
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	3b04      	subs	r3, #4
 8001c30:	0112      	lsls	r2, r2, #4
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	440b      	add	r3, r1
 8001c36:	761a      	strb	r2, [r3, #24]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	e000e100 	.word	0xe000e100
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b089      	sub	sp, #36	; 0x24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f1c3 0307 	rsb	r3, r3, #7
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	bf28      	it	cs
 8001c6a:	2304      	movcs	r3, #4
 8001c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3304      	adds	r3, #4
 8001c72:	2b06      	cmp	r3, #6
 8001c74:	d902      	bls.n	8001c7c <NVIC_EncodePriority+0x30>
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3b03      	subs	r3, #3
 8001c7a:	e000      	b.n	8001c7e <NVIC_EncodePriority+0x32>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c80:	f04f 32ff 	mov.w	r2, #4294967295
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43da      	mvns	r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	401a      	ands	r2, r3
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c94:	f04f 31ff 	mov.w	r1, #4294967295
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9e:	43d9      	mvns	r1, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	4313      	orrs	r3, r2
         );
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3724      	adds	r7, #36	; 0x24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr

08001cb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cc0:	d301      	bcc.n	8001cc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e00f      	b.n	8001ce6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cc6:	4a0a      	ldr	r2, [pc, #40]	; (8001cf0 <SysTick_Config+0x40>)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cce:	210f      	movs	r1, #15
 8001cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd4:	f7ff ff90 	bl	8001bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cd8:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <SysTick_Config+0x40>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cde:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <SysTick_Config+0x40>)
 8001ce0:	2207      	movs	r2, #7
 8001ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	e000e010 	.word	0xe000e010

08001cf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff ff2d 	bl	8001b5c <__NVIC_SetPriorityGrouping>
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b086      	sub	sp, #24
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	4603      	mov	r3, r0
 8001d12:	60b9      	str	r1, [r7, #8]
 8001d14:	607a      	str	r2, [r7, #4]
 8001d16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d1c:	f7ff ff42 	bl	8001ba4 <__NVIC_GetPriorityGrouping>
 8001d20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	68b9      	ldr	r1, [r7, #8]
 8001d26:	6978      	ldr	r0, [r7, #20]
 8001d28:	f7ff ff90 	bl	8001c4c <NVIC_EncodePriority>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d32:	4611      	mov	r1, r2
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff ff5f 	bl	8001bf8 <__NVIC_SetPriority>
}
 8001d3a:	bf00      	nop
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	4603      	mov	r3, r0
 8001d4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff ff35 	bl	8001bc0 <__NVIC_EnableIRQ>
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff ffa2 	bl	8001cb0 <SysTick_Config>
 8001d6c:	4603      	mov	r3, r0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
	...

08001d78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d80:	2300      	movs	r3, #0
 8001d82:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d005      	beq.n	8001d9a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2204      	movs	r2, #4
 8001d92:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	73fb      	strb	r3, [r7, #15]
 8001d98:	e051      	b.n	8001e3e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 020e 	bic.w	r2, r2, #14
 8001da8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 0201 	bic.w	r2, r2, #1
 8001db8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a22      	ldr	r2, [pc, #136]	; (8001e48 <HAL_DMA_Abort_IT+0xd0>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d029      	beq.n	8001e18 <HAL_DMA_Abort_IT+0xa0>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a20      	ldr	r2, [pc, #128]	; (8001e4c <HAL_DMA_Abort_IT+0xd4>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d022      	beq.n	8001e14 <HAL_DMA_Abort_IT+0x9c>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a1f      	ldr	r2, [pc, #124]	; (8001e50 <HAL_DMA_Abort_IT+0xd8>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d01a      	beq.n	8001e0e <HAL_DMA_Abort_IT+0x96>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a1d      	ldr	r2, [pc, #116]	; (8001e54 <HAL_DMA_Abort_IT+0xdc>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d012      	beq.n	8001e08 <HAL_DMA_Abort_IT+0x90>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a1c      	ldr	r2, [pc, #112]	; (8001e58 <HAL_DMA_Abort_IT+0xe0>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d00a      	beq.n	8001e02 <HAL_DMA_Abort_IT+0x8a>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a1a      	ldr	r2, [pc, #104]	; (8001e5c <HAL_DMA_Abort_IT+0xe4>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d102      	bne.n	8001dfc <HAL_DMA_Abort_IT+0x84>
 8001df6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001dfa:	e00e      	b.n	8001e1a <HAL_DMA_Abort_IT+0xa2>
 8001dfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e00:	e00b      	b.n	8001e1a <HAL_DMA_Abort_IT+0xa2>
 8001e02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e06:	e008      	b.n	8001e1a <HAL_DMA_Abort_IT+0xa2>
 8001e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e0c:	e005      	b.n	8001e1a <HAL_DMA_Abort_IT+0xa2>
 8001e0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e12:	e002      	b.n	8001e1a <HAL_DMA_Abort_IT+0xa2>
 8001e14:	2310      	movs	r3, #16
 8001e16:	e000      	b.n	8001e1a <HAL_DMA_Abort_IT+0xa2>
 8001e18:	2301      	movs	r3, #1
 8001e1a:	4a11      	ldr	r2, [pc, #68]	; (8001e60 <HAL_DMA_Abort_IT+0xe8>)
 8001e1c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	4798      	blx	r3
    } 
  }
  return status;
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40020008 	.word	0x40020008
 8001e4c:	4002001c 	.word	0x4002001c
 8001e50:	40020030 	.word	0x40020030
 8001e54:	40020044 	.word	0x40020044
 8001e58:	40020058 	.word	0x40020058
 8001e5c:	4002006c 	.word	0x4002006c
 8001e60:	40020000 	.word	0x40020000

08001e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b08b      	sub	sp, #44	; 0x2c
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e72:	2300      	movs	r3, #0
 8001e74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e76:	e127      	b.n	80020c8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e78:	2201      	movs	r2, #1
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	69fa      	ldr	r2, [r7, #28]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	f040 8116 	bne.w	80020c2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b12      	cmp	r3, #18
 8001e9c:	d034      	beq.n	8001f08 <HAL_GPIO_Init+0xa4>
 8001e9e:	2b12      	cmp	r3, #18
 8001ea0:	d80d      	bhi.n	8001ebe <HAL_GPIO_Init+0x5a>
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d02b      	beq.n	8001efe <HAL_GPIO_Init+0x9a>
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d804      	bhi.n	8001eb4 <HAL_GPIO_Init+0x50>
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d031      	beq.n	8001f12 <HAL_GPIO_Init+0xae>
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d01c      	beq.n	8001eec <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eb2:	e048      	b.n	8001f46 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	d043      	beq.n	8001f40 <HAL_GPIO_Init+0xdc>
 8001eb8:	2b11      	cmp	r3, #17
 8001eba:	d01b      	beq.n	8001ef4 <HAL_GPIO_Init+0x90>
          break;
 8001ebc:	e043      	b.n	8001f46 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ebe:	4a89      	ldr	r2, [pc, #548]	; (80020e4 <HAL_GPIO_Init+0x280>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d026      	beq.n	8001f12 <HAL_GPIO_Init+0xae>
 8001ec4:	4a87      	ldr	r2, [pc, #540]	; (80020e4 <HAL_GPIO_Init+0x280>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d806      	bhi.n	8001ed8 <HAL_GPIO_Init+0x74>
 8001eca:	4a87      	ldr	r2, [pc, #540]	; (80020e8 <HAL_GPIO_Init+0x284>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d020      	beq.n	8001f12 <HAL_GPIO_Init+0xae>
 8001ed0:	4a86      	ldr	r2, [pc, #536]	; (80020ec <HAL_GPIO_Init+0x288>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d01d      	beq.n	8001f12 <HAL_GPIO_Init+0xae>
          break;
 8001ed6:	e036      	b.n	8001f46 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ed8:	4a85      	ldr	r2, [pc, #532]	; (80020f0 <HAL_GPIO_Init+0x28c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d019      	beq.n	8001f12 <HAL_GPIO_Init+0xae>
 8001ede:	4a85      	ldr	r2, [pc, #532]	; (80020f4 <HAL_GPIO_Init+0x290>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d016      	beq.n	8001f12 <HAL_GPIO_Init+0xae>
 8001ee4:	4a84      	ldr	r2, [pc, #528]	; (80020f8 <HAL_GPIO_Init+0x294>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d013      	beq.n	8001f12 <HAL_GPIO_Init+0xae>
          break;
 8001eea:	e02c      	b.n	8001f46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	623b      	str	r3, [r7, #32]
          break;
 8001ef2:	e028      	b.n	8001f46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	623b      	str	r3, [r7, #32]
          break;
 8001efc:	e023      	b.n	8001f46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	3308      	adds	r3, #8
 8001f04:	623b      	str	r3, [r7, #32]
          break;
 8001f06:	e01e      	b.n	8001f46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	330c      	adds	r3, #12
 8001f0e:	623b      	str	r3, [r7, #32]
          break;
 8001f10:	e019      	b.n	8001f46 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d102      	bne.n	8001f20 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f1a:	2304      	movs	r3, #4
 8001f1c:	623b      	str	r3, [r7, #32]
          break;
 8001f1e:	e012      	b.n	8001f46 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d105      	bne.n	8001f34 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f28:	2308      	movs	r3, #8
 8001f2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69fa      	ldr	r2, [r7, #28]
 8001f30:	611a      	str	r2, [r3, #16]
          break;
 8001f32:	e008      	b.n	8001f46 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f34:	2308      	movs	r3, #8
 8001f36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69fa      	ldr	r2, [r7, #28]
 8001f3c:	615a      	str	r2, [r3, #20]
          break;
 8001f3e:	e002      	b.n	8001f46 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f40:	2300      	movs	r3, #0
 8001f42:	623b      	str	r3, [r7, #32]
          break;
 8001f44:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	2bff      	cmp	r3, #255	; 0xff
 8001f4a:	d801      	bhi.n	8001f50 <HAL_GPIO_Init+0xec>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	e001      	b.n	8001f54 <HAL_GPIO_Init+0xf0>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3304      	adds	r3, #4
 8001f54:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	2bff      	cmp	r3, #255	; 0xff
 8001f5a:	d802      	bhi.n	8001f62 <HAL_GPIO_Init+0xfe>
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	e002      	b.n	8001f68 <HAL_GPIO_Init+0x104>
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	3b08      	subs	r3, #8
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	210f      	movs	r1, #15
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	fa01 f303 	lsl.w	r3, r1, r3
 8001f76:	43db      	mvns	r3, r3
 8001f78:	401a      	ands	r2, r3
 8001f7a:	6a39      	ldr	r1, [r7, #32]
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f82:	431a      	orrs	r2, r3
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 8096 	beq.w	80020c2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f96:	4b59      	ldr	r3, [pc, #356]	; (80020fc <HAL_GPIO_Init+0x298>)
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	4a58      	ldr	r2, [pc, #352]	; (80020fc <HAL_GPIO_Init+0x298>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6193      	str	r3, [r2, #24]
 8001fa2:	4b56      	ldr	r3, [pc, #344]	; (80020fc <HAL_GPIO_Init+0x298>)
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fae:	4a54      	ldr	r2, [pc, #336]	; (8002100 <HAL_GPIO_Init+0x29c>)
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	089b      	lsrs	r3, r3, #2
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fba:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	220f      	movs	r2, #15
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a4b      	ldr	r2, [pc, #300]	; (8002104 <HAL_GPIO_Init+0x2a0>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d013      	beq.n	8002002 <HAL_GPIO_Init+0x19e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a4a      	ldr	r2, [pc, #296]	; (8002108 <HAL_GPIO_Init+0x2a4>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d00d      	beq.n	8001ffe <HAL_GPIO_Init+0x19a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a49      	ldr	r2, [pc, #292]	; (800210c <HAL_GPIO_Init+0x2a8>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d007      	beq.n	8001ffa <HAL_GPIO_Init+0x196>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a48      	ldr	r2, [pc, #288]	; (8002110 <HAL_GPIO_Init+0x2ac>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d101      	bne.n	8001ff6 <HAL_GPIO_Init+0x192>
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e006      	b.n	8002004 <HAL_GPIO_Init+0x1a0>
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	e004      	b.n	8002004 <HAL_GPIO_Init+0x1a0>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e002      	b.n	8002004 <HAL_GPIO_Init+0x1a0>
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <HAL_GPIO_Init+0x1a0>
 8002002:	2300      	movs	r3, #0
 8002004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002006:	f002 0203 	and.w	r2, r2, #3
 800200a:	0092      	lsls	r2, r2, #2
 800200c:	4093      	lsls	r3, r2
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	4313      	orrs	r3, r2
 8002012:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002014:	493a      	ldr	r1, [pc, #232]	; (8002100 <HAL_GPIO_Init+0x29c>)
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	089b      	lsrs	r3, r3, #2
 800201a:	3302      	adds	r3, #2
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d006      	beq.n	800203c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800202e:	4b39      	ldr	r3, [pc, #228]	; (8002114 <HAL_GPIO_Init+0x2b0>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	4938      	ldr	r1, [pc, #224]	; (8002114 <HAL_GPIO_Init+0x2b0>)
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	4313      	orrs	r3, r2
 8002038:	600b      	str	r3, [r1, #0]
 800203a:	e006      	b.n	800204a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800203c:	4b35      	ldr	r3, [pc, #212]	; (8002114 <HAL_GPIO_Init+0x2b0>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	43db      	mvns	r3, r3
 8002044:	4933      	ldr	r1, [pc, #204]	; (8002114 <HAL_GPIO_Init+0x2b0>)
 8002046:	4013      	ands	r3, r2
 8002048:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d006      	beq.n	8002064 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002056:	4b2f      	ldr	r3, [pc, #188]	; (8002114 <HAL_GPIO_Init+0x2b0>)
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	492e      	ldr	r1, [pc, #184]	; (8002114 <HAL_GPIO_Init+0x2b0>)
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	4313      	orrs	r3, r2
 8002060:	604b      	str	r3, [r1, #4]
 8002062:	e006      	b.n	8002072 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002064:	4b2b      	ldr	r3, [pc, #172]	; (8002114 <HAL_GPIO_Init+0x2b0>)
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	43db      	mvns	r3, r3
 800206c:	4929      	ldr	r1, [pc, #164]	; (8002114 <HAL_GPIO_Init+0x2b0>)
 800206e:	4013      	ands	r3, r2
 8002070:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d006      	beq.n	800208c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800207e:	4b25      	ldr	r3, [pc, #148]	; (8002114 <HAL_GPIO_Init+0x2b0>)
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	4924      	ldr	r1, [pc, #144]	; (8002114 <HAL_GPIO_Init+0x2b0>)
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	4313      	orrs	r3, r2
 8002088:	608b      	str	r3, [r1, #8]
 800208a:	e006      	b.n	800209a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800208c:	4b21      	ldr	r3, [pc, #132]	; (8002114 <HAL_GPIO_Init+0x2b0>)
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	43db      	mvns	r3, r3
 8002094:	491f      	ldr	r1, [pc, #124]	; (8002114 <HAL_GPIO_Init+0x2b0>)
 8002096:	4013      	ands	r3, r2
 8002098:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d006      	beq.n	80020b4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020a6:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <HAL_GPIO_Init+0x2b0>)
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	491a      	ldr	r1, [pc, #104]	; (8002114 <HAL_GPIO_Init+0x2b0>)
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	60cb      	str	r3, [r1, #12]
 80020b2:	e006      	b.n	80020c2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020b4:	4b17      	ldr	r3, [pc, #92]	; (8002114 <HAL_GPIO_Init+0x2b0>)
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	4915      	ldr	r1, [pc, #84]	; (8002114 <HAL_GPIO_Init+0x2b0>)
 80020be:	4013      	ands	r3, r2
 80020c0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	3301      	adds	r3, #1
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	fa22 f303 	lsr.w	r3, r2, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f47f aed0 	bne.w	8001e78 <HAL_GPIO_Init+0x14>
  }
}
 80020d8:	bf00      	nop
 80020da:	372c      	adds	r7, #44	; 0x2c
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	10210000 	.word	0x10210000
 80020e8:	10110000 	.word	0x10110000
 80020ec:	10120000 	.word	0x10120000
 80020f0:	10310000 	.word	0x10310000
 80020f4:	10320000 	.word	0x10320000
 80020f8:	10220000 	.word	0x10220000
 80020fc:	40021000 	.word	0x40021000
 8002100:	40010000 	.word	0x40010000
 8002104:	40010800 	.word	0x40010800
 8002108:	40010c00 	.word	0x40010c00
 800210c:	40011000 	.word	0x40011000
 8002110:	40011400 	.word	0x40011400
 8002114:	40010400 	.word	0x40010400

08002118 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	887b      	ldrh	r3, [r7, #2]
 800212a:	4013      	ands	r3, r2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d002      	beq.n	8002136 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002130:	2301      	movs	r3, #1
 8002132:	73fb      	strb	r3, [r7, #15]
 8002134:	e001      	b.n	800213a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002136:	2300      	movs	r3, #0
 8002138:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800213a:	7bfb      	ldrb	r3, [r7, #15]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr

08002146 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	460b      	mov	r3, r1
 8002150:	807b      	strh	r3, [r7, #2]
 8002152:	4613      	mov	r3, r2
 8002154:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002156:	787b      	ldrb	r3, [r7, #1]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800215c:	887a      	ldrh	r2, [r7, #2]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002162:	e003      	b.n	800216c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002164:	887b      	ldrh	r3, [r7, #2]
 8002166:	041a      	lsls	r2, r3, #16
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	611a      	str	r2, [r3, #16]
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr
	...

08002178 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e11f      	b.n	80023ca <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d106      	bne.n	80021a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7fe fbc8 	bl	8000934 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2224      	movs	r2, #36	; 0x24
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 0201 	bic.w	r2, r2, #1
 80021ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021dc:	f000 ffec 	bl	80031b8 <HAL_RCC_GetPCLK1Freq>
 80021e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	4a7b      	ldr	r2, [pc, #492]	; (80023d4 <HAL_I2C_Init+0x25c>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d807      	bhi.n	80021fc <HAL_I2C_Init+0x84>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4a7a      	ldr	r2, [pc, #488]	; (80023d8 <HAL_I2C_Init+0x260>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	bf94      	ite	ls
 80021f4:	2301      	movls	r3, #1
 80021f6:	2300      	movhi	r3, #0
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	e006      	b.n	800220a <HAL_I2C_Init+0x92>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4a77      	ldr	r2, [pc, #476]	; (80023dc <HAL_I2C_Init+0x264>)
 8002200:	4293      	cmp	r3, r2
 8002202:	bf94      	ite	ls
 8002204:	2301      	movls	r3, #1
 8002206:	2300      	movhi	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e0db      	b.n	80023ca <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4a72      	ldr	r2, [pc, #456]	; (80023e0 <HAL_I2C_Init+0x268>)
 8002216:	fba2 2303 	umull	r2, r3, r2, r3
 800221a:	0c9b      	lsrs	r3, r3, #18
 800221c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	430a      	orrs	r2, r1
 8002230:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	4a64      	ldr	r2, [pc, #400]	; (80023d4 <HAL_I2C_Init+0x25c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d802      	bhi.n	800224c <HAL_I2C_Init+0xd4>
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	3301      	adds	r3, #1
 800224a:	e009      	b.n	8002260 <HAL_I2C_Init+0xe8>
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002252:	fb02 f303 	mul.w	r3, r2, r3
 8002256:	4a63      	ldr	r2, [pc, #396]	; (80023e4 <HAL_I2C_Init+0x26c>)
 8002258:	fba2 2303 	umull	r2, r3, r2, r3
 800225c:	099b      	lsrs	r3, r3, #6
 800225e:	3301      	adds	r3, #1
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6812      	ldr	r2, [r2, #0]
 8002264:	430b      	orrs	r3, r1
 8002266:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002272:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	4956      	ldr	r1, [pc, #344]	; (80023d4 <HAL_I2C_Init+0x25c>)
 800227c:	428b      	cmp	r3, r1
 800227e:	d80d      	bhi.n	800229c <HAL_I2C_Init+0x124>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	1e59      	subs	r1, r3, #1
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	fbb1 f3f3 	udiv	r3, r1, r3
 800228e:	3301      	adds	r3, #1
 8002290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002294:	2b04      	cmp	r3, #4
 8002296:	bf38      	it	cc
 8002298:	2304      	movcc	r3, #4
 800229a:	e04f      	b.n	800233c <HAL_I2C_Init+0x1c4>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d111      	bne.n	80022c8 <HAL_I2C_Init+0x150>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	1e58      	subs	r0, r3, #1
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6859      	ldr	r1, [r3, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	440b      	add	r3, r1
 80022b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022b6:	3301      	adds	r3, #1
 80022b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022bc:	2b00      	cmp	r3, #0
 80022be:	bf0c      	ite	eq
 80022c0:	2301      	moveq	r3, #1
 80022c2:	2300      	movne	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	e012      	b.n	80022ee <HAL_I2C_Init+0x176>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	1e58      	subs	r0, r3, #1
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6859      	ldr	r1, [r3, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	0099      	lsls	r1, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	fbb0 f3f3 	udiv	r3, r0, r3
 80022de:	3301      	adds	r3, #1
 80022e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	bf0c      	ite	eq
 80022e8:	2301      	moveq	r3, #1
 80022ea:	2300      	movne	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_I2C_Init+0x17e>
 80022f2:	2301      	movs	r3, #1
 80022f4:	e022      	b.n	800233c <HAL_I2C_Init+0x1c4>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10e      	bne.n	800231c <HAL_I2C_Init+0x1a4>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	1e58      	subs	r0, r3, #1
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6859      	ldr	r1, [r3, #4]
 8002306:	460b      	mov	r3, r1
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	440b      	add	r3, r1
 800230c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002310:	3301      	adds	r3, #1
 8002312:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800231a:	e00f      	b.n	800233c <HAL_I2C_Init+0x1c4>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	1e58      	subs	r0, r3, #1
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6859      	ldr	r1, [r3, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	0099      	lsls	r1, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002332:	3301      	adds	r3, #1
 8002334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002338:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	6809      	ldr	r1, [r1, #0]
 8002340:	4313      	orrs	r3, r2
 8002342:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69da      	ldr	r2, [r3, #28]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800236a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6911      	ldr	r1, [r2, #16]
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	68d2      	ldr	r2, [r2, #12]
 8002376:	4311      	orrs	r1, r2
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6812      	ldr	r2, [r2, #0]
 800237c:	430b      	orrs	r3, r1
 800237e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695a      	ldr	r2, [r3, #20]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0201 	orr.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2220      	movs	r2, #32
 80023b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	000186a0 	.word	0x000186a0
 80023d8:	001e847f 	.word	0x001e847f
 80023dc:	003d08ff 	.word	0x003d08ff
 80023e0:	431bde83 	.word	0x431bde83
 80023e4:	10624dd3 	.word	0x10624dd3

080023e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b088      	sub	sp, #32
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	461a      	mov	r2, r3
 80023f4:	460b      	mov	r3, r1
 80023f6:	817b      	strh	r3, [r7, #10]
 80023f8:	4613      	mov	r3, r2
 80023fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023fc:	f7ff fb82 	bl	8001b04 <HAL_GetTick>
 8002400:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b20      	cmp	r3, #32
 800240c:	f040 80e0 	bne.w	80025d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	2319      	movs	r3, #25
 8002416:	2201      	movs	r2, #1
 8002418:	4970      	ldr	r1, [pc, #448]	; (80025dc <HAL_I2C_Master_Transmit+0x1f4>)
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f964 	bl	80026e8 <I2C_WaitOnFlagUntilTimeout>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002426:	2302      	movs	r3, #2
 8002428:	e0d3      	b.n	80025d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_I2C_Master_Transmit+0x50>
 8002434:	2302      	movs	r3, #2
 8002436:	e0cc      	b.n	80025d2 <HAL_I2C_Master_Transmit+0x1ea>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b01      	cmp	r3, #1
 800244c:	d007      	beq.n	800245e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f042 0201 	orr.w	r2, r2, #1
 800245c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800246c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2221      	movs	r2, #33	; 0x21
 8002472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2210      	movs	r2, #16
 800247a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	893a      	ldrh	r2, [r7, #8]
 800248e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4a50      	ldr	r2, [pc, #320]	; (80025e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800249e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024a0:	8979      	ldrh	r1, [r7, #10]
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	6a3a      	ldr	r2, [r7, #32]
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 f89c 	bl	80025e4 <I2C_MasterRequestWrite>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e08d      	b.n	80025d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024b6:	2300      	movs	r3, #0
 80024b8:	613b      	str	r3, [r7, #16]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024cc:	e066      	b.n	800259c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	6a39      	ldr	r1, [r7, #32]
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 f9de 	bl	8002894 <I2C_WaitOnTXEFlagUntilTimeout>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00d      	beq.n	80024fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d107      	bne.n	80024f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e06b      	b.n	80025d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	781a      	ldrb	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002514:	b29b      	uxth	r3, r3
 8002516:	3b01      	subs	r3, #1
 8002518:	b29a      	uxth	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b04      	cmp	r3, #4
 8002536:	d11b      	bne.n	8002570 <HAL_I2C_Master_Transmit+0x188>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253c:	2b00      	cmp	r3, #0
 800253e:	d017      	beq.n	8002570 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	781a      	ldrb	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255a:	b29b      	uxth	r3, r3
 800255c:	3b01      	subs	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	6a39      	ldr	r1, [r7, #32]
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 f9ce 	bl	8002916 <I2C_WaitOnBTFFlagUntilTimeout>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00d      	beq.n	800259c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	2b04      	cmp	r3, #4
 8002586:	d107      	bne.n	8002598 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002596:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e01a      	b.n	80025d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d194      	bne.n	80024ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2220      	movs	r2, #32
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025cc:	2300      	movs	r3, #0
 80025ce:	e000      	b.n	80025d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025d0:	2302      	movs	r3, #2
  }
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	00100002 	.word	0x00100002
 80025e0:	ffff0000 	.word	0xffff0000

080025e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af02      	add	r7, sp, #8
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	607a      	str	r2, [r7, #4]
 80025ee:	603b      	str	r3, [r7, #0]
 80025f0:	460b      	mov	r3, r1
 80025f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d006      	beq.n	800260e <I2C_MasterRequestWrite+0x2a>
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d003      	beq.n	800260e <I2C_MasterRequestWrite+0x2a>
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800260c:	d108      	bne.n	8002620 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	e00b      	b.n	8002638 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002624:	2b12      	cmp	r3, #18
 8002626:	d107      	bne.n	8002638 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002636:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 f84f 	bl	80026e8 <I2C_WaitOnFlagUntilTimeout>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00d      	beq.n	800266c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800265e:	d103      	bne.n	8002668 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002666:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e035      	b.n	80026d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002674:	d108      	bne.n	8002688 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002676:	897b      	ldrh	r3, [r7, #10]
 8002678:	b2db      	uxtb	r3, r3
 800267a:	461a      	mov	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002684:	611a      	str	r2, [r3, #16]
 8002686:	e01b      	b.n	80026c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002688:	897b      	ldrh	r3, [r7, #10]
 800268a:	11db      	asrs	r3, r3, #7
 800268c:	b2db      	uxtb	r3, r3
 800268e:	f003 0306 	and.w	r3, r3, #6
 8002692:	b2db      	uxtb	r3, r3
 8002694:	f063 030f 	orn	r3, r3, #15
 8002698:	b2da      	uxtb	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	490e      	ldr	r1, [pc, #56]	; (80026e0 <I2C_MasterRequestWrite+0xfc>)
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 f875 	bl	8002796 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e010      	b.n	80026d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026b6:	897b      	ldrh	r3, [r7, #10]
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	4907      	ldr	r1, [pc, #28]	; (80026e4 <I2C_MasterRequestWrite+0x100>)
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 f865 	bl	8002796 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	00010008 	.word	0x00010008
 80026e4:	00010002 	.word	0x00010002

080026e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	603b      	str	r3, [r7, #0]
 80026f4:	4613      	mov	r3, r2
 80026f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026f8:	e025      	b.n	8002746 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002700:	d021      	beq.n	8002746 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002702:	f7ff f9ff 	bl	8001b04 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d302      	bcc.n	8002718 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d116      	bne.n	8002746 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2220      	movs	r2, #32
 8002722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f043 0220 	orr.w	r2, r3, #32
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e023      	b.n	800278e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	0c1b      	lsrs	r3, r3, #16
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b01      	cmp	r3, #1
 800274e:	d10d      	bne.n	800276c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	43da      	mvns	r2, r3
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	4013      	ands	r3, r2
 800275c:	b29b      	uxth	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	bf0c      	ite	eq
 8002762:	2301      	moveq	r3, #1
 8002764:	2300      	movne	r3, #0
 8002766:	b2db      	uxtb	r3, r3
 8002768:	461a      	mov	r2, r3
 800276a:	e00c      	b.n	8002786 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	43da      	mvns	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	4013      	ands	r3, r2
 8002778:	b29b      	uxth	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	bf0c      	ite	eq
 800277e:	2301      	moveq	r3, #1
 8002780:	2300      	movne	r3, #0
 8002782:	b2db      	uxtb	r3, r3
 8002784:	461a      	mov	r2, r3
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	429a      	cmp	r2, r3
 800278a:	d0b6      	beq.n	80026fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b084      	sub	sp, #16
 800279a:	af00      	add	r7, sp, #0
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
 80027a2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027a4:	e051      	b.n	800284a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b4:	d123      	bne.n	80027fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027c4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027ce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2220      	movs	r2, #32
 80027da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f043 0204 	orr.w	r2, r3, #4
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e046      	b.n	800288c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002804:	d021      	beq.n	800284a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002806:	f7ff f97d 	bl	8001b04 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	429a      	cmp	r2, r3
 8002814:	d302      	bcc.n	800281c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d116      	bne.n	800284a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2220      	movs	r2, #32
 8002826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	f043 0220 	orr.w	r2, r3, #32
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e020      	b.n	800288c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	0c1b      	lsrs	r3, r3, #16
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b01      	cmp	r3, #1
 8002852:	d10c      	bne.n	800286e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	43da      	mvns	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	4013      	ands	r3, r2
 8002860:	b29b      	uxth	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	bf14      	ite	ne
 8002866:	2301      	movne	r3, #1
 8002868:	2300      	moveq	r3, #0
 800286a:	b2db      	uxtb	r3, r3
 800286c:	e00b      	b.n	8002886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	43da      	mvns	r2, r3
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	4013      	ands	r3, r2
 800287a:	b29b      	uxth	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	bf14      	ite	ne
 8002880:	2301      	movne	r3, #1
 8002882:	2300      	moveq	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d18d      	bne.n	80027a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028a0:	e02d      	b.n	80028fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 f878 	bl	8002998 <I2C_IsAcknowledgeFailed>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e02d      	b.n	800290e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b8:	d021      	beq.n	80028fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ba:	f7ff f923 	bl	8001b04 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d302      	bcc.n	80028d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d116      	bne.n	80028fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2220      	movs	r2, #32
 80028da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f043 0220 	orr.w	r2, r3, #32
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e007      	b.n	800290e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002908:	2b80      	cmp	r3, #128	; 0x80
 800290a:	d1ca      	bne.n	80028a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b084      	sub	sp, #16
 800291a:	af00      	add	r7, sp, #0
 800291c:	60f8      	str	r0, [r7, #12]
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002922:	e02d      	b.n	8002980 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f000 f837 	bl	8002998 <I2C_IsAcknowledgeFailed>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e02d      	b.n	8002990 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293a:	d021      	beq.n	8002980 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800293c:	f7ff f8e2 	bl	8001b04 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	429a      	cmp	r2, r3
 800294a:	d302      	bcc.n	8002952 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d116      	bne.n	8002980 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	f043 0220 	orr.w	r2, r3, #32
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e007      	b.n	8002990 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	f003 0304 	and.w	r3, r3, #4
 800298a:	2b04      	cmp	r3, #4
 800298c:	d1ca      	bne.n	8002924 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ae:	d11b      	bne.n	80029e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2220      	movs	r2, #32
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	f043 0204 	orr.w	r2, r3, #4
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e000      	b.n	80029ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr

080029f4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80029f8:	4b03      	ldr	r3, [pc, #12]	; (8002a08 <HAL_PWR_EnableBkUpAccess+0x14>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	601a      	str	r2, [r3, #0]
}
 80029fe:	bf00      	nop
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	420e0020 	.word	0x420e0020

08002a0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e26c      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 8087 	beq.w	8002b3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a2c:	4b92      	ldr	r3, [pc, #584]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 030c 	and.w	r3, r3, #12
 8002a34:	2b04      	cmp	r3, #4
 8002a36:	d00c      	beq.n	8002a52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a38:	4b8f      	ldr	r3, [pc, #572]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 030c 	and.w	r3, r3, #12
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d112      	bne.n	8002a6a <HAL_RCC_OscConfig+0x5e>
 8002a44:	4b8c      	ldr	r3, [pc, #560]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a50:	d10b      	bne.n	8002a6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a52:	4b89      	ldr	r3, [pc, #548]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d06c      	beq.n	8002b38 <HAL_RCC_OscConfig+0x12c>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d168      	bne.n	8002b38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e246      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a72:	d106      	bne.n	8002a82 <HAL_RCC_OscConfig+0x76>
 8002a74:	4b80      	ldr	r3, [pc, #512]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a7f      	ldr	r2, [pc, #508]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a7e:	6013      	str	r3, [r2, #0]
 8002a80:	e02e      	b.n	8002ae0 <HAL_RCC_OscConfig+0xd4>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10c      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x98>
 8002a8a:	4b7b      	ldr	r3, [pc, #492]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a7a      	ldr	r2, [pc, #488]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	4b78      	ldr	r3, [pc, #480]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a77      	ldr	r2, [pc, #476]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	e01d      	b.n	8002ae0 <HAL_RCC_OscConfig+0xd4>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aac:	d10c      	bne.n	8002ac8 <HAL_RCC_OscConfig+0xbc>
 8002aae:	4b72      	ldr	r3, [pc, #456]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a71      	ldr	r2, [pc, #452]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	4b6f      	ldr	r3, [pc, #444]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a6e      	ldr	r2, [pc, #440]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	e00b      	b.n	8002ae0 <HAL_RCC_OscConfig+0xd4>
 8002ac8:	4b6b      	ldr	r3, [pc, #428]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a6a      	ldr	r2, [pc, #424]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ad2:	6013      	str	r3, [r2, #0]
 8002ad4:	4b68      	ldr	r3, [pc, #416]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a67      	ldr	r2, [pc, #412]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ade:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d013      	beq.n	8002b10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae8:	f7ff f80c 	bl	8001b04 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002af0:	f7ff f808 	bl	8001b04 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b64      	cmp	r3, #100	; 0x64
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e1fa      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b02:	4b5d      	ldr	r3, [pc, #372]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0f0      	beq.n	8002af0 <HAL_RCC_OscConfig+0xe4>
 8002b0e:	e014      	b.n	8002b3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b10:	f7fe fff8 	bl	8001b04 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b18:	f7fe fff4 	bl	8001b04 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b64      	cmp	r3, #100	; 0x64
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e1e6      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2a:	4b53      	ldr	r3, [pc, #332]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f0      	bne.n	8002b18 <HAL_RCC_OscConfig+0x10c>
 8002b36:	e000      	b.n	8002b3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d063      	beq.n	8002c0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b46:	4b4c      	ldr	r3, [pc, #304]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f003 030c 	and.w	r3, r3, #12
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00b      	beq.n	8002b6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b52:	4b49      	ldr	r3, [pc, #292]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f003 030c 	and.w	r3, r3, #12
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d11c      	bne.n	8002b98 <HAL_RCC_OscConfig+0x18c>
 8002b5e:	4b46      	ldr	r3, [pc, #280]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d116      	bne.n	8002b98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b6a:	4b43      	ldr	r3, [pc, #268]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d005      	beq.n	8002b82 <HAL_RCC_OscConfig+0x176>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d001      	beq.n	8002b82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e1ba      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b82:	4b3d      	ldr	r3, [pc, #244]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	4939      	ldr	r1, [pc, #228]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b96:	e03a      	b.n	8002c0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d020      	beq.n	8002be2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ba0:	4b36      	ldr	r3, [pc, #216]	; (8002c7c <HAL_RCC_OscConfig+0x270>)
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba6:	f7fe ffad 	bl	8001b04 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bae:	f7fe ffa9 	bl	8001b04 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e19b      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc0:	4b2d      	ldr	r3, [pc, #180]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0f0      	beq.n	8002bae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bcc:	4b2a      	ldr	r3, [pc, #168]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	4927      	ldr	r1, [pc, #156]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	600b      	str	r3, [r1, #0]
 8002be0:	e015      	b.n	8002c0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002be2:	4b26      	ldr	r3, [pc, #152]	; (8002c7c <HAL_RCC_OscConfig+0x270>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be8:	f7fe ff8c 	bl	8001b04 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf0:	f7fe ff88 	bl	8001b04 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e17a      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c02:	4b1d      	ldr	r3, [pc, #116]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f0      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d03a      	beq.n	8002c90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d019      	beq.n	8002c56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c22:	4b17      	ldr	r3, [pc, #92]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002c24:	2201      	movs	r2, #1
 8002c26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c28:	f7fe ff6c 	bl	8001b04 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c30:	f7fe ff68 	bl	8001b04 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e15a      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c42:	4b0d      	ldr	r3, [pc, #52]	; (8002c78 <HAL_RCC_OscConfig+0x26c>)
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0f0      	beq.n	8002c30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c4e:	2001      	movs	r0, #1
 8002c50:	f000 fada 	bl	8003208 <RCC_Delay>
 8002c54:	e01c      	b.n	8002c90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c56:	4b0a      	ldr	r3, [pc, #40]	; (8002c80 <HAL_RCC_OscConfig+0x274>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5c:	f7fe ff52 	bl	8001b04 <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c62:	e00f      	b.n	8002c84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c64:	f7fe ff4e 	bl	8001b04 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d908      	bls.n	8002c84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e140      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4ec>
 8002c76:	bf00      	nop
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	42420000 	.word	0x42420000
 8002c80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c84:	4b9e      	ldr	r3, [pc, #632]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1e9      	bne.n	8002c64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 80a6 	beq.w	8002dea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ca2:	4b97      	ldr	r3, [pc, #604]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10d      	bne.n	8002cca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cae:	4b94      	ldr	r3, [pc, #592]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	4a93      	ldr	r2, [pc, #588]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb8:	61d3      	str	r3, [r2, #28]
 8002cba:	4b91      	ldr	r3, [pc, #580]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	60bb      	str	r3, [r7, #8]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cca:	4b8e      	ldr	r3, [pc, #568]	; (8002f04 <HAL_RCC_OscConfig+0x4f8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d118      	bne.n	8002d08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cd6:	4b8b      	ldr	r3, [pc, #556]	; (8002f04 <HAL_RCC_OscConfig+0x4f8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a8a      	ldr	r2, [pc, #552]	; (8002f04 <HAL_RCC_OscConfig+0x4f8>)
 8002cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ce2:	f7fe ff0f 	bl	8001b04 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cea:	f7fe ff0b 	bl	8001b04 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b64      	cmp	r3, #100	; 0x64
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e0fd      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfc:	4b81      	ldr	r3, [pc, #516]	; (8002f04 <HAL_RCC_OscConfig+0x4f8>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f0      	beq.n	8002cea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d106      	bne.n	8002d1e <HAL_RCC_OscConfig+0x312>
 8002d10:	4b7b      	ldr	r3, [pc, #492]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	4a7a      	ldr	r2, [pc, #488]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	6213      	str	r3, [r2, #32]
 8002d1c:	e02d      	b.n	8002d7a <HAL_RCC_OscConfig+0x36e>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10c      	bne.n	8002d40 <HAL_RCC_OscConfig+0x334>
 8002d26:	4b76      	ldr	r3, [pc, #472]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	4a75      	ldr	r2, [pc, #468]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d2c:	f023 0301 	bic.w	r3, r3, #1
 8002d30:	6213      	str	r3, [r2, #32]
 8002d32:	4b73      	ldr	r3, [pc, #460]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	4a72      	ldr	r2, [pc, #456]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d38:	f023 0304 	bic.w	r3, r3, #4
 8002d3c:	6213      	str	r3, [r2, #32]
 8002d3e:	e01c      	b.n	8002d7a <HAL_RCC_OscConfig+0x36e>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	2b05      	cmp	r3, #5
 8002d46:	d10c      	bne.n	8002d62 <HAL_RCC_OscConfig+0x356>
 8002d48:	4b6d      	ldr	r3, [pc, #436]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	4a6c      	ldr	r2, [pc, #432]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d4e:	f043 0304 	orr.w	r3, r3, #4
 8002d52:	6213      	str	r3, [r2, #32]
 8002d54:	4b6a      	ldr	r3, [pc, #424]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	4a69      	ldr	r2, [pc, #420]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	6213      	str	r3, [r2, #32]
 8002d60:	e00b      	b.n	8002d7a <HAL_RCC_OscConfig+0x36e>
 8002d62:	4b67      	ldr	r3, [pc, #412]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	4a66      	ldr	r2, [pc, #408]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d68:	f023 0301 	bic.w	r3, r3, #1
 8002d6c:	6213      	str	r3, [r2, #32]
 8002d6e:	4b64      	ldr	r3, [pc, #400]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	4a63      	ldr	r2, [pc, #396]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002d74:	f023 0304 	bic.w	r3, r3, #4
 8002d78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d015      	beq.n	8002dae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d82:	f7fe febf 	bl	8001b04 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d88:	e00a      	b.n	8002da0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8a:	f7fe febb 	bl	8001b04 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e0ab      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da0:	4b57      	ldr	r3, [pc, #348]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0ee      	beq.n	8002d8a <HAL_RCC_OscConfig+0x37e>
 8002dac:	e014      	b.n	8002dd8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dae:	f7fe fea9 	bl	8001b04 <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db4:	e00a      	b.n	8002dcc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db6:	f7fe fea5 	bl	8001b04 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e095      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dcc:	4b4c      	ldr	r3, [pc, #304]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1ee      	bne.n	8002db6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002dd8:	7dfb      	ldrb	r3, [r7, #23]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d105      	bne.n	8002dea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dde:	4b48      	ldr	r3, [pc, #288]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	4a47      	ldr	r2, [pc, #284]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 8081 	beq.w	8002ef6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002df4:	4b42      	ldr	r3, [pc, #264]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f003 030c 	and.w	r3, r3, #12
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d061      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d146      	bne.n	8002e96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e08:	4b3f      	ldr	r3, [pc, #252]	; (8002f08 <HAL_RCC_OscConfig+0x4fc>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0e:	f7fe fe79 	bl	8001b04 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e16:	f7fe fe75 	bl	8001b04 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e067      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e28:	4b35      	ldr	r3, [pc, #212]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1f0      	bne.n	8002e16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e3c:	d108      	bne.n	8002e50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e3e:	4b30      	ldr	r3, [pc, #192]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	492d      	ldr	r1, [pc, #180]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e50:	4b2b      	ldr	r3, [pc, #172]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a19      	ldr	r1, [r3, #32]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	430b      	orrs	r3, r1
 8002e62:	4927      	ldr	r1, [pc, #156]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e68:	4b27      	ldr	r3, [pc, #156]	; (8002f08 <HAL_RCC_OscConfig+0x4fc>)
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6e:	f7fe fe49 	bl	8001b04 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e76:	f7fe fe45 	bl	8001b04 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e037      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e88:	4b1d      	ldr	r3, [pc, #116]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0f0      	beq.n	8002e76 <HAL_RCC_OscConfig+0x46a>
 8002e94:	e02f      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e96:	4b1c      	ldr	r3, [pc, #112]	; (8002f08 <HAL_RCC_OscConfig+0x4fc>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9c:	f7fe fe32 	bl	8001b04 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea4:	f7fe fe2e 	bl	8001b04 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e020      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eb6:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1f0      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x498>
 8002ec2:	e018      	b.n	8002ef6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	69db      	ldr	r3, [r3, #28]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d101      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e013      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <HAL_RCC_OscConfig+0x4f4>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d106      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d001      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40007000 	.word	0x40007000
 8002f08:	42420060 	.word	0x42420060

08002f0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0d0      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f20:	4b6a      	ldr	r3, [pc, #424]	; (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d910      	bls.n	8002f50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2e:	4b67      	ldr	r3, [pc, #412]	; (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f023 0207 	bic.w	r2, r3, #7
 8002f36:	4965      	ldr	r1, [pc, #404]	; (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3e:	4b63      	ldr	r3, [pc, #396]	; (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d001      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e0b8      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d020      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f68:	4b59      	ldr	r3, [pc, #356]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	4a58      	ldr	r2, [pc, #352]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d005      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f80:	4b53      	ldr	r3, [pc, #332]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	4a52      	ldr	r2, [pc, #328]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f8c:	4b50      	ldr	r3, [pc, #320]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	494d      	ldr	r1, [pc, #308]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d040      	beq.n	800302c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d107      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb2:	4b47      	ldr	r3, [pc, #284]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d115      	bne.n	8002fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e07f      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d107      	bne.n	8002fda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fca:	4b41      	ldr	r3, [pc, #260]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d109      	bne.n	8002fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e073      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fda:	4b3d      	ldr	r3, [pc, #244]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e06b      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fea:	4b39      	ldr	r3, [pc, #228]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f023 0203 	bic.w	r2, r3, #3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	4936      	ldr	r1, [pc, #216]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ffc:	f7fe fd82 	bl	8001b04 <HAL_GetTick>
 8003000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003002:	e00a      	b.n	800301a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003004:	f7fe fd7e 	bl	8001b04 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003012:	4293      	cmp	r3, r2
 8003014:	d901      	bls.n	800301a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e053      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301a:	4b2d      	ldr	r3, [pc, #180]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f003 020c 	and.w	r2, r3, #12
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	429a      	cmp	r2, r3
 800302a:	d1eb      	bne.n	8003004 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800302c:	4b27      	ldr	r3, [pc, #156]	; (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d210      	bcs.n	800305c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303a:	4b24      	ldr	r3, [pc, #144]	; (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f023 0207 	bic.w	r2, r3, #7
 8003042:	4922      	ldr	r1, [pc, #136]	; (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	4313      	orrs	r3, r2
 8003048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800304a:	4b20      	ldr	r3, [pc, #128]	; (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	429a      	cmp	r2, r3
 8003056:	d001      	beq.n	800305c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e032      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	d008      	beq.n	800307a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003068:	4b19      	ldr	r3, [pc, #100]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	4916      	ldr	r1, [pc, #88]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003076:	4313      	orrs	r3, r2
 8003078:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d009      	beq.n	800309a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003086:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	490e      	ldr	r1, [pc, #56]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003096:	4313      	orrs	r3, r2
 8003098:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800309a:	f000 f821 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 800309e:	4601      	mov	r1, r0
 80030a0:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	091b      	lsrs	r3, r3, #4
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	4a0a      	ldr	r2, [pc, #40]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 80030ac:	5cd3      	ldrb	r3, [r2, r3]
 80030ae:	fa21 f303 	lsr.w	r3, r1, r3
 80030b2:	4a09      	ldr	r2, [pc, #36]	; (80030d8 <HAL_RCC_ClockConfig+0x1cc>)
 80030b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030b6:	4b09      	ldr	r3, [pc, #36]	; (80030dc <HAL_RCC_ClockConfig+0x1d0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fe fce0 	bl	8001a80 <HAL_InitTick>

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40022000 	.word	0x40022000
 80030d0:	40021000 	.word	0x40021000
 80030d4:	08005d88 	.word	0x08005d88
 80030d8:	200003d8 	.word	0x200003d8
 80030dc:	200003dc 	.word	0x200003dc

080030e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e0:	b490      	push	{r4, r7}
 80030e2:	b08a      	sub	sp, #40	; 0x28
 80030e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80030e6:	4b2a      	ldr	r3, [pc, #168]	; (8003190 <HAL_RCC_GetSysClockFreq+0xb0>)
 80030e8:	1d3c      	adds	r4, r7, #4
 80030ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80030f0:	4b28      	ldr	r3, [pc, #160]	; (8003194 <HAL_RCC_GetSysClockFreq+0xb4>)
 80030f2:	881b      	ldrh	r3, [r3, #0]
 80030f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	61fb      	str	r3, [r7, #28]
 80030fa:	2300      	movs	r3, #0
 80030fc:	61bb      	str	r3, [r7, #24]
 80030fe:	2300      	movs	r3, #0
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
 8003102:	2300      	movs	r3, #0
 8003104:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003106:	2300      	movs	r3, #0
 8003108:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800310a:	4b23      	ldr	r3, [pc, #140]	; (8003198 <HAL_RCC_GetSysClockFreq+0xb8>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	f003 030c 	and.w	r3, r3, #12
 8003116:	2b04      	cmp	r3, #4
 8003118:	d002      	beq.n	8003120 <HAL_RCC_GetSysClockFreq+0x40>
 800311a:	2b08      	cmp	r3, #8
 800311c:	d003      	beq.n	8003126 <HAL_RCC_GetSysClockFreq+0x46>
 800311e:	e02d      	b.n	800317c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003120:	4b1e      	ldr	r3, [pc, #120]	; (800319c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003122:	623b      	str	r3, [r7, #32]
      break;
 8003124:	e02d      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	0c9b      	lsrs	r3, r3, #18
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003132:	4413      	add	r3, r2
 8003134:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003138:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d013      	beq.n	800316c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003144:	4b14      	ldr	r3, [pc, #80]	; (8003198 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	0c5b      	lsrs	r3, r3, #17
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003152:	4413      	add	r3, r2
 8003154:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003158:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	4a0f      	ldr	r2, [pc, #60]	; (800319c <HAL_RCC_GetSysClockFreq+0xbc>)
 800315e:	fb02 f203 	mul.w	r2, r2, r3
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	fbb2 f3f3 	udiv	r3, r2, r3
 8003168:	627b      	str	r3, [r7, #36]	; 0x24
 800316a:	e004      	b.n	8003176 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	4a0c      	ldr	r2, [pc, #48]	; (80031a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003170:	fb02 f303 	mul.w	r3, r2, r3
 8003174:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003178:	623b      	str	r3, [r7, #32]
      break;
 800317a:	e002      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800317c:	4b07      	ldr	r3, [pc, #28]	; (800319c <HAL_RCC_GetSysClockFreq+0xbc>)
 800317e:	623b      	str	r3, [r7, #32]
      break;
 8003180:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003182:	6a3b      	ldr	r3, [r7, #32]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3728      	adds	r7, #40	; 0x28
 8003188:	46bd      	mov	sp, r7
 800318a:	bc90      	pop	{r4, r7}
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	08005d60 	.word	0x08005d60
 8003194:	08005d70 	.word	0x08005d70
 8003198:	40021000 	.word	0x40021000
 800319c:	007a1200 	.word	0x007a1200
 80031a0:	003d0900 	.word	0x003d0900

080031a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a8:	4b02      	ldr	r3, [pc, #8]	; (80031b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80031aa:	681b      	ldr	r3, [r3, #0]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr
 80031b4:	200003d8 	.word	0x200003d8

080031b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031bc:	f7ff fff2 	bl	80031a4 <HAL_RCC_GetHCLKFreq>
 80031c0:	4601      	mov	r1, r0
 80031c2:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	0a1b      	lsrs	r3, r3, #8
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	4a03      	ldr	r2, [pc, #12]	; (80031dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ce:	5cd3      	ldrb	r3, [r2, r3]
 80031d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40021000 	.word	0x40021000
 80031dc:	08005d98 	.word	0x08005d98

080031e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031e4:	f7ff ffde 	bl	80031a4 <HAL_RCC_GetHCLKFreq>
 80031e8:	4601      	mov	r1, r0
 80031ea:	4b05      	ldr	r3, [pc, #20]	; (8003200 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	0adb      	lsrs	r3, r3, #11
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	4a03      	ldr	r2, [pc, #12]	; (8003204 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031f6:	5cd3      	ldrb	r3, [r2, r3]
 80031f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40021000 	.word	0x40021000
 8003204:	08005d98 	.word	0x08005d98

08003208 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003210:	4b0a      	ldr	r3, [pc, #40]	; (800323c <RCC_Delay+0x34>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a0a      	ldr	r2, [pc, #40]	; (8003240 <RCC_Delay+0x38>)
 8003216:	fba2 2303 	umull	r2, r3, r2, r3
 800321a:	0a5b      	lsrs	r3, r3, #9
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	fb02 f303 	mul.w	r3, r2, r3
 8003222:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003224:	bf00      	nop
  }
  while (Delay --);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	1e5a      	subs	r2, r3, #1
 800322a:	60fa      	str	r2, [r7, #12]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f9      	bne.n	8003224 <RCC_Delay+0x1c>
}
 8003230:	bf00      	nop
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	bc80      	pop	{r7}
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	200003d8 	.word	0x200003d8
 8003240:	10624dd3 	.word	0x10624dd3

08003244 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800324c:	2300      	movs	r3, #0
 800324e:	613b      	str	r3, [r7, #16]
 8003250:	2300      	movs	r3, #0
 8003252:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b00      	cmp	r3, #0
 800325e:	d07d      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003260:	2300      	movs	r3, #0
 8003262:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003264:	4b4f      	ldr	r3, [pc, #316]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10d      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003270:	4b4c      	ldr	r3, [pc, #304]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	4a4b      	ldr	r2, [pc, #300]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800327a:	61d3      	str	r3, [r2, #28]
 800327c:	4b49      	ldr	r3, [pc, #292]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003288:	2301      	movs	r3, #1
 800328a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328c:	4b46      	ldr	r3, [pc, #280]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003294:	2b00      	cmp	r3, #0
 8003296:	d118      	bne.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003298:	4b43      	ldr	r3, [pc, #268]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a42      	ldr	r2, [pc, #264]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800329e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032a4:	f7fe fc2e 	bl	8001b04 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032aa:	e008      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ac:	f7fe fc2a 	bl	8001b04 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b64      	cmp	r3, #100	; 0x64
 80032b8:	d901      	bls.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e06d      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032be:	4b3a      	ldr	r3, [pc, #232]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f0      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032ca:	4b36      	ldr	r3, [pc, #216]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d02e      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d027      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032e8:	4b2e      	ldr	r3, [pc, #184]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032f2:	4b2e      	ldr	r3, [pc, #184]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032f4:	2201      	movs	r2, #1
 80032f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032f8:	4b2c      	ldr	r3, [pc, #176]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032fe:	4a29      	ldr	r2, [pc, #164]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d014      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330e:	f7fe fbf9 	bl	8001b04 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003314:	e00a      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003316:	f7fe fbf5 	bl	8001b04 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	f241 3288 	movw	r2, #5000	; 0x1388
 8003324:	4293      	cmp	r3, r2
 8003326:	d901      	bls.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e036      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800332c:	4b1d      	ldr	r3, [pc, #116]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0ee      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003338:	4b1a      	ldr	r3, [pc, #104]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	4917      	ldr	r1, [pc, #92]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003346:	4313      	orrs	r3, r2
 8003348:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800334a:	7dfb      	ldrb	r3, [r7, #23]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d105      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003350:	4b14      	ldr	r3, [pc, #80]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	4a13      	ldr	r2, [pc, #76]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003356:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800335a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d008      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003368:	4b0e      	ldr	r3, [pc, #56]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	490b      	ldr	r1, [pc, #44]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003376:	4313      	orrs	r3, r2
 8003378:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0310 	and.w	r3, r3, #16
 8003382:	2b00      	cmp	r3, #0
 8003384:	d008      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003386:	4b07      	ldr	r3, [pc, #28]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	4904      	ldr	r1, [pc, #16]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003394:	4313      	orrs	r3, r2
 8003396:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40021000 	.word	0x40021000
 80033a8:	40007000 	.word	0x40007000
 80033ac:	42420440 	.word	0x42420440

080033b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80033b0:	b590      	push	{r4, r7, lr}
 80033b2:	b08d      	sub	sp, #52	; 0x34
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80033b8:	4b55      	ldr	r3, [pc, #340]	; (8003510 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80033ba:	f107 040c 	add.w	r4, r7, #12
 80033be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80033c4:	4b53      	ldr	r3, [pc, #332]	; (8003514 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	627b      	str	r3, [r7, #36]	; 0x24
 80033ce:	2300      	movs	r3, #0
 80033d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033d2:	2300      	movs	r3, #0
 80033d4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	2300      	movs	r3, #0
 80033dc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d07f      	beq.n	80034e4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80033e4:	2b10      	cmp	r3, #16
 80033e6:	d002      	beq.n	80033ee <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d048      	beq.n	800347e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80033ec:	e08b      	b.n	8003506 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80033ee:	4b4a      	ldr	r3, [pc, #296]	; (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80033f4:	4b48      	ldr	r3, [pc, #288]	; (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d07f      	beq.n	8003500 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	0c9b      	lsrs	r3, r3, #18
 8003404:	f003 030f 	and.w	r3, r3, #15
 8003408:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800340c:	4413      	add	r3, r2
 800340e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003412:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d018      	beq.n	8003450 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800341e:	4b3e      	ldr	r3, [pc, #248]	; (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	0c5b      	lsrs	r3, r3, #17
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800342c:	4413      	add	r3, r2
 800342e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003432:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00d      	beq.n	800345a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800343e:	4a37      	ldr	r2, [pc, #220]	; (800351c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	fbb2 f2f3 	udiv	r2, r2, r3
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	fb02 f303 	mul.w	r3, r2, r3
 800344c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800344e:	e004      	b.n	800345a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	4a33      	ldr	r2, [pc, #204]	; (8003520 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003454:	fb02 f303 	mul.w	r3, r2, r3
 8003458:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800345a:	4b2f      	ldr	r3, [pc, #188]	; (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003462:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003466:	d102      	bne.n	800346e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800346c:	e048      	b.n	8003500 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800346e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	4a2c      	ldr	r2, [pc, #176]	; (8003524 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003474:	fba2 2303 	umull	r2, r3, r2, r3
 8003478:	085b      	lsrs	r3, r3, #1
 800347a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800347c:	e040      	b.n	8003500 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800347e:	4b26      	ldr	r3, [pc, #152]	; (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800348a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800348e:	d108      	bne.n	80034a2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800349a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800349e:	62bb      	str	r3, [r7, #40]	; 0x28
 80034a0:	e01f      	b.n	80034e2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034ac:	d109      	bne.n	80034c2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80034ae:	4b1a      	ldr	r3, [pc, #104]	; (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80034ba:	f649 4340 	movw	r3, #40000	; 0x9c40
 80034be:	62bb      	str	r3, [r7, #40]	; 0x28
 80034c0:	e00f      	b.n	80034e2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034cc:	d11a      	bne.n	8003504 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80034ce:	4b12      	ldr	r3, [pc, #72]	; (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d014      	beq.n	8003504 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80034da:	f24f 4324 	movw	r3, #62500	; 0xf424
 80034de:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80034e0:	e010      	b.n	8003504 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80034e2:	e00f      	b.n	8003504 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80034e4:	f7ff fe7c 	bl	80031e0 <HAL_RCC_GetPCLK2Freq>
 80034e8:	4602      	mov	r2, r0
 80034ea:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	0b9b      	lsrs	r3, r3, #14
 80034f0:	f003 0303 	and.w	r3, r3, #3
 80034f4:	3301      	adds	r3, #1
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80034fe:	e002      	b.n	8003506 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003500:	bf00      	nop
 8003502:	e000      	b.n	8003506 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003504:	bf00      	nop
    }
  }
  return (frequency);
 8003506:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003508:	4618      	mov	r0, r3
 800350a:	3734      	adds	r7, #52	; 0x34
 800350c:	46bd      	mov	sp, r7
 800350e:	bd90      	pop	{r4, r7, pc}
 8003510:	08005d74 	.word	0x08005d74
 8003514:	08005d84 	.word	0x08005d84
 8003518:	40021000 	.word	0x40021000
 800351c:	007a1200 	.word	0x007a1200
 8003520:	003d0900 	.word	0x003d0900
 8003524:	aaaaaaab 	.word	0xaaaaaaab

08003528 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003530:	2300      	movs	r3, #0
 8003532:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e084      	b.n	8003648 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	7c5b      	ldrb	r3, [r3, #17]
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	d105      	bne.n	8003554 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7fd ff0e 	bl	8001370 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f9c8 	bl	80038f0 <HAL_RTC_WaitForSynchro>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d004      	beq.n	8003570 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2204      	movs	r2, #4
 800356a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e06b      	b.n	8003648 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 fa81 	bl	8003a78 <RTC_EnterInitMode>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d004      	beq.n	8003586 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2204      	movs	r2, #4
 8003580:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e060      	b.n	8003648 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 0207 	bic.w	r2, r2, #7
 8003594:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d005      	beq.n	80035aa <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800359e:	4b2c      	ldr	r3, [pc, #176]	; (8003650 <HAL_RTC_Init+0x128>)
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	4a2b      	ldr	r2, [pc, #172]	; (8003650 <HAL_RTC_Init+0x128>)
 80035a4:	f023 0301 	bic.w	r3, r3, #1
 80035a8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80035aa:	4b29      	ldr	r3, [pc, #164]	; (8003650 <HAL_RTC_Init+0x128>)
 80035ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ae:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	4926      	ldr	r1, [pc, #152]	; (8003650 <HAL_RTC_Init+0x128>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c4:	d003      	beq.n	80035ce <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	e00e      	b.n	80035ec <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80035ce:	2001      	movs	r0, #1
 80035d0:	f7ff feee 	bl	80033b0 <HAL_RCCEx_GetPeriphCLKFreq>
 80035d4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d104      	bne.n	80035e6 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2204      	movs	r2, #4
 80035e0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e030      	b.n	8003648 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	3b01      	subs	r3, #1
 80035ea:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f023 010f 	bic.w	r1, r3, #15
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	0c1a      	lsrs	r2, r3, #16
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	0c1b      	lsrs	r3, r3, #16
 800360a:	041b      	lsls	r3, r3, #16
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	b291      	uxth	r1, r2
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6812      	ldr	r2, [r2, #0]
 8003614:	430b      	orrs	r3, r1
 8003616:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 fa55 	bl	8003ac8 <RTC_ExitInitMode>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d004      	beq.n	800362e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2204      	movs	r2, #4
 8003628:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e00c      	b.n	8003648 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003646:	2300      	movs	r3, #0
  }
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40006c00 	.word	0x40006c00

08003654 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003654:	b590      	push	{r4, r7, lr}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]
 8003664:	2300      	movs	r3, #0
 8003666:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <HAL_RTC_SetTime+0x20>
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e080      	b.n	800377a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	7c1b      	ldrb	r3, [r3, #16]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d101      	bne.n	8003684 <HAL_RTC_SetTime+0x30>
 8003680:	2302      	movs	r3, #2
 8003682:	e07a      	b.n	800377a <HAL_RTC_SetTime+0x126>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2201      	movs	r2, #1
 8003688:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2202      	movs	r2, #2
 800368e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d113      	bne.n	80036be <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80036a0:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	785b      	ldrb	r3, [r3, #1]
 80036a8:	4619      	mov	r1, r3
 80036aa:	460b      	mov	r3, r1
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	1a5b      	subs	r3, r3, r1
 80036b0:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80036b2:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80036b8:	4413      	add	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	e01e      	b.n	80036fc <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 fa28 	bl	8003b18 <RTC_Bcd2ToByte>
 80036c8:	4603      	mov	r3, r0
 80036ca:	461a      	mov	r2, r3
 80036cc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80036d0:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	785b      	ldrb	r3, [r3, #1]
 80036d8:	4618      	mov	r0, r3
 80036da:	f000 fa1d 	bl	8003b18 <RTC_Bcd2ToByte>
 80036de:	4603      	mov	r3, r0
 80036e0:	461a      	mov	r2, r3
 80036e2:	4613      	mov	r3, r2
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	1a9b      	subs	r3, r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80036ea:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	789b      	ldrb	r3, [r3, #2]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 fa11 	bl	8003b18 <RTC_Bcd2ToByte>
 80036f6:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80036f8:	4423      	add	r3, r4
 80036fa:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80036fc:	6979      	ldr	r1, [r7, #20]
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 f953 	bl	80039aa <RTC_WriteTimeCounter>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d007      	beq.n	800371a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2204      	movs	r2, #4
 800370e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e02f      	b.n	800377a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0205 	bic.w	r2, r2, #5
 8003728:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 f964 	bl	80039f8 <RTC_ReadAlarmCounter>
 8003730:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003738:	d018      	beq.n	800376c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	429a      	cmp	r2, r3
 8003740:	d214      	bcs.n	800376c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003748:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800374c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800374e:	6939      	ldr	r1, [r7, #16]
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 f96a 	bl	8003a2a <RTC_WriteAlarmCounter>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d007      	beq.n	800376c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2204      	movs	r2, #4
 8003760:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e006      	b.n	800377a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2201      	movs	r2, #1
 8003770:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003778:	2300      	movs	r3, #0
  }
}
 800377a:	4618      	mov	r0, r3
 800377c:	371c      	adds	r7, #28
 800377e:	46bd      	mov	sp, r7
 8003780:	bd90      	pop	{r4, r7, pc}
	...

08003784 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b088      	sub	sp, #32
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003790:	2300      	movs	r3, #0
 8003792:	61fb      	str	r3, [r7, #28]
 8003794:	2300      	movs	r3, #0
 8003796:	61bb      	str	r3, [r7, #24]
 8003798:	2300      	movs	r3, #0
 800379a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <HAL_RTC_SetDate+0x24>
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e097      	b.n	80038dc <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	7c1b      	ldrb	r3, [r3, #16]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <HAL_RTC_SetDate+0x34>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e091      	b.n	80038dc <HAL_RTC_SetDate+0x158>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2201      	movs	r2, #1
 80037bc:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2202      	movs	r2, #2
 80037c2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10c      	bne.n	80037e4 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	78da      	ldrb	r2, [r3, #3]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	785a      	ldrb	r2, [r3, #1]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	789a      	ldrb	r2, [r3, #2]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	739a      	strb	r2, [r3, #14]
 80037e2:	e01a      	b.n	800381a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	78db      	ldrb	r3, [r3, #3]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 f995 	bl	8003b18 <RTC_Bcd2ToByte>
 80037ee:	4603      	mov	r3, r0
 80037f0:	461a      	mov	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	785b      	ldrb	r3, [r3, #1]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 f98c 	bl	8003b18 <RTC_Bcd2ToByte>
 8003800:	4603      	mov	r3, r0
 8003802:	461a      	mov	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	789b      	ldrb	r3, [r3, #2]
 800380c:	4618      	mov	r0, r3
 800380e:	f000 f983 	bl	8003b18 <RTC_Bcd2ToByte>
 8003812:	4603      	mov	r3, r0
 8003814:	461a      	mov	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	7bdb      	ldrb	r3, [r3, #15]
 800381e:	4618      	mov	r0, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	7b59      	ldrb	r1, [r3, #13]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	7b9b      	ldrb	r3, [r3, #14]
 8003828:	461a      	mov	r2, r3
 800382a:	f000 f993 	bl	8003b54 <RTC_WeekDayNum>
 800382e:	4603      	mov	r3, r0
 8003830:	461a      	mov	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	7b1a      	ldrb	r2, [r3, #12]
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 f883 	bl	800394a <RTC_ReadTimeCounter>
 8003844:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	4a26      	ldr	r2, [pc, #152]	; (80038e4 <HAL_RTC_SetDate+0x160>)
 800384a:	fba2 2303 	umull	r2, r3, r2, r3
 800384e:	0adb      	lsrs	r3, r3, #11
 8003850:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	2b18      	cmp	r3, #24
 8003856:	d93a      	bls.n	80038ce <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	4a23      	ldr	r2, [pc, #140]	; (80038e8 <HAL_RTC_SetDate+0x164>)
 800385c:	fba2 2303 	umull	r2, r3, r2, r3
 8003860:	091b      	lsrs	r3, r3, #4
 8003862:	4a22      	ldr	r2, [pc, #136]	; (80038ec <HAL_RTC_SetDate+0x168>)
 8003864:	fb02 f303 	mul.w	r3, r2, r3
 8003868:	69fa      	ldr	r2, [r7, #28]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800386e:	69f9      	ldr	r1, [r7, #28]
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f000 f89a 	bl	80039aa <RTC_WriteTimeCounter>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d007      	beq.n	800388c <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2204      	movs	r2, #4
 8003880:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e027      	b.n	80038dc <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f000 f8b3 	bl	80039f8 <RTC_ReadAlarmCounter>
 8003892:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389a:	d018      	beq.n	80038ce <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d214      	bcs.n	80038ce <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80038aa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80038ae:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80038b0:	69b9      	ldr	r1, [r7, #24]
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 f8b9 	bl	8003a2a <RTC_WriteAlarmCounter>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d007      	beq.n	80038ce <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2204      	movs	r2, #4
 80038c2:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e006      	b.n	80038dc <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2201      	movs	r2, #1
 80038d2:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3720      	adds	r7, #32
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	91a2b3c5 	.word	0x91a2b3c5
 80038e8:	aaaaaaab 	.word	0xaaaaaaab
 80038ec:	00015180 	.word	0x00015180

080038f0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038f8:	2300      	movs	r3, #0
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e01d      	b.n	8003942 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0208 	bic.w	r2, r2, #8
 8003914:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003916:	f7fe f8f5 	bl	8001b04 <HAL_GetTick>
 800391a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800391c:	e009      	b.n	8003932 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800391e:	f7fe f8f1 	bl	8001b04 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800392c:	d901      	bls.n	8003932 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e007      	b.n	8003942 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0ee      	beq.n	800391e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800394a:	b480      	push	{r7}
 800394c:	b087      	sub	sp, #28
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8003952:	2300      	movs	r3, #0
 8003954:	827b      	strh	r3, [r7, #18]
 8003956:	2300      	movs	r3, #0
 8003958:	823b      	strh	r3, [r7, #16]
 800395a:	2300      	movs	r3, #0
 800395c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800395e:	2300      	movs	r3, #0
 8003960:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800397a:	8a7a      	ldrh	r2, [r7, #18]
 800397c:	8a3b      	ldrh	r3, [r7, #16]
 800397e:	429a      	cmp	r2, r3
 8003980:	d008      	beq.n	8003994 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003982:	8a3b      	ldrh	r3, [r7, #16]
 8003984:	041a      	lsls	r2, r3, #16
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	b29b      	uxth	r3, r3
 800398e:	4313      	orrs	r3, r2
 8003990:	617b      	str	r3, [r7, #20]
 8003992:	e004      	b.n	800399e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003994:	8a7b      	ldrh	r3, [r7, #18]
 8003996:	041a      	lsls	r2, r3, #16
 8003998:	89fb      	ldrh	r3, [r7, #14]
 800399a:	4313      	orrs	r3, r2
 800399c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800399e:	697b      	ldr	r3, [r7, #20]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	371c      	adds	r7, #28
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bc80      	pop	{r7}
 80039a8:	4770      	bx	lr

080039aa <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b084      	sub	sp, #16
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
 80039b2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039b4:	2300      	movs	r3, #0
 80039b6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f85d 	bl	8003a78 <RTC_EnterInitMode>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	73fb      	strb	r3, [r7, #15]
 80039c8:	e011      	b.n	80039ee <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	0c12      	lsrs	r2, r2, #16
 80039d2:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	b292      	uxth	r2, r2
 80039dc:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f872 	bl	8003ac8 <RTC_ExitInitMode>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	81fb      	strh	r3, [r7, #14]
 8003a04:	2300      	movs	r3, #0
 8003a06:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003a18:	89fb      	ldrh	r3, [r7, #14]
 8003a1a:	041a      	lsls	r2, r3, #16
 8003a1c:	89bb      	ldrh	r3, [r7, #12]
 8003a1e:	4313      	orrs	r3, r2
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bc80      	pop	{r7}
 8003a28:	4770      	bx	lr

08003a2a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b084      	sub	sp, #16
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
 8003a32:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 f81d 	bl	8003a78 <RTC_EnterInitMode>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d002      	beq.n	8003a4a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	73fb      	strb	r3, [r7, #15]
 8003a48:	e011      	b.n	8003a6e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	0c12      	lsrs	r2, r2, #16
 8003a52:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	b292      	uxth	r2, r2
 8003a5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f832 	bl	8003ac8 <RTC_ExitInitMode>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a80:	2300      	movs	r3, #0
 8003a82:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003a84:	f7fe f83e 	bl	8001b04 <HAL_GetTick>
 8003a88:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003a8a:	e009      	b.n	8003aa0 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003a8c:	f7fe f83a 	bl	8001b04 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a9a:	d901      	bls.n	8003aa0 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e00f      	b.n	8003ac0 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0ee      	beq.n	8003a8c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f042 0210 	orr.w	r2, r2, #16
 8003abc:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0210 	bic.w	r2, r2, #16
 8003ae2:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003ae4:	f7fe f80e 	bl	8001b04 <HAL_GetTick>
 8003ae8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003aea:	e009      	b.n	8003b00 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003aec:	f7fe f80a 	bl	8001b04 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003afa:	d901      	bls.n	8003b00 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e007      	b.n	8003b10 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f003 0320 	and.w	r3, r3, #32
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0ee      	beq.n	8003aec <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003b26:	79fb      	ldrb	r3, [r7, #7]
 8003b28:	091b      	lsrs	r3, r3, #4
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	4613      	mov	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	4413      	add	r3, r2
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003b38:	79fb      	ldrb	r3, [r7, #7]
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	4413      	add	r3, r2
 8003b46:	b2db      	uxtb	r3, r3
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3714      	adds	r7, #20
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bc80      	pop	{r7}
 8003b50:	4770      	bx	lr
	...

08003b54 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	70fb      	strb	r3, [r7, #3]
 8003b60:	4613      	mov	r3, r2
 8003b62:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	60bb      	str	r3, [r7, #8]
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003b72:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003b74:	78fb      	ldrb	r3, [r7, #3]
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d82d      	bhi.n	8003bd6 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003b7a:	78fa      	ldrb	r2, [r7, #3]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	4413      	add	r3, r2
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	1a9b      	subs	r3, r3, r2
 8003b86:	4a2c      	ldr	r2, [pc, #176]	; (8003c38 <RTC_WeekDayNum+0xe4>)
 8003b88:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8c:	085a      	lsrs	r2, r3, #1
 8003b8e:	78bb      	ldrb	r3, [r7, #2]
 8003b90:	441a      	add	r2, r3
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	441a      	add	r2, r3
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	089b      	lsrs	r3, r3, #2
 8003b9c:	441a      	add	r2, r3
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	4926      	ldr	r1, [pc, #152]	; (8003c3c <RTC_WeekDayNum+0xe8>)
 8003ba4:	fba1 1303 	umull	r1, r3, r1, r3
 8003ba8:	095b      	lsrs	r3, r3, #5
 8003baa:	1ad2      	subs	r2, r2, r3
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	4922      	ldr	r1, [pc, #136]	; (8003c3c <RTC_WeekDayNum+0xe8>)
 8003bb2:	fba1 1303 	umull	r1, r3, r1, r3
 8003bb6:	09db      	lsrs	r3, r3, #7
 8003bb8:	4413      	add	r3, r2
 8003bba:	1d1a      	adds	r2, r3, #4
 8003bbc:	4b20      	ldr	r3, [pc, #128]	; (8003c40 <RTC_WeekDayNum+0xec>)
 8003bbe:	fba3 1302 	umull	r1, r3, r3, r2
 8003bc2:	1ad1      	subs	r1, r2, r3
 8003bc4:	0849      	lsrs	r1, r1, #1
 8003bc6:	440b      	add	r3, r1
 8003bc8:	0899      	lsrs	r1, r3, #2
 8003bca:	460b      	mov	r3, r1
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	1a5b      	subs	r3, r3, r1
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	e029      	b.n	8003c2a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003bd6:	78fa      	ldrb	r2, [r7, #3]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	4413      	add	r3, r2
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	1a9b      	subs	r3, r3, r2
 8003be2:	4a15      	ldr	r2, [pc, #84]	; (8003c38 <RTC_WeekDayNum+0xe4>)
 8003be4:	fba2 2303 	umull	r2, r3, r2, r3
 8003be8:	085a      	lsrs	r2, r3, #1
 8003bea:	78bb      	ldrb	r3, [r7, #2]
 8003bec:	441a      	add	r2, r3
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	441a      	add	r2, r3
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	089b      	lsrs	r3, r3, #2
 8003bf6:	441a      	add	r2, r3
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	4910      	ldr	r1, [pc, #64]	; (8003c3c <RTC_WeekDayNum+0xe8>)
 8003bfc:	fba1 1303 	umull	r1, r3, r1, r3
 8003c00:	095b      	lsrs	r3, r3, #5
 8003c02:	1ad2      	subs	r2, r2, r3
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	490d      	ldr	r1, [pc, #52]	; (8003c3c <RTC_WeekDayNum+0xe8>)
 8003c08:	fba1 1303 	umull	r1, r3, r1, r3
 8003c0c:	09db      	lsrs	r3, r3, #7
 8003c0e:	4413      	add	r3, r2
 8003c10:	1c9a      	adds	r2, r3, #2
 8003c12:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <RTC_WeekDayNum+0xec>)
 8003c14:	fba3 1302 	umull	r1, r3, r3, r2
 8003c18:	1ad1      	subs	r1, r2, r3
 8003c1a:	0849      	lsrs	r1, r1, #1
 8003c1c:	440b      	add	r3, r1
 8003c1e:	0899      	lsrs	r1, r3, #2
 8003c20:	460b      	mov	r3, r1
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	1a5b      	subs	r3, r3, r1
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	b2db      	uxtb	r3, r3
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr
 8003c38:	38e38e39 	.word	0x38e38e39
 8003c3c:	51eb851f 	.word	0x51eb851f
 8003c40:	24924925 	.word	0x24924925

08003c44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e041      	b.n	8003cda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d106      	bne.n	8003c70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7fd fd74 	bl	8001758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3304      	adds	r3, #4
 8003c80:	4619      	mov	r1, r3
 8003c82:	4610      	mov	r0, r2
 8003c84:	f000 fc1c 	bl	80044c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
	...

08003ce4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d001      	beq.n	8003cfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e03a      	b.n	8003d72 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0201 	orr.w	r2, r2, #1
 8003d12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a18      	ldr	r2, [pc, #96]	; (8003d7c <HAL_TIM_Base_Start_IT+0x98>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d00e      	beq.n	8003d3c <HAL_TIM_Base_Start_IT+0x58>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d26:	d009      	beq.n	8003d3c <HAL_TIM_Base_Start_IT+0x58>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a14      	ldr	r2, [pc, #80]	; (8003d80 <HAL_TIM_Base_Start_IT+0x9c>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d004      	beq.n	8003d3c <HAL_TIM_Base_Start_IT+0x58>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a13      	ldr	r2, [pc, #76]	; (8003d84 <HAL_TIM_Base_Start_IT+0xa0>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d111      	bne.n	8003d60 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2b06      	cmp	r3, #6
 8003d4c:	d010      	beq.n	8003d70 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f042 0201 	orr.w	r2, r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d5e:	e007      	b.n	8003d70 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0201 	orr.w	r2, r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bc80      	pop	{r7}
 8003d7a:	4770      	bx	lr
 8003d7c:	40012c00 	.word	0x40012c00
 8003d80:	40000400 	.word	0x40000400
 8003d84:	40000800 	.word	0x40000800

08003d88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e041      	b.n	8003e1e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d106      	bne.n	8003db4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f839 	bl	8003e26 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	f000 fb7a 	bl	80044c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e2e:	bf00      	nop
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bc80      	pop	{r7}
 8003e36:	4770      	bx	lr

08003e38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d109      	bne.n	8003e5c <HAL_TIM_PWM_Start+0x24>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	bf14      	ite	ne
 8003e54:	2301      	movne	r3, #1
 8003e56:	2300      	moveq	r3, #0
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	e022      	b.n	8003ea2 <HAL_TIM_PWM_Start+0x6a>
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d109      	bne.n	8003e76 <HAL_TIM_PWM_Start+0x3e>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	bf14      	ite	ne
 8003e6e:	2301      	movne	r3, #1
 8003e70:	2300      	moveq	r3, #0
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	e015      	b.n	8003ea2 <HAL_TIM_PWM_Start+0x6a>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b08      	cmp	r3, #8
 8003e7a:	d109      	bne.n	8003e90 <HAL_TIM_PWM_Start+0x58>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	bf14      	ite	ne
 8003e88:	2301      	movne	r3, #1
 8003e8a:	2300      	moveq	r3, #0
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	e008      	b.n	8003ea2 <HAL_TIM_PWM_Start+0x6a>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	bf14      	ite	ne
 8003e9c:	2301      	movne	r3, #1
 8003e9e:	2300      	moveq	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e05e      	b.n	8003f68 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d104      	bne.n	8003eba <HAL_TIM_PWM_Start+0x82>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eb8:	e013      	b.n	8003ee2 <HAL_TIM_PWM_Start+0xaa>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d104      	bne.n	8003eca <HAL_TIM_PWM_Start+0x92>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ec8:	e00b      	b.n	8003ee2 <HAL_TIM_PWM_Start+0xaa>
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	2b08      	cmp	r3, #8
 8003ece:	d104      	bne.n	8003eda <HAL_TIM_PWM_Start+0xa2>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ed8:	e003      	b.n	8003ee2 <HAL_TIM_PWM_Start+0xaa>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2202      	movs	r2, #2
 8003ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	6839      	ldr	r1, [r7, #0]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 fd68 	bl	80049c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a1e      	ldr	r2, [pc, #120]	; (8003f70 <HAL_TIM_PWM_Start+0x138>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d107      	bne.n	8003f0a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a18      	ldr	r2, [pc, #96]	; (8003f70 <HAL_TIM_PWM_Start+0x138>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d00e      	beq.n	8003f32 <HAL_TIM_PWM_Start+0xfa>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f1c:	d009      	beq.n	8003f32 <HAL_TIM_PWM_Start+0xfa>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a14      	ldr	r2, [pc, #80]	; (8003f74 <HAL_TIM_PWM_Start+0x13c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d004      	beq.n	8003f32 <HAL_TIM_PWM_Start+0xfa>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a12      	ldr	r2, [pc, #72]	; (8003f78 <HAL_TIM_PWM_Start+0x140>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d111      	bne.n	8003f56 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f003 0307 	and.w	r3, r3, #7
 8003f3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2b06      	cmp	r3, #6
 8003f42:	d010      	beq.n	8003f66 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f042 0201 	orr.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f54:	e007      	b.n	8003f66 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f042 0201 	orr.w	r2, r2, #1
 8003f64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40012c00 	.word	0x40012c00
 8003f74:	40000400 	.word	0x40000400
 8003f78:	40000800 	.word	0x40000800

08003f7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d122      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d11b      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f06f 0202 	mvn.w	r2, #2
 8003fa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	f003 0303 	and.w	r3, r3, #3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fa62 	bl	8004488 <HAL_TIM_IC_CaptureCallback>
 8003fc4:	e005      	b.n	8003fd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 fa55 	bl	8004476 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 fa64 	bl	800449a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	f003 0304 	and.w	r3, r3, #4
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d122      	bne.n	800402c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b04      	cmp	r3, #4
 8003ff2:	d11b      	bne.n	800402c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f06f 0204 	mvn.w	r2, #4
 8003ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2202      	movs	r2, #2
 8004002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 fa38 	bl	8004488 <HAL_TIM_IC_CaptureCallback>
 8004018:	e005      	b.n	8004026 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 fa2b 	bl	8004476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 fa3a 	bl	800449a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	2b08      	cmp	r3, #8
 8004038:	d122      	bne.n	8004080 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	2b08      	cmp	r3, #8
 8004046:	d11b      	bne.n	8004080 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f06f 0208 	mvn.w	r2, #8
 8004050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2204      	movs	r2, #4
 8004056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	f003 0303 	and.w	r3, r3, #3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 fa0e 	bl	8004488 <HAL_TIM_IC_CaptureCallback>
 800406c:	e005      	b.n	800407a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 fa01 	bl	8004476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 fa10 	bl	800449a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	f003 0310 	and.w	r3, r3, #16
 800408a:	2b10      	cmp	r3, #16
 800408c:	d122      	bne.n	80040d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f003 0310 	and.w	r3, r3, #16
 8004098:	2b10      	cmp	r3, #16
 800409a:	d11b      	bne.n	80040d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f06f 0210 	mvn.w	r2, #16
 80040a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2208      	movs	r2, #8
 80040aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f9e4 	bl	8004488 <HAL_TIM_IC_CaptureCallback>
 80040c0:	e005      	b.n	80040ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f9d7 	bl	8004476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f9e6 	bl	800449a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d10e      	bne.n	8004100 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d107      	bne.n	8004100 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f06f 0201 	mvn.w	r2, #1
 80040f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7fc fe7a 	bl	8000df4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800410a:	2b80      	cmp	r3, #128	; 0x80
 800410c:	d10e      	bne.n	800412c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004118:	2b80      	cmp	r3, #128	; 0x80
 800411a:	d107      	bne.n	800412c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 fcd5 	bl	8004ad6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004136:	2b40      	cmp	r3, #64	; 0x40
 8004138:	d10e      	bne.n	8004158 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004144:	2b40      	cmp	r3, #64	; 0x40
 8004146:	d107      	bne.n	8004158 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f9aa 	bl	80044ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	f003 0320 	and.w	r3, r3, #32
 8004162:	2b20      	cmp	r3, #32
 8004164:	d10e      	bne.n	8004184 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f003 0320 	and.w	r3, r3, #32
 8004170:	2b20      	cmp	r3, #32
 8004172:	d107      	bne.n	8004184 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f06f 0220 	mvn.w	r2, #32
 800417c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 fca0 	bl	8004ac4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004184:	bf00      	nop
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d101      	bne.n	80041a6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80041a2:	2302      	movs	r3, #2
 80041a4:	e0ac      	b.n	8004300 <HAL_TIM_PWM_ConfigChannel+0x174>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2b0c      	cmp	r3, #12
 80041b2:	f200 809f 	bhi.w	80042f4 <HAL_TIM_PWM_ConfigChannel+0x168>
 80041b6:	a201      	add	r2, pc, #4	; (adr r2, 80041bc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80041b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041bc:	080041f1 	.word	0x080041f1
 80041c0:	080042f5 	.word	0x080042f5
 80041c4:	080042f5 	.word	0x080042f5
 80041c8:	080042f5 	.word	0x080042f5
 80041cc:	08004231 	.word	0x08004231
 80041d0:	080042f5 	.word	0x080042f5
 80041d4:	080042f5 	.word	0x080042f5
 80041d8:	080042f5 	.word	0x080042f5
 80041dc:	08004273 	.word	0x08004273
 80041e0:	080042f5 	.word	0x080042f5
 80041e4:	080042f5 	.word	0x080042f5
 80041e8:	080042f5 	.word	0x080042f5
 80041ec:	080042b3 	.word	0x080042b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68b9      	ldr	r1, [r7, #8]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 f9c4 	bl	8004584 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699a      	ldr	r2, [r3, #24]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0208 	orr.w	r2, r2, #8
 800420a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699a      	ldr	r2, [r3, #24]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0204 	bic.w	r2, r2, #4
 800421a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6999      	ldr	r1, [r3, #24]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	691a      	ldr	r2, [r3, #16]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	619a      	str	r2, [r3, #24]
      break;
 800422e:	e062      	b.n	80042f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68b9      	ldr	r1, [r7, #8]
 8004236:	4618      	mov	r0, r3
 8004238:	f000 fa0a 	bl	8004650 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	699a      	ldr	r2, [r3, #24]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800424a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699a      	ldr	r2, [r3, #24]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800425a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6999      	ldr	r1, [r3, #24]
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	021a      	lsls	r2, r3, #8
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	619a      	str	r2, [r3, #24]
      break;
 8004270:	e041      	b.n	80042f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68b9      	ldr	r1, [r7, #8]
 8004278:	4618      	mov	r0, r3
 800427a:	f000 fa53 	bl	8004724 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	69da      	ldr	r2, [r3, #28]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f042 0208 	orr.w	r2, r2, #8
 800428c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	69da      	ldr	r2, [r3, #28]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0204 	bic.w	r2, r2, #4
 800429c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	69d9      	ldr	r1, [r3, #28]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	61da      	str	r2, [r3, #28]
      break;
 80042b0:	e021      	b.n	80042f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68b9      	ldr	r1, [r7, #8]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 fa9d 	bl	80047f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	69da      	ldr	r2, [r3, #28]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	69da      	ldr	r2, [r3, #28]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	69d9      	ldr	r1, [r3, #28]
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	021a      	lsls	r2, r3, #8
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	61da      	str	r2, [r3, #28]
      break;
 80042f2:	e000      	b.n	80042f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80042f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_TIM_ConfigClockSource+0x18>
 800431c:	2302      	movs	r3, #2
 800431e:	e0a6      	b.n	800446e <HAL_TIM_ConfigClockSource+0x166>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2202      	movs	r2, #2
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800433e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004346:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2b40      	cmp	r3, #64	; 0x40
 8004356:	d067      	beq.n	8004428 <HAL_TIM_ConfigClockSource+0x120>
 8004358:	2b40      	cmp	r3, #64	; 0x40
 800435a:	d80b      	bhi.n	8004374 <HAL_TIM_ConfigClockSource+0x6c>
 800435c:	2b10      	cmp	r3, #16
 800435e:	d073      	beq.n	8004448 <HAL_TIM_ConfigClockSource+0x140>
 8004360:	2b10      	cmp	r3, #16
 8004362:	d802      	bhi.n	800436a <HAL_TIM_ConfigClockSource+0x62>
 8004364:	2b00      	cmp	r3, #0
 8004366:	d06f      	beq.n	8004448 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004368:	e078      	b.n	800445c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800436a:	2b20      	cmp	r3, #32
 800436c:	d06c      	beq.n	8004448 <HAL_TIM_ConfigClockSource+0x140>
 800436e:	2b30      	cmp	r3, #48	; 0x30
 8004370:	d06a      	beq.n	8004448 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004372:	e073      	b.n	800445c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004374:	2b70      	cmp	r3, #112	; 0x70
 8004376:	d00d      	beq.n	8004394 <HAL_TIM_ConfigClockSource+0x8c>
 8004378:	2b70      	cmp	r3, #112	; 0x70
 800437a:	d804      	bhi.n	8004386 <HAL_TIM_ConfigClockSource+0x7e>
 800437c:	2b50      	cmp	r3, #80	; 0x50
 800437e:	d033      	beq.n	80043e8 <HAL_TIM_ConfigClockSource+0xe0>
 8004380:	2b60      	cmp	r3, #96	; 0x60
 8004382:	d041      	beq.n	8004408 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004384:	e06a      	b.n	800445c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800438a:	d066      	beq.n	800445a <HAL_TIM_ConfigClockSource+0x152>
 800438c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004390:	d017      	beq.n	80043c2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004392:	e063      	b.n	800445c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6818      	ldr	r0, [r3, #0]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	6899      	ldr	r1, [r3, #8]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f000 faed 	bl	8004982 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043b6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	609a      	str	r2, [r3, #8]
      break;
 80043c0:	e04c      	b.n	800445c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6818      	ldr	r0, [r3, #0]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	6899      	ldr	r1, [r3, #8]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f000 fad6 	bl	8004982 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043e4:	609a      	str	r2, [r3, #8]
      break;
 80043e6:	e039      	b.n	800445c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6818      	ldr	r0, [r3, #0]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	6859      	ldr	r1, [r3, #4]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	461a      	mov	r2, r3
 80043f6:	f000 fa4d 	bl	8004894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2150      	movs	r1, #80	; 0x50
 8004400:	4618      	mov	r0, r3
 8004402:	f000 faa4 	bl	800494e <TIM_ITRx_SetConfig>
      break;
 8004406:	e029      	b.n	800445c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6818      	ldr	r0, [r3, #0]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	6859      	ldr	r1, [r3, #4]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	461a      	mov	r2, r3
 8004416:	f000 fa6b 	bl	80048f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2160      	movs	r1, #96	; 0x60
 8004420:	4618      	mov	r0, r3
 8004422:	f000 fa94 	bl	800494e <TIM_ITRx_SetConfig>
      break;
 8004426:	e019      	b.n	800445c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	6859      	ldr	r1, [r3, #4]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	461a      	mov	r2, r3
 8004436:	f000 fa2d 	bl	8004894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2140      	movs	r1, #64	; 0x40
 8004440:	4618      	mov	r0, r3
 8004442:	f000 fa84 	bl	800494e <TIM_ITRx_SetConfig>
      break;
 8004446:	e009      	b.n	800445c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4619      	mov	r1, r3
 8004452:	4610      	mov	r0, r2
 8004454:	f000 fa7b 	bl	800494e <TIM_ITRx_SetConfig>
        break;
 8004458:	e000      	b.n	800445c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800445a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	bc80      	pop	{r7}
 8004486:	4770      	bx	lr

08004488 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	bc80      	pop	{r7}
 8004498:	4770      	bx	lr

0800449a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800449a:	b480      	push	{r7}
 800449c:	b083      	sub	sp, #12
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044a2:	bf00      	nop
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bc80      	pop	{r7}
 80044aa:	4770      	bx	lr

080044ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bc80      	pop	{r7}
 80044bc:	4770      	bx	lr
	...

080044c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a29      	ldr	r2, [pc, #164]	; (8004578 <TIM_Base_SetConfig+0xb8>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d00b      	beq.n	80044f0 <TIM_Base_SetConfig+0x30>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044de:	d007      	beq.n	80044f0 <TIM_Base_SetConfig+0x30>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a26      	ldr	r2, [pc, #152]	; (800457c <TIM_Base_SetConfig+0xbc>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d003      	beq.n	80044f0 <TIM_Base_SetConfig+0x30>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a25      	ldr	r2, [pc, #148]	; (8004580 <TIM_Base_SetConfig+0xc0>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d108      	bne.n	8004502 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	4313      	orrs	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a1c      	ldr	r2, [pc, #112]	; (8004578 <TIM_Base_SetConfig+0xb8>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d00b      	beq.n	8004522 <TIM_Base_SetConfig+0x62>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004510:	d007      	beq.n	8004522 <TIM_Base_SetConfig+0x62>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a19      	ldr	r2, [pc, #100]	; (800457c <TIM_Base_SetConfig+0xbc>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d003      	beq.n	8004522 <TIM_Base_SetConfig+0x62>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a18      	ldr	r2, [pc, #96]	; (8004580 <TIM_Base_SetConfig+0xc0>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d108      	bne.n	8004534 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004528:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	4313      	orrs	r3, r2
 8004532:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	4313      	orrs	r3, r2
 8004540:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a07      	ldr	r2, [pc, #28]	; (8004578 <TIM_Base_SetConfig+0xb8>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d103      	bne.n	8004568 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	691a      	ldr	r2, [r3, #16]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	615a      	str	r2, [r3, #20]
}
 800456e:	bf00      	nop
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	bc80      	pop	{r7}
 8004576:	4770      	bx	lr
 8004578:	40012c00 	.word	0x40012c00
 800457c:	40000400 	.word	0x40000400
 8004580:	40000800 	.word	0x40000800

08004584 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	f023 0201 	bic.w	r2, r3, #1
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 0303 	bic.w	r3, r3, #3
 80045ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f023 0302 	bic.w	r3, r3, #2
 80045cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a1c      	ldr	r2, [pc, #112]	; (800464c <TIM_OC1_SetConfig+0xc8>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d10c      	bne.n	80045fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f023 0308 	bic.w	r3, r3, #8
 80045e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f023 0304 	bic.w	r3, r3, #4
 80045f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a13      	ldr	r2, [pc, #76]	; (800464c <TIM_OC1_SetConfig+0xc8>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d111      	bne.n	8004626 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004608:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004610:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	4313      	orrs	r3, r2
 800461a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	4313      	orrs	r3, r2
 8004624:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	621a      	str	r2, [r3, #32]
}
 8004640:	bf00      	nop
 8004642:	371c      	adds	r7, #28
 8004644:	46bd      	mov	sp, r7
 8004646:	bc80      	pop	{r7}
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	40012c00 	.word	0x40012c00

08004650 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004650:	b480      	push	{r7}
 8004652:	b087      	sub	sp, #28
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	f023 0210 	bic.w	r2, r3, #16
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800467e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004686:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	021b      	lsls	r3, r3, #8
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	4313      	orrs	r3, r2
 8004692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f023 0320 	bic.w	r3, r3, #32
 800469a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	011b      	lsls	r3, r3, #4
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a1d      	ldr	r2, [pc, #116]	; (8004720 <TIM_OC2_SetConfig+0xd0>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d10d      	bne.n	80046cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	011b      	lsls	r3, r3, #4
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a14      	ldr	r2, [pc, #80]	; (8004720 <TIM_OC2_SetConfig+0xd0>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d113      	bne.n	80046fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	697a      	ldr	r2, [r7, #20]
 8004714:	621a      	str	r2, [r3, #32]
}
 8004716:	bf00      	nop
 8004718:	371c      	adds	r7, #28
 800471a:	46bd      	mov	sp, r7
 800471c:	bc80      	pop	{r7}
 800471e:	4770      	bx	lr
 8004720:	40012c00 	.word	0x40012c00

08004724 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004724:	b480      	push	{r7}
 8004726:	b087      	sub	sp, #28
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f023 0303 	bic.w	r3, r3, #3
 800475a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	4313      	orrs	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800476c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	021b      	lsls	r3, r3, #8
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	4313      	orrs	r3, r2
 8004778:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a1d      	ldr	r2, [pc, #116]	; (80047f4 <TIM_OC3_SetConfig+0xd0>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d10d      	bne.n	800479e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004788:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	021b      	lsls	r3, r3, #8
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	4313      	orrs	r3, r2
 8004794:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800479c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a14      	ldr	r2, [pc, #80]	; (80047f4 <TIM_OC3_SetConfig+0xd0>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d113      	bne.n	80047ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4313      	orrs	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	011b      	lsls	r3, r3, #4
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	621a      	str	r2, [r3, #32]
}
 80047e8:	bf00      	nop
 80047ea:	371c      	adds	r7, #28
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bc80      	pop	{r7}
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	40012c00 	.word	0x40012c00

080047f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b087      	sub	sp, #28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800482e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	021b      	lsls	r3, r3, #8
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	4313      	orrs	r3, r2
 800483a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004842:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	031b      	lsls	r3, r3, #12
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	4313      	orrs	r3, r2
 800484e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a0f      	ldr	r2, [pc, #60]	; (8004890 <TIM_OC4_SetConfig+0x98>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d109      	bne.n	800486c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800485e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	019b      	lsls	r3, r3, #6
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	4313      	orrs	r3, r2
 800486a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	621a      	str	r2, [r3, #32]
}
 8004886:	bf00      	nop
 8004888:	371c      	adds	r7, #28
 800488a:	46bd      	mov	sp, r7
 800488c:	bc80      	pop	{r7}
 800488e:	4770      	bx	lr
 8004890:	40012c00 	.word	0x40012c00

08004894 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	f023 0201 	bic.w	r2, r3, #1
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f023 030a 	bic.w	r3, r3, #10
 80048d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	621a      	str	r2, [r3, #32]
}
 80048e6:	bf00      	nop
 80048e8:	371c      	adds	r7, #28
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bc80      	pop	{r7}
 80048ee:	4770      	bx	lr

080048f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b087      	sub	sp, #28
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	f023 0210 	bic.w	r2, r3, #16
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800491a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	031b      	lsls	r3, r3, #12
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	4313      	orrs	r3, r2
 8004924:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800492c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	011b      	lsls	r3, r3, #4
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	4313      	orrs	r3, r2
 8004936:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	621a      	str	r2, [r3, #32]
}
 8004944:	bf00      	nop
 8004946:	371c      	adds	r7, #28
 8004948:	46bd      	mov	sp, r7
 800494a:	bc80      	pop	{r7}
 800494c:	4770      	bx	lr

0800494e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800494e:	b480      	push	{r7}
 8004950:	b085      	sub	sp, #20
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004964:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4313      	orrs	r3, r2
 800496c:	f043 0307 	orr.w	r3, r3, #7
 8004970:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	609a      	str	r2, [r3, #8]
}
 8004978:	bf00      	nop
 800497a:	3714      	adds	r7, #20
 800497c:	46bd      	mov	sp, r7
 800497e:	bc80      	pop	{r7}
 8004980:	4770      	bx	lr

08004982 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004982:	b480      	push	{r7}
 8004984:	b087      	sub	sp, #28
 8004986:	af00      	add	r7, sp, #0
 8004988:	60f8      	str	r0, [r7, #12]
 800498a:	60b9      	str	r1, [r7, #8]
 800498c:	607a      	str	r2, [r7, #4]
 800498e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800499c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	021a      	lsls	r2, r3, #8
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	431a      	orrs	r2, r3
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	609a      	str	r2, [r3, #8]
}
 80049b6:	bf00      	nop
 80049b8:	371c      	adds	r7, #28
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bc80      	pop	{r7}
 80049be:	4770      	bx	lr

080049c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b087      	sub	sp, #28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	f003 031f 	and.w	r3, r3, #31
 80049d2:	2201      	movs	r2, #1
 80049d4:	fa02 f303 	lsl.w	r3, r2, r3
 80049d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6a1a      	ldr	r2, [r3, #32]
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	43db      	mvns	r3, r3
 80049e2:	401a      	ands	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6a1a      	ldr	r2, [r3, #32]
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f003 031f 	and.w	r3, r3, #31
 80049f2:	6879      	ldr	r1, [r7, #4]
 80049f4:	fa01 f303 	lsl.w	r3, r1, r3
 80049f8:	431a      	orrs	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	621a      	str	r2, [r3, #32]
}
 80049fe:	bf00      	nop
 8004a00:	371c      	adds	r7, #28
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bc80      	pop	{r7}
 8004a06:	4770      	bx	lr

08004a08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d101      	bne.n	8004a20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	e046      	b.n	8004aae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a16      	ldr	r2, [pc, #88]	; (8004ab8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d00e      	beq.n	8004a82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a6c:	d009      	beq.n	8004a82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a12      	ldr	r2, [pc, #72]	; (8004abc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d004      	beq.n	8004a82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a10      	ldr	r2, [pc, #64]	; (8004ac0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d10c      	bne.n	8004a9c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr
 8004ab8:	40012c00 	.word	0x40012c00
 8004abc:	40000400 	.word	0x40000400
 8004ac0:	40000800 	.word	0x40000800

08004ac4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bc80      	pop	{r7}
 8004ad4:	4770      	bx	lr

08004ad6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b083      	sub	sp, #12
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ade:	bf00      	nop
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bc80      	pop	{r7}
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e03f      	b.n	8004b7a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d106      	bne.n	8004b14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fc fee6 	bl	80018e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2224      	movs	r2, #36	; 0x24
 8004b18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 fbd7 	bl	80052e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	691a      	ldr	r2, [r3, #16]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	695a      	ldr	r2, [r3, #20]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68da      	ldr	r2, [r3, #12]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3708      	adds	r7, #8
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b08a      	sub	sp, #40	; 0x28
 8004b86:	af02      	add	r7, sp, #8
 8004b88:	60f8      	str	r0, [r7, #12]
 8004b8a:	60b9      	str	r1, [r7, #8]
 8004b8c:	603b      	str	r3, [r7, #0]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b92:	2300      	movs	r3, #0
 8004b94:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b20      	cmp	r3, #32
 8004ba0:	d17c      	bne.n	8004c9c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <HAL_UART_Transmit+0x2c>
 8004ba8:	88fb      	ldrh	r3, [r7, #6]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e075      	b.n	8004c9e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d101      	bne.n	8004bc0 <HAL_UART_Transmit+0x3e>
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	e06e      	b.n	8004c9e <HAL_UART_Transmit+0x11c>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2221      	movs	r2, #33	; 0x21
 8004bd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004bd6:	f7fc ff95 	bl	8001b04 <HAL_GetTick>
 8004bda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	88fa      	ldrh	r2, [r7, #6]
 8004be0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	88fa      	ldrh	r2, [r7, #6]
 8004be6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf0:	d108      	bne.n	8004c04 <HAL_UART_Transmit+0x82>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d104      	bne.n	8004c04 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	61bb      	str	r3, [r7, #24]
 8004c02:	e003      	b.n	8004c0c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004c14:	e02a      	b.n	8004c6c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	2180      	movs	r1, #128	; 0x80
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f000 f9fa 	bl	800501a <UART_WaitOnFlagUntilTimeout>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e036      	b.n	8004c9e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10b      	bne.n	8004c4e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	881b      	ldrh	r3, [r3, #0]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	3302      	adds	r3, #2
 8004c4a:	61bb      	str	r3, [r7, #24]
 8004c4c:	e007      	b.n	8004c5e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	781a      	ldrb	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	3b01      	subs	r3, #1
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1cf      	bne.n	8004c16 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	2140      	movs	r1, #64	; 0x40
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 f9ca 	bl	800501a <UART_WaitOnFlagUntilTimeout>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e006      	b.n	8004c9e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2220      	movs	r2, #32
 8004c94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	e000      	b.n	8004c9e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004c9c:	2302      	movs	r3, #2
  }
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3720      	adds	r7, #32
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b08a      	sub	sp, #40	; 0x28
 8004caa:	af02      	add	r7, sp, #8
 8004cac:	60f8      	str	r0, [r7, #12]
 8004cae:	60b9      	str	r1, [r7, #8]
 8004cb0:	603b      	str	r3, [r7, #0]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b20      	cmp	r3, #32
 8004cc4:	f040 8089 	bne.w	8004dda <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <HAL_UART_Receive+0x2e>
 8004cce:	88fb      	ldrh	r3, [r7, #6]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d101      	bne.n	8004cd8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e081      	b.n	8004ddc <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d101      	bne.n	8004ce6 <HAL_UART_Receive+0x40>
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	e07a      	b.n	8004ddc <HAL_UART_Receive+0x136>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2222      	movs	r2, #34	; 0x22
 8004cf8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004cfc:	f7fc ff02 	bl	8001b04 <HAL_GetTick>
 8004d00:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	88fa      	ldrh	r2, [r7, #6]
 8004d06:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	88fa      	ldrh	r2, [r7, #6]
 8004d0c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d16:	d108      	bne.n	8004d2a <HAL_UART_Receive+0x84>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d104      	bne.n	8004d2a <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8004d20:	2300      	movs	r3, #0
 8004d22:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	61bb      	str	r3, [r7, #24]
 8004d28:	e003      	b.n	8004d32 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004d3a:	e043      	b.n	8004dc4 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	2200      	movs	r2, #0
 8004d44:	2120      	movs	r1, #32
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 f967 	bl	800501a <UART_WaitOnFlagUntilTimeout>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e042      	b.n	8004ddc <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10c      	bne.n	8004d76 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	3302      	adds	r3, #2
 8004d72:	61bb      	str	r3, [r7, #24]
 8004d74:	e01f      	b.n	8004db6 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d7e:	d007      	beq.n	8004d90 <HAL_UART_Receive+0xea>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10a      	bne.n	8004d9e <HAL_UART_Receive+0xf8>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d106      	bne.n	8004d9e <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	701a      	strb	r2, [r3, #0]
 8004d9c:	e008      	b.n	8004db0 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004daa:	b2da      	uxtb	r2, r3
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	3301      	adds	r3, #1
 8004db4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1b6      	bne.n	8004d3c <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	e000      	b.n	8004ddc <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004dda:	2302      	movs	r3, #2
  }
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3720      	adds	r7, #32
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b088      	sub	sp, #32
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004e04:	2300      	movs	r3, #0
 8004e06:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	f003 030f 	and.w	r3, r3, #15
 8004e12:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10d      	bne.n	8004e36 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	f003 0320 	and.w	r3, r3, #32
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d008      	beq.n	8004e36 <HAL_UART_IRQHandler+0x52>
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	f003 0320 	and.w	r3, r3, #32
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f9d5 	bl	80051de <UART_Receive_IT>
      return;
 8004e34:	e0d1      	b.n	8004fda <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 80b0 	beq.w	8004f9e <HAL_UART_IRQHandler+0x1ba>
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d105      	bne.n	8004e54 <HAL_UART_IRQHandler+0x70>
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f000 80a5 	beq.w	8004f9e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00a      	beq.n	8004e74 <HAL_UART_IRQHandler+0x90>
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d005      	beq.n	8004e74 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e6c:	f043 0201 	orr.w	r2, r3, #1
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	f003 0304 	and.w	r3, r3, #4
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00a      	beq.n	8004e94 <HAL_UART_IRQHandler+0xb0>
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d005      	beq.n	8004e94 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e8c:	f043 0202 	orr.w	r2, r3, #2
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <HAL_UART_IRQHandler+0xd0>
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d005      	beq.n	8004eb4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eac:	f043 0204 	orr.w	r2, r3, #4
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	f003 0308 	and.w	r3, r3, #8
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00f      	beq.n	8004ede <HAL_UART_IRQHandler+0xfa>
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	f003 0320 	and.w	r3, r3, #32
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d104      	bne.n	8004ed2 <HAL_UART_IRQHandler+0xee>
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d005      	beq.n	8004ede <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed6:	f043 0208 	orr.w	r2, r3, #8
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d078      	beq.n	8004fd8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	f003 0320 	and.w	r3, r3, #32
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d007      	beq.n	8004f00 <HAL_UART_IRQHandler+0x11c>
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	f003 0320 	and.w	r3, r3, #32
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f96f 	bl	80051de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	bf14      	ite	ne
 8004f0e:	2301      	movne	r3, #1
 8004f10:	2300      	moveq	r3, #0
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1a:	f003 0308 	and.w	r3, r3, #8
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d102      	bne.n	8004f28 <HAL_UART_IRQHandler+0x144>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d031      	beq.n	8004f8c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 f8c0 	bl	80050ae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d023      	beq.n	8004f84 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	695a      	ldr	r2, [r3, #20]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f4a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d013      	beq.n	8004f7c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f58:	4a21      	ldr	r2, [pc, #132]	; (8004fe0 <HAL_UART_IRQHandler+0x1fc>)
 8004f5a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7fc ff09 	bl	8001d78 <HAL_DMA_Abort_IT>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d016      	beq.n	8004f9a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f76:	4610      	mov	r0, r2
 8004f78:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f7a:	e00e      	b.n	8004f9a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f843 	bl	8005008 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f82:	e00a      	b.n	8004f9a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 f83f 	bl	8005008 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f8a:	e006      	b.n	8004f9a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 f83b 	bl	8005008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004f98:	e01e      	b.n	8004fd8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f9a:	bf00      	nop
    return;
 8004f9c:	e01c      	b.n	8004fd8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d008      	beq.n	8004fba <HAL_UART_IRQHandler+0x1d6>
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d003      	beq.n	8004fba <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f8ac 	bl	8005110 <UART_Transmit_IT>
    return;
 8004fb8:	e00f      	b.n	8004fda <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00a      	beq.n	8004fda <HAL_UART_IRQHandler+0x1f6>
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d005      	beq.n	8004fda <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f8ed 	bl	80051ae <UART_EndTransmit_IT>
    return;
 8004fd4:	bf00      	nop
 8004fd6:	e000      	b.n	8004fda <HAL_UART_IRQHandler+0x1f6>
    return;
 8004fd8:	bf00      	nop
  }
}
 8004fda:	3720      	adds	r7, #32
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	080050e9 	.word	0x080050e9

08004fe4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bc80      	pop	{r7}
 8004ff4:	4770      	bx	lr

08004ff6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004ffe:	bf00      	nop
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	bc80      	pop	{r7}
 8005006:	4770      	bx	lr

08005008 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	bc80      	pop	{r7}
 8005018:	4770      	bx	lr

0800501a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b084      	sub	sp, #16
 800501e:	af00      	add	r7, sp, #0
 8005020:	60f8      	str	r0, [r7, #12]
 8005022:	60b9      	str	r1, [r7, #8]
 8005024:	603b      	str	r3, [r7, #0]
 8005026:	4613      	mov	r3, r2
 8005028:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800502a:	e02c      	b.n	8005086 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005032:	d028      	beq.n	8005086 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d007      	beq.n	800504a <UART_WaitOnFlagUntilTimeout+0x30>
 800503a:	f7fc fd63 	bl	8001b04 <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	429a      	cmp	r2, r3
 8005048:	d21d      	bcs.n	8005086 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68da      	ldr	r2, [r3, #12]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005058:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	695a      	ldr	r2, [r3, #20]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 0201 	bic.w	r2, r2, #1
 8005068:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2220      	movs	r2, #32
 800506e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2220      	movs	r2, #32
 8005076:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e00f      	b.n	80050a6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	4013      	ands	r3, r2
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	429a      	cmp	r2, r3
 8005094:	bf0c      	ite	eq
 8005096:	2301      	moveq	r3, #1
 8005098:	2300      	movne	r3, #0
 800509a:	b2db      	uxtb	r3, r3
 800509c:	461a      	mov	r2, r3
 800509e:	79fb      	ldrb	r3, [r7, #7]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d0c3      	beq.n	800502c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b083      	sub	sp, #12
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68da      	ldr	r2, [r3, #12]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80050c4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	695a      	ldr	r2, [r3, #20]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 0201 	bic.w	r2, r2, #1
 80050d4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2220      	movs	r2, #32
 80050da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80050de:	bf00      	nop
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bc80      	pop	{r7}
 80050e6:	4770      	bx	lr

080050e8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f7ff ff80 	bl	8005008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005108:	bf00      	nop
 800510a:	3710      	adds	r7, #16
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b21      	cmp	r3, #33	; 0x21
 8005122:	d13e      	bne.n	80051a2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800512c:	d114      	bne.n	8005158 <UART_Transmit_IT+0x48>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d110      	bne.n	8005158 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	881b      	ldrh	r3, [r3, #0]
 8005140:	461a      	mov	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800514a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	1c9a      	adds	r2, r3, #2
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	621a      	str	r2, [r3, #32]
 8005156:	e008      	b.n	800516a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	1c59      	adds	r1, r3, #1
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	6211      	str	r1, [r2, #32]
 8005162:	781a      	ldrb	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800516e:	b29b      	uxth	r3, r3
 8005170:	3b01      	subs	r3, #1
 8005172:	b29b      	uxth	r3, r3
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	4619      	mov	r1, r3
 8005178:	84d1      	strh	r1, [r2, #38]	; 0x26
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10f      	bne.n	800519e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68da      	ldr	r2, [r3, #12]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800518c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68da      	ldr	r2, [r3, #12]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800519c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800519e:	2300      	movs	r3, #0
 80051a0:	e000      	b.n	80051a4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80051a2:	2302      	movs	r3, #2
  }
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bc80      	pop	{r7}
 80051ac:	4770      	bx	lr

080051ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b082      	sub	sp, #8
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68da      	ldr	r2, [r3, #12]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2220      	movs	r2, #32
 80051ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7ff ff08 	bl	8004fe4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b084      	sub	sp, #16
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b22      	cmp	r3, #34	; 0x22
 80051f0:	d170      	bne.n	80052d4 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051fa:	d117      	bne.n	800522c <UART_Receive_IT+0x4e>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d113      	bne.n	800522c <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8005204:	2300      	movs	r3, #0
 8005206:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520c:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	b29b      	uxth	r3, r3
 8005216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800521a:	b29a      	uxth	r2, r3
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005224:	1c9a      	adds	r2, r3, #2
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	629a      	str	r2, [r3, #40]	; 0x28
 800522a:	e026      	b.n	800527a <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005230:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005232:	2300      	movs	r3, #0
 8005234:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800523e:	d007      	beq.n	8005250 <UART_Receive_IT+0x72>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10a      	bne.n	800525e <UART_Receive_IT+0x80>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d106      	bne.n	800525e <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	b2da      	uxtb	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	701a      	strb	r2, [r3, #0]
 800525c:	e008      	b.n	8005270 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	b2db      	uxtb	r3, r3
 8005266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800526a:	b2da      	uxtb	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005274:	1c5a      	adds	r2, r3, #1
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800527e:	b29b      	uxth	r3, r3
 8005280:	3b01      	subs	r3, #1
 8005282:	b29b      	uxth	r3, r3
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	4619      	mov	r1, r3
 8005288:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800528a:	2b00      	cmp	r3, #0
 800528c:	d120      	bne.n	80052d0 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68da      	ldr	r2, [r3, #12]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 0220 	bic.w	r2, r2, #32
 800529c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68da      	ldr	r2, [r3, #12]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	695a      	ldr	r2, [r3, #20]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f022 0201 	bic.w	r2, r2, #1
 80052bc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2220      	movs	r2, #32
 80052c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7ff fe95 	bl	8004ff6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80052cc:	2300      	movs	r3, #0
 80052ce:	e002      	b.n	80052d6 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80052d0:	2300      	movs	r3, #0
 80052d2:	e000      	b.n	80052d6 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80052d4:	2302      	movs	r3, #2
  }
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
	...

080052e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68da      	ldr	r2, [r3, #12]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	430a      	orrs	r2, r1
 80052fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689a      	ldr	r2, [r3, #8]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	431a      	orrs	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	4313      	orrs	r3, r2
 800530e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800531a:	f023 030c 	bic.w	r3, r3, #12
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	6812      	ldr	r2, [r2, #0]
 8005322:	68b9      	ldr	r1, [r7, #8]
 8005324:	430b      	orrs	r3, r1
 8005326:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	699a      	ldr	r2, [r3, #24]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a2c      	ldr	r2, [pc, #176]	; (80053f4 <UART_SetConfig+0x114>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d103      	bne.n	8005350 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005348:	f7fd ff4a 	bl	80031e0 <HAL_RCC_GetPCLK2Freq>
 800534c:	60f8      	str	r0, [r7, #12]
 800534e:	e002      	b.n	8005356 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005350:	f7fd ff32 	bl	80031b8 <HAL_RCC_GetPCLK1Freq>
 8005354:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	4613      	mov	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	009a      	lsls	r2, r3, #2
 8005360:	441a      	add	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	fbb2 f3f3 	udiv	r3, r2, r3
 800536c:	4a22      	ldr	r2, [pc, #136]	; (80053f8 <UART_SetConfig+0x118>)
 800536e:	fba2 2303 	umull	r2, r3, r2, r3
 8005372:	095b      	lsrs	r3, r3, #5
 8005374:	0119      	lsls	r1, r3, #4
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	4613      	mov	r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4413      	add	r3, r2
 800537e:	009a      	lsls	r2, r3, #2
 8005380:	441a      	add	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	fbb2 f2f3 	udiv	r2, r2, r3
 800538c:	4b1a      	ldr	r3, [pc, #104]	; (80053f8 <UART_SetConfig+0x118>)
 800538e:	fba3 0302 	umull	r0, r3, r3, r2
 8005392:	095b      	lsrs	r3, r3, #5
 8005394:	2064      	movs	r0, #100	; 0x64
 8005396:	fb00 f303 	mul.w	r3, r0, r3
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	011b      	lsls	r3, r3, #4
 800539e:	3332      	adds	r3, #50	; 0x32
 80053a0:	4a15      	ldr	r2, [pc, #84]	; (80053f8 <UART_SetConfig+0x118>)
 80053a2:	fba2 2303 	umull	r2, r3, r2, r3
 80053a6:	095b      	lsrs	r3, r3, #5
 80053a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053ac:	4419      	add	r1, r3
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	4613      	mov	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4413      	add	r3, r2
 80053b6:	009a      	lsls	r2, r3, #2
 80053b8:	441a      	add	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80053c4:	4b0c      	ldr	r3, [pc, #48]	; (80053f8 <UART_SetConfig+0x118>)
 80053c6:	fba3 0302 	umull	r0, r3, r3, r2
 80053ca:	095b      	lsrs	r3, r3, #5
 80053cc:	2064      	movs	r0, #100	; 0x64
 80053ce:	fb00 f303 	mul.w	r3, r0, r3
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	011b      	lsls	r3, r3, #4
 80053d6:	3332      	adds	r3, #50	; 0x32
 80053d8:	4a07      	ldr	r2, [pc, #28]	; (80053f8 <UART_SetConfig+0x118>)
 80053da:	fba2 2303 	umull	r2, r3, r2, r3
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	f003 020f 	and.w	r2, r3, #15
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	440a      	add	r2, r1
 80053ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80053ec:	bf00      	nop
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	40013800 	.word	0x40013800
 80053f8:	51eb851f 	.word	0x51eb851f

080053fc <__errno>:
 80053fc:	4b01      	ldr	r3, [pc, #4]	; (8005404 <__errno+0x8>)
 80053fe:	6818      	ldr	r0, [r3, #0]
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	200003e4 	.word	0x200003e4

08005408 <__libc_init_array>:
 8005408:	b570      	push	{r4, r5, r6, lr}
 800540a:	2500      	movs	r5, #0
 800540c:	4e0c      	ldr	r6, [pc, #48]	; (8005440 <__libc_init_array+0x38>)
 800540e:	4c0d      	ldr	r4, [pc, #52]	; (8005444 <__libc_init_array+0x3c>)
 8005410:	1ba4      	subs	r4, r4, r6
 8005412:	10a4      	asrs	r4, r4, #2
 8005414:	42a5      	cmp	r5, r4
 8005416:	d109      	bne.n	800542c <__libc_init_array+0x24>
 8005418:	f000 fc94 	bl	8005d44 <_init>
 800541c:	2500      	movs	r5, #0
 800541e:	4e0a      	ldr	r6, [pc, #40]	; (8005448 <__libc_init_array+0x40>)
 8005420:	4c0a      	ldr	r4, [pc, #40]	; (800544c <__libc_init_array+0x44>)
 8005422:	1ba4      	subs	r4, r4, r6
 8005424:	10a4      	asrs	r4, r4, #2
 8005426:	42a5      	cmp	r5, r4
 8005428:	d105      	bne.n	8005436 <__libc_init_array+0x2e>
 800542a:	bd70      	pop	{r4, r5, r6, pc}
 800542c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005430:	4798      	blx	r3
 8005432:	3501      	adds	r5, #1
 8005434:	e7ee      	b.n	8005414 <__libc_init_array+0xc>
 8005436:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800543a:	4798      	blx	r3
 800543c:	3501      	adds	r5, #1
 800543e:	e7f2      	b.n	8005426 <__libc_init_array+0x1e>
 8005440:	08005e04 	.word	0x08005e04
 8005444:	08005e04 	.word	0x08005e04
 8005448:	08005e04 	.word	0x08005e04
 800544c:	08005e08 	.word	0x08005e08

08005450 <memcpy>:
 8005450:	b510      	push	{r4, lr}
 8005452:	1e43      	subs	r3, r0, #1
 8005454:	440a      	add	r2, r1
 8005456:	4291      	cmp	r1, r2
 8005458:	d100      	bne.n	800545c <memcpy+0xc>
 800545a:	bd10      	pop	{r4, pc}
 800545c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005460:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005464:	e7f7      	b.n	8005456 <memcpy+0x6>

08005466 <memset>:
 8005466:	4603      	mov	r3, r0
 8005468:	4402      	add	r2, r0
 800546a:	4293      	cmp	r3, r2
 800546c:	d100      	bne.n	8005470 <memset+0xa>
 800546e:	4770      	bx	lr
 8005470:	f803 1b01 	strb.w	r1, [r3], #1
 8005474:	e7f9      	b.n	800546a <memset+0x4>
	...

08005478 <_puts_r>:
 8005478:	b570      	push	{r4, r5, r6, lr}
 800547a:	460e      	mov	r6, r1
 800547c:	4605      	mov	r5, r0
 800547e:	b118      	cbz	r0, 8005488 <_puts_r+0x10>
 8005480:	6983      	ldr	r3, [r0, #24]
 8005482:	b90b      	cbnz	r3, 8005488 <_puts_r+0x10>
 8005484:	f000 fa0c 	bl	80058a0 <__sinit>
 8005488:	69ab      	ldr	r3, [r5, #24]
 800548a:	68ac      	ldr	r4, [r5, #8]
 800548c:	b913      	cbnz	r3, 8005494 <_puts_r+0x1c>
 800548e:	4628      	mov	r0, r5
 8005490:	f000 fa06 	bl	80058a0 <__sinit>
 8005494:	4b23      	ldr	r3, [pc, #140]	; (8005524 <_puts_r+0xac>)
 8005496:	429c      	cmp	r4, r3
 8005498:	d117      	bne.n	80054ca <_puts_r+0x52>
 800549a:	686c      	ldr	r4, [r5, #4]
 800549c:	89a3      	ldrh	r3, [r4, #12]
 800549e:	071b      	lsls	r3, r3, #28
 80054a0:	d51d      	bpl.n	80054de <_puts_r+0x66>
 80054a2:	6923      	ldr	r3, [r4, #16]
 80054a4:	b1db      	cbz	r3, 80054de <_puts_r+0x66>
 80054a6:	3e01      	subs	r6, #1
 80054a8:	68a3      	ldr	r3, [r4, #8]
 80054aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80054ae:	3b01      	subs	r3, #1
 80054b0:	60a3      	str	r3, [r4, #8]
 80054b2:	b9e9      	cbnz	r1, 80054f0 <_puts_r+0x78>
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	da2e      	bge.n	8005516 <_puts_r+0x9e>
 80054b8:	4622      	mov	r2, r4
 80054ba:	210a      	movs	r1, #10
 80054bc:	4628      	mov	r0, r5
 80054be:	f000 f83f 	bl	8005540 <__swbuf_r>
 80054c2:	3001      	adds	r0, #1
 80054c4:	d011      	beq.n	80054ea <_puts_r+0x72>
 80054c6:	200a      	movs	r0, #10
 80054c8:	e011      	b.n	80054ee <_puts_r+0x76>
 80054ca:	4b17      	ldr	r3, [pc, #92]	; (8005528 <_puts_r+0xb0>)
 80054cc:	429c      	cmp	r4, r3
 80054ce:	d101      	bne.n	80054d4 <_puts_r+0x5c>
 80054d0:	68ac      	ldr	r4, [r5, #8]
 80054d2:	e7e3      	b.n	800549c <_puts_r+0x24>
 80054d4:	4b15      	ldr	r3, [pc, #84]	; (800552c <_puts_r+0xb4>)
 80054d6:	429c      	cmp	r4, r3
 80054d8:	bf08      	it	eq
 80054da:	68ec      	ldreq	r4, [r5, #12]
 80054dc:	e7de      	b.n	800549c <_puts_r+0x24>
 80054de:	4621      	mov	r1, r4
 80054e0:	4628      	mov	r0, r5
 80054e2:	f000 f87f 	bl	80055e4 <__swsetup_r>
 80054e6:	2800      	cmp	r0, #0
 80054e8:	d0dd      	beq.n	80054a6 <_puts_r+0x2e>
 80054ea:	f04f 30ff 	mov.w	r0, #4294967295
 80054ee:	bd70      	pop	{r4, r5, r6, pc}
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	da04      	bge.n	80054fe <_puts_r+0x86>
 80054f4:	69a2      	ldr	r2, [r4, #24]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	dc06      	bgt.n	8005508 <_puts_r+0x90>
 80054fa:	290a      	cmp	r1, #10
 80054fc:	d004      	beq.n	8005508 <_puts_r+0x90>
 80054fe:	6823      	ldr	r3, [r4, #0]
 8005500:	1c5a      	adds	r2, r3, #1
 8005502:	6022      	str	r2, [r4, #0]
 8005504:	7019      	strb	r1, [r3, #0]
 8005506:	e7cf      	b.n	80054a8 <_puts_r+0x30>
 8005508:	4622      	mov	r2, r4
 800550a:	4628      	mov	r0, r5
 800550c:	f000 f818 	bl	8005540 <__swbuf_r>
 8005510:	3001      	adds	r0, #1
 8005512:	d1c9      	bne.n	80054a8 <_puts_r+0x30>
 8005514:	e7e9      	b.n	80054ea <_puts_r+0x72>
 8005516:	200a      	movs	r0, #10
 8005518:	6823      	ldr	r3, [r4, #0]
 800551a:	1c5a      	adds	r2, r3, #1
 800551c:	6022      	str	r2, [r4, #0]
 800551e:	7018      	strb	r0, [r3, #0]
 8005520:	e7e5      	b.n	80054ee <_puts_r+0x76>
 8005522:	bf00      	nop
 8005524:	08005dc4 	.word	0x08005dc4
 8005528:	08005de4 	.word	0x08005de4
 800552c:	08005da4 	.word	0x08005da4

08005530 <puts>:
 8005530:	4b02      	ldr	r3, [pc, #8]	; (800553c <puts+0xc>)
 8005532:	4601      	mov	r1, r0
 8005534:	6818      	ldr	r0, [r3, #0]
 8005536:	f7ff bf9f 	b.w	8005478 <_puts_r>
 800553a:	bf00      	nop
 800553c:	200003e4 	.word	0x200003e4

08005540 <__swbuf_r>:
 8005540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005542:	460e      	mov	r6, r1
 8005544:	4614      	mov	r4, r2
 8005546:	4605      	mov	r5, r0
 8005548:	b118      	cbz	r0, 8005552 <__swbuf_r+0x12>
 800554a:	6983      	ldr	r3, [r0, #24]
 800554c:	b90b      	cbnz	r3, 8005552 <__swbuf_r+0x12>
 800554e:	f000 f9a7 	bl	80058a0 <__sinit>
 8005552:	4b21      	ldr	r3, [pc, #132]	; (80055d8 <__swbuf_r+0x98>)
 8005554:	429c      	cmp	r4, r3
 8005556:	d12a      	bne.n	80055ae <__swbuf_r+0x6e>
 8005558:	686c      	ldr	r4, [r5, #4]
 800555a:	69a3      	ldr	r3, [r4, #24]
 800555c:	60a3      	str	r3, [r4, #8]
 800555e:	89a3      	ldrh	r3, [r4, #12]
 8005560:	071a      	lsls	r2, r3, #28
 8005562:	d52e      	bpl.n	80055c2 <__swbuf_r+0x82>
 8005564:	6923      	ldr	r3, [r4, #16]
 8005566:	b363      	cbz	r3, 80055c2 <__swbuf_r+0x82>
 8005568:	6923      	ldr	r3, [r4, #16]
 800556a:	6820      	ldr	r0, [r4, #0]
 800556c:	b2f6      	uxtb	r6, r6
 800556e:	1ac0      	subs	r0, r0, r3
 8005570:	6963      	ldr	r3, [r4, #20]
 8005572:	4637      	mov	r7, r6
 8005574:	4283      	cmp	r3, r0
 8005576:	dc04      	bgt.n	8005582 <__swbuf_r+0x42>
 8005578:	4621      	mov	r1, r4
 800557a:	4628      	mov	r0, r5
 800557c:	f000 f926 	bl	80057cc <_fflush_r>
 8005580:	bb28      	cbnz	r0, 80055ce <__swbuf_r+0x8e>
 8005582:	68a3      	ldr	r3, [r4, #8]
 8005584:	3001      	adds	r0, #1
 8005586:	3b01      	subs	r3, #1
 8005588:	60a3      	str	r3, [r4, #8]
 800558a:	6823      	ldr	r3, [r4, #0]
 800558c:	1c5a      	adds	r2, r3, #1
 800558e:	6022      	str	r2, [r4, #0]
 8005590:	701e      	strb	r6, [r3, #0]
 8005592:	6963      	ldr	r3, [r4, #20]
 8005594:	4283      	cmp	r3, r0
 8005596:	d004      	beq.n	80055a2 <__swbuf_r+0x62>
 8005598:	89a3      	ldrh	r3, [r4, #12]
 800559a:	07db      	lsls	r3, r3, #31
 800559c:	d519      	bpl.n	80055d2 <__swbuf_r+0x92>
 800559e:	2e0a      	cmp	r6, #10
 80055a0:	d117      	bne.n	80055d2 <__swbuf_r+0x92>
 80055a2:	4621      	mov	r1, r4
 80055a4:	4628      	mov	r0, r5
 80055a6:	f000 f911 	bl	80057cc <_fflush_r>
 80055aa:	b190      	cbz	r0, 80055d2 <__swbuf_r+0x92>
 80055ac:	e00f      	b.n	80055ce <__swbuf_r+0x8e>
 80055ae:	4b0b      	ldr	r3, [pc, #44]	; (80055dc <__swbuf_r+0x9c>)
 80055b0:	429c      	cmp	r4, r3
 80055b2:	d101      	bne.n	80055b8 <__swbuf_r+0x78>
 80055b4:	68ac      	ldr	r4, [r5, #8]
 80055b6:	e7d0      	b.n	800555a <__swbuf_r+0x1a>
 80055b8:	4b09      	ldr	r3, [pc, #36]	; (80055e0 <__swbuf_r+0xa0>)
 80055ba:	429c      	cmp	r4, r3
 80055bc:	bf08      	it	eq
 80055be:	68ec      	ldreq	r4, [r5, #12]
 80055c0:	e7cb      	b.n	800555a <__swbuf_r+0x1a>
 80055c2:	4621      	mov	r1, r4
 80055c4:	4628      	mov	r0, r5
 80055c6:	f000 f80d 	bl	80055e4 <__swsetup_r>
 80055ca:	2800      	cmp	r0, #0
 80055cc:	d0cc      	beq.n	8005568 <__swbuf_r+0x28>
 80055ce:	f04f 37ff 	mov.w	r7, #4294967295
 80055d2:	4638      	mov	r0, r7
 80055d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055d6:	bf00      	nop
 80055d8:	08005dc4 	.word	0x08005dc4
 80055dc:	08005de4 	.word	0x08005de4
 80055e0:	08005da4 	.word	0x08005da4

080055e4 <__swsetup_r>:
 80055e4:	4b32      	ldr	r3, [pc, #200]	; (80056b0 <__swsetup_r+0xcc>)
 80055e6:	b570      	push	{r4, r5, r6, lr}
 80055e8:	681d      	ldr	r5, [r3, #0]
 80055ea:	4606      	mov	r6, r0
 80055ec:	460c      	mov	r4, r1
 80055ee:	b125      	cbz	r5, 80055fa <__swsetup_r+0x16>
 80055f0:	69ab      	ldr	r3, [r5, #24]
 80055f2:	b913      	cbnz	r3, 80055fa <__swsetup_r+0x16>
 80055f4:	4628      	mov	r0, r5
 80055f6:	f000 f953 	bl	80058a0 <__sinit>
 80055fa:	4b2e      	ldr	r3, [pc, #184]	; (80056b4 <__swsetup_r+0xd0>)
 80055fc:	429c      	cmp	r4, r3
 80055fe:	d10f      	bne.n	8005620 <__swsetup_r+0x3c>
 8005600:	686c      	ldr	r4, [r5, #4]
 8005602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005606:	b29a      	uxth	r2, r3
 8005608:	0715      	lsls	r5, r2, #28
 800560a:	d42c      	bmi.n	8005666 <__swsetup_r+0x82>
 800560c:	06d0      	lsls	r0, r2, #27
 800560e:	d411      	bmi.n	8005634 <__swsetup_r+0x50>
 8005610:	2209      	movs	r2, #9
 8005612:	6032      	str	r2, [r6, #0]
 8005614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005618:	81a3      	strh	r3, [r4, #12]
 800561a:	f04f 30ff 	mov.w	r0, #4294967295
 800561e:	e03e      	b.n	800569e <__swsetup_r+0xba>
 8005620:	4b25      	ldr	r3, [pc, #148]	; (80056b8 <__swsetup_r+0xd4>)
 8005622:	429c      	cmp	r4, r3
 8005624:	d101      	bne.n	800562a <__swsetup_r+0x46>
 8005626:	68ac      	ldr	r4, [r5, #8]
 8005628:	e7eb      	b.n	8005602 <__swsetup_r+0x1e>
 800562a:	4b24      	ldr	r3, [pc, #144]	; (80056bc <__swsetup_r+0xd8>)
 800562c:	429c      	cmp	r4, r3
 800562e:	bf08      	it	eq
 8005630:	68ec      	ldreq	r4, [r5, #12]
 8005632:	e7e6      	b.n	8005602 <__swsetup_r+0x1e>
 8005634:	0751      	lsls	r1, r2, #29
 8005636:	d512      	bpl.n	800565e <__swsetup_r+0x7a>
 8005638:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800563a:	b141      	cbz	r1, 800564e <__swsetup_r+0x6a>
 800563c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005640:	4299      	cmp	r1, r3
 8005642:	d002      	beq.n	800564a <__swsetup_r+0x66>
 8005644:	4630      	mov	r0, r6
 8005646:	f000 fa19 	bl	8005a7c <_free_r>
 800564a:	2300      	movs	r3, #0
 800564c:	6363      	str	r3, [r4, #52]	; 0x34
 800564e:	89a3      	ldrh	r3, [r4, #12]
 8005650:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005654:	81a3      	strh	r3, [r4, #12]
 8005656:	2300      	movs	r3, #0
 8005658:	6063      	str	r3, [r4, #4]
 800565a:	6923      	ldr	r3, [r4, #16]
 800565c:	6023      	str	r3, [r4, #0]
 800565e:	89a3      	ldrh	r3, [r4, #12]
 8005660:	f043 0308 	orr.w	r3, r3, #8
 8005664:	81a3      	strh	r3, [r4, #12]
 8005666:	6923      	ldr	r3, [r4, #16]
 8005668:	b94b      	cbnz	r3, 800567e <__swsetup_r+0x9a>
 800566a:	89a3      	ldrh	r3, [r4, #12]
 800566c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005674:	d003      	beq.n	800567e <__swsetup_r+0x9a>
 8005676:	4621      	mov	r1, r4
 8005678:	4630      	mov	r0, r6
 800567a:	f000 f9bf 	bl	80059fc <__smakebuf_r>
 800567e:	89a2      	ldrh	r2, [r4, #12]
 8005680:	f012 0301 	ands.w	r3, r2, #1
 8005684:	d00c      	beq.n	80056a0 <__swsetup_r+0xbc>
 8005686:	2300      	movs	r3, #0
 8005688:	60a3      	str	r3, [r4, #8]
 800568a:	6963      	ldr	r3, [r4, #20]
 800568c:	425b      	negs	r3, r3
 800568e:	61a3      	str	r3, [r4, #24]
 8005690:	6923      	ldr	r3, [r4, #16]
 8005692:	b953      	cbnz	r3, 80056aa <__swsetup_r+0xc6>
 8005694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005698:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800569c:	d1ba      	bne.n	8005614 <__swsetup_r+0x30>
 800569e:	bd70      	pop	{r4, r5, r6, pc}
 80056a0:	0792      	lsls	r2, r2, #30
 80056a2:	bf58      	it	pl
 80056a4:	6963      	ldrpl	r3, [r4, #20]
 80056a6:	60a3      	str	r3, [r4, #8]
 80056a8:	e7f2      	b.n	8005690 <__swsetup_r+0xac>
 80056aa:	2000      	movs	r0, #0
 80056ac:	e7f7      	b.n	800569e <__swsetup_r+0xba>
 80056ae:	bf00      	nop
 80056b0:	200003e4 	.word	0x200003e4
 80056b4:	08005dc4 	.word	0x08005dc4
 80056b8:	08005de4 	.word	0x08005de4
 80056bc:	08005da4 	.word	0x08005da4

080056c0 <__sflush_r>:
 80056c0:	898a      	ldrh	r2, [r1, #12]
 80056c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056c6:	4605      	mov	r5, r0
 80056c8:	0710      	lsls	r0, r2, #28
 80056ca:	460c      	mov	r4, r1
 80056cc:	d458      	bmi.n	8005780 <__sflush_r+0xc0>
 80056ce:	684b      	ldr	r3, [r1, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	dc05      	bgt.n	80056e0 <__sflush_r+0x20>
 80056d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	dc02      	bgt.n	80056e0 <__sflush_r+0x20>
 80056da:	2000      	movs	r0, #0
 80056dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80056e2:	2e00      	cmp	r6, #0
 80056e4:	d0f9      	beq.n	80056da <__sflush_r+0x1a>
 80056e6:	2300      	movs	r3, #0
 80056e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80056ec:	682f      	ldr	r7, [r5, #0]
 80056ee:	6a21      	ldr	r1, [r4, #32]
 80056f0:	602b      	str	r3, [r5, #0]
 80056f2:	d032      	beq.n	800575a <__sflush_r+0x9a>
 80056f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80056f6:	89a3      	ldrh	r3, [r4, #12]
 80056f8:	075a      	lsls	r2, r3, #29
 80056fa:	d505      	bpl.n	8005708 <__sflush_r+0x48>
 80056fc:	6863      	ldr	r3, [r4, #4]
 80056fe:	1ac0      	subs	r0, r0, r3
 8005700:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005702:	b10b      	cbz	r3, 8005708 <__sflush_r+0x48>
 8005704:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005706:	1ac0      	subs	r0, r0, r3
 8005708:	2300      	movs	r3, #0
 800570a:	4602      	mov	r2, r0
 800570c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800570e:	6a21      	ldr	r1, [r4, #32]
 8005710:	4628      	mov	r0, r5
 8005712:	47b0      	blx	r6
 8005714:	1c43      	adds	r3, r0, #1
 8005716:	89a3      	ldrh	r3, [r4, #12]
 8005718:	d106      	bne.n	8005728 <__sflush_r+0x68>
 800571a:	6829      	ldr	r1, [r5, #0]
 800571c:	291d      	cmp	r1, #29
 800571e:	d848      	bhi.n	80057b2 <__sflush_r+0xf2>
 8005720:	4a29      	ldr	r2, [pc, #164]	; (80057c8 <__sflush_r+0x108>)
 8005722:	40ca      	lsrs	r2, r1
 8005724:	07d6      	lsls	r6, r2, #31
 8005726:	d544      	bpl.n	80057b2 <__sflush_r+0xf2>
 8005728:	2200      	movs	r2, #0
 800572a:	6062      	str	r2, [r4, #4]
 800572c:	6922      	ldr	r2, [r4, #16]
 800572e:	04d9      	lsls	r1, r3, #19
 8005730:	6022      	str	r2, [r4, #0]
 8005732:	d504      	bpl.n	800573e <__sflush_r+0x7e>
 8005734:	1c42      	adds	r2, r0, #1
 8005736:	d101      	bne.n	800573c <__sflush_r+0x7c>
 8005738:	682b      	ldr	r3, [r5, #0]
 800573a:	b903      	cbnz	r3, 800573e <__sflush_r+0x7e>
 800573c:	6560      	str	r0, [r4, #84]	; 0x54
 800573e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005740:	602f      	str	r7, [r5, #0]
 8005742:	2900      	cmp	r1, #0
 8005744:	d0c9      	beq.n	80056da <__sflush_r+0x1a>
 8005746:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800574a:	4299      	cmp	r1, r3
 800574c:	d002      	beq.n	8005754 <__sflush_r+0x94>
 800574e:	4628      	mov	r0, r5
 8005750:	f000 f994 	bl	8005a7c <_free_r>
 8005754:	2000      	movs	r0, #0
 8005756:	6360      	str	r0, [r4, #52]	; 0x34
 8005758:	e7c0      	b.n	80056dc <__sflush_r+0x1c>
 800575a:	2301      	movs	r3, #1
 800575c:	4628      	mov	r0, r5
 800575e:	47b0      	blx	r6
 8005760:	1c41      	adds	r1, r0, #1
 8005762:	d1c8      	bne.n	80056f6 <__sflush_r+0x36>
 8005764:	682b      	ldr	r3, [r5, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d0c5      	beq.n	80056f6 <__sflush_r+0x36>
 800576a:	2b1d      	cmp	r3, #29
 800576c:	d001      	beq.n	8005772 <__sflush_r+0xb2>
 800576e:	2b16      	cmp	r3, #22
 8005770:	d101      	bne.n	8005776 <__sflush_r+0xb6>
 8005772:	602f      	str	r7, [r5, #0]
 8005774:	e7b1      	b.n	80056da <__sflush_r+0x1a>
 8005776:	89a3      	ldrh	r3, [r4, #12]
 8005778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800577c:	81a3      	strh	r3, [r4, #12]
 800577e:	e7ad      	b.n	80056dc <__sflush_r+0x1c>
 8005780:	690f      	ldr	r7, [r1, #16]
 8005782:	2f00      	cmp	r7, #0
 8005784:	d0a9      	beq.n	80056da <__sflush_r+0x1a>
 8005786:	0793      	lsls	r3, r2, #30
 8005788:	bf18      	it	ne
 800578a:	2300      	movne	r3, #0
 800578c:	680e      	ldr	r6, [r1, #0]
 800578e:	bf08      	it	eq
 8005790:	694b      	ldreq	r3, [r1, #20]
 8005792:	eba6 0807 	sub.w	r8, r6, r7
 8005796:	600f      	str	r7, [r1, #0]
 8005798:	608b      	str	r3, [r1, #8]
 800579a:	f1b8 0f00 	cmp.w	r8, #0
 800579e:	dd9c      	ble.n	80056da <__sflush_r+0x1a>
 80057a0:	4643      	mov	r3, r8
 80057a2:	463a      	mov	r2, r7
 80057a4:	6a21      	ldr	r1, [r4, #32]
 80057a6:	4628      	mov	r0, r5
 80057a8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80057aa:	47b0      	blx	r6
 80057ac:	2800      	cmp	r0, #0
 80057ae:	dc06      	bgt.n	80057be <__sflush_r+0xfe>
 80057b0:	89a3      	ldrh	r3, [r4, #12]
 80057b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057b6:	81a3      	strh	r3, [r4, #12]
 80057b8:	f04f 30ff 	mov.w	r0, #4294967295
 80057bc:	e78e      	b.n	80056dc <__sflush_r+0x1c>
 80057be:	4407      	add	r7, r0
 80057c0:	eba8 0800 	sub.w	r8, r8, r0
 80057c4:	e7e9      	b.n	800579a <__sflush_r+0xda>
 80057c6:	bf00      	nop
 80057c8:	20400001 	.word	0x20400001

080057cc <_fflush_r>:
 80057cc:	b538      	push	{r3, r4, r5, lr}
 80057ce:	690b      	ldr	r3, [r1, #16]
 80057d0:	4605      	mov	r5, r0
 80057d2:	460c      	mov	r4, r1
 80057d4:	b1db      	cbz	r3, 800580e <_fflush_r+0x42>
 80057d6:	b118      	cbz	r0, 80057e0 <_fflush_r+0x14>
 80057d8:	6983      	ldr	r3, [r0, #24]
 80057da:	b90b      	cbnz	r3, 80057e0 <_fflush_r+0x14>
 80057dc:	f000 f860 	bl	80058a0 <__sinit>
 80057e0:	4b0c      	ldr	r3, [pc, #48]	; (8005814 <_fflush_r+0x48>)
 80057e2:	429c      	cmp	r4, r3
 80057e4:	d109      	bne.n	80057fa <_fflush_r+0x2e>
 80057e6:	686c      	ldr	r4, [r5, #4]
 80057e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057ec:	b17b      	cbz	r3, 800580e <_fflush_r+0x42>
 80057ee:	4621      	mov	r1, r4
 80057f0:	4628      	mov	r0, r5
 80057f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057f6:	f7ff bf63 	b.w	80056c0 <__sflush_r>
 80057fa:	4b07      	ldr	r3, [pc, #28]	; (8005818 <_fflush_r+0x4c>)
 80057fc:	429c      	cmp	r4, r3
 80057fe:	d101      	bne.n	8005804 <_fflush_r+0x38>
 8005800:	68ac      	ldr	r4, [r5, #8]
 8005802:	e7f1      	b.n	80057e8 <_fflush_r+0x1c>
 8005804:	4b05      	ldr	r3, [pc, #20]	; (800581c <_fflush_r+0x50>)
 8005806:	429c      	cmp	r4, r3
 8005808:	bf08      	it	eq
 800580a:	68ec      	ldreq	r4, [r5, #12]
 800580c:	e7ec      	b.n	80057e8 <_fflush_r+0x1c>
 800580e:	2000      	movs	r0, #0
 8005810:	bd38      	pop	{r3, r4, r5, pc}
 8005812:	bf00      	nop
 8005814:	08005dc4 	.word	0x08005dc4
 8005818:	08005de4 	.word	0x08005de4
 800581c:	08005da4 	.word	0x08005da4

08005820 <std>:
 8005820:	2300      	movs	r3, #0
 8005822:	b510      	push	{r4, lr}
 8005824:	4604      	mov	r4, r0
 8005826:	e9c0 3300 	strd	r3, r3, [r0]
 800582a:	6083      	str	r3, [r0, #8]
 800582c:	8181      	strh	r1, [r0, #12]
 800582e:	6643      	str	r3, [r0, #100]	; 0x64
 8005830:	81c2      	strh	r2, [r0, #14]
 8005832:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005836:	6183      	str	r3, [r0, #24]
 8005838:	4619      	mov	r1, r3
 800583a:	2208      	movs	r2, #8
 800583c:	305c      	adds	r0, #92	; 0x5c
 800583e:	f7ff fe12 	bl	8005466 <memset>
 8005842:	4b05      	ldr	r3, [pc, #20]	; (8005858 <std+0x38>)
 8005844:	6224      	str	r4, [r4, #32]
 8005846:	6263      	str	r3, [r4, #36]	; 0x24
 8005848:	4b04      	ldr	r3, [pc, #16]	; (800585c <std+0x3c>)
 800584a:	62a3      	str	r3, [r4, #40]	; 0x28
 800584c:	4b04      	ldr	r3, [pc, #16]	; (8005860 <std+0x40>)
 800584e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005850:	4b04      	ldr	r3, [pc, #16]	; (8005864 <std+0x44>)
 8005852:	6323      	str	r3, [r4, #48]	; 0x30
 8005854:	bd10      	pop	{r4, pc}
 8005856:	bf00      	nop
 8005858:	08005be9 	.word	0x08005be9
 800585c:	08005c0b 	.word	0x08005c0b
 8005860:	08005c43 	.word	0x08005c43
 8005864:	08005c67 	.word	0x08005c67

08005868 <_cleanup_r>:
 8005868:	4901      	ldr	r1, [pc, #4]	; (8005870 <_cleanup_r+0x8>)
 800586a:	f000 b885 	b.w	8005978 <_fwalk_reent>
 800586e:	bf00      	nop
 8005870:	080057cd 	.word	0x080057cd

08005874 <__sfmoreglue>:
 8005874:	b570      	push	{r4, r5, r6, lr}
 8005876:	2568      	movs	r5, #104	; 0x68
 8005878:	1e4a      	subs	r2, r1, #1
 800587a:	4355      	muls	r5, r2
 800587c:	460e      	mov	r6, r1
 800587e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005882:	f000 f947 	bl	8005b14 <_malloc_r>
 8005886:	4604      	mov	r4, r0
 8005888:	b140      	cbz	r0, 800589c <__sfmoreglue+0x28>
 800588a:	2100      	movs	r1, #0
 800588c:	e9c0 1600 	strd	r1, r6, [r0]
 8005890:	300c      	adds	r0, #12
 8005892:	60a0      	str	r0, [r4, #8]
 8005894:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005898:	f7ff fde5 	bl	8005466 <memset>
 800589c:	4620      	mov	r0, r4
 800589e:	bd70      	pop	{r4, r5, r6, pc}

080058a0 <__sinit>:
 80058a0:	6983      	ldr	r3, [r0, #24]
 80058a2:	b510      	push	{r4, lr}
 80058a4:	4604      	mov	r4, r0
 80058a6:	bb33      	cbnz	r3, 80058f6 <__sinit+0x56>
 80058a8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80058ac:	6503      	str	r3, [r0, #80]	; 0x50
 80058ae:	4b12      	ldr	r3, [pc, #72]	; (80058f8 <__sinit+0x58>)
 80058b0:	4a12      	ldr	r2, [pc, #72]	; (80058fc <__sinit+0x5c>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6282      	str	r2, [r0, #40]	; 0x28
 80058b6:	4298      	cmp	r0, r3
 80058b8:	bf04      	itt	eq
 80058ba:	2301      	moveq	r3, #1
 80058bc:	6183      	streq	r3, [r0, #24]
 80058be:	f000 f81f 	bl	8005900 <__sfp>
 80058c2:	6060      	str	r0, [r4, #4]
 80058c4:	4620      	mov	r0, r4
 80058c6:	f000 f81b 	bl	8005900 <__sfp>
 80058ca:	60a0      	str	r0, [r4, #8]
 80058cc:	4620      	mov	r0, r4
 80058ce:	f000 f817 	bl	8005900 <__sfp>
 80058d2:	2200      	movs	r2, #0
 80058d4:	60e0      	str	r0, [r4, #12]
 80058d6:	2104      	movs	r1, #4
 80058d8:	6860      	ldr	r0, [r4, #4]
 80058da:	f7ff ffa1 	bl	8005820 <std>
 80058de:	2201      	movs	r2, #1
 80058e0:	2109      	movs	r1, #9
 80058e2:	68a0      	ldr	r0, [r4, #8]
 80058e4:	f7ff ff9c 	bl	8005820 <std>
 80058e8:	2202      	movs	r2, #2
 80058ea:	2112      	movs	r1, #18
 80058ec:	68e0      	ldr	r0, [r4, #12]
 80058ee:	f7ff ff97 	bl	8005820 <std>
 80058f2:	2301      	movs	r3, #1
 80058f4:	61a3      	str	r3, [r4, #24]
 80058f6:	bd10      	pop	{r4, pc}
 80058f8:	08005da0 	.word	0x08005da0
 80058fc:	08005869 	.word	0x08005869

08005900 <__sfp>:
 8005900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005902:	4b1b      	ldr	r3, [pc, #108]	; (8005970 <__sfp+0x70>)
 8005904:	4607      	mov	r7, r0
 8005906:	681e      	ldr	r6, [r3, #0]
 8005908:	69b3      	ldr	r3, [r6, #24]
 800590a:	b913      	cbnz	r3, 8005912 <__sfp+0x12>
 800590c:	4630      	mov	r0, r6
 800590e:	f7ff ffc7 	bl	80058a0 <__sinit>
 8005912:	3648      	adds	r6, #72	; 0x48
 8005914:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005918:	3b01      	subs	r3, #1
 800591a:	d503      	bpl.n	8005924 <__sfp+0x24>
 800591c:	6833      	ldr	r3, [r6, #0]
 800591e:	b133      	cbz	r3, 800592e <__sfp+0x2e>
 8005920:	6836      	ldr	r6, [r6, #0]
 8005922:	e7f7      	b.n	8005914 <__sfp+0x14>
 8005924:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005928:	b16d      	cbz	r5, 8005946 <__sfp+0x46>
 800592a:	3468      	adds	r4, #104	; 0x68
 800592c:	e7f4      	b.n	8005918 <__sfp+0x18>
 800592e:	2104      	movs	r1, #4
 8005930:	4638      	mov	r0, r7
 8005932:	f7ff ff9f 	bl	8005874 <__sfmoreglue>
 8005936:	6030      	str	r0, [r6, #0]
 8005938:	2800      	cmp	r0, #0
 800593a:	d1f1      	bne.n	8005920 <__sfp+0x20>
 800593c:	230c      	movs	r3, #12
 800593e:	4604      	mov	r4, r0
 8005940:	603b      	str	r3, [r7, #0]
 8005942:	4620      	mov	r0, r4
 8005944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005946:	4b0b      	ldr	r3, [pc, #44]	; (8005974 <__sfp+0x74>)
 8005948:	6665      	str	r5, [r4, #100]	; 0x64
 800594a:	e9c4 5500 	strd	r5, r5, [r4]
 800594e:	60a5      	str	r5, [r4, #8]
 8005950:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005954:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005958:	2208      	movs	r2, #8
 800595a:	4629      	mov	r1, r5
 800595c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005960:	f7ff fd81 	bl	8005466 <memset>
 8005964:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005968:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800596c:	e7e9      	b.n	8005942 <__sfp+0x42>
 800596e:	bf00      	nop
 8005970:	08005da0 	.word	0x08005da0
 8005974:	ffff0001 	.word	0xffff0001

08005978 <_fwalk_reent>:
 8005978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800597c:	4680      	mov	r8, r0
 800597e:	4689      	mov	r9, r1
 8005980:	2600      	movs	r6, #0
 8005982:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005986:	b914      	cbnz	r4, 800598e <_fwalk_reent+0x16>
 8005988:	4630      	mov	r0, r6
 800598a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800598e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005992:	3f01      	subs	r7, #1
 8005994:	d501      	bpl.n	800599a <_fwalk_reent+0x22>
 8005996:	6824      	ldr	r4, [r4, #0]
 8005998:	e7f5      	b.n	8005986 <_fwalk_reent+0xe>
 800599a:	89ab      	ldrh	r3, [r5, #12]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d907      	bls.n	80059b0 <_fwalk_reent+0x38>
 80059a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059a4:	3301      	adds	r3, #1
 80059a6:	d003      	beq.n	80059b0 <_fwalk_reent+0x38>
 80059a8:	4629      	mov	r1, r5
 80059aa:	4640      	mov	r0, r8
 80059ac:	47c8      	blx	r9
 80059ae:	4306      	orrs	r6, r0
 80059b0:	3568      	adds	r5, #104	; 0x68
 80059b2:	e7ee      	b.n	8005992 <_fwalk_reent+0x1a>

080059b4 <__swhatbuf_r>:
 80059b4:	b570      	push	{r4, r5, r6, lr}
 80059b6:	460e      	mov	r6, r1
 80059b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059bc:	b096      	sub	sp, #88	; 0x58
 80059be:	2900      	cmp	r1, #0
 80059c0:	4614      	mov	r4, r2
 80059c2:	461d      	mov	r5, r3
 80059c4:	da07      	bge.n	80059d6 <__swhatbuf_r+0x22>
 80059c6:	2300      	movs	r3, #0
 80059c8:	602b      	str	r3, [r5, #0]
 80059ca:	89b3      	ldrh	r3, [r6, #12]
 80059cc:	061a      	lsls	r2, r3, #24
 80059ce:	d410      	bmi.n	80059f2 <__swhatbuf_r+0x3e>
 80059d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059d4:	e00e      	b.n	80059f4 <__swhatbuf_r+0x40>
 80059d6:	466a      	mov	r2, sp
 80059d8:	f000 f96c 	bl	8005cb4 <_fstat_r>
 80059dc:	2800      	cmp	r0, #0
 80059de:	dbf2      	blt.n	80059c6 <__swhatbuf_r+0x12>
 80059e0:	9a01      	ldr	r2, [sp, #4]
 80059e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80059e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80059ea:	425a      	negs	r2, r3
 80059ec:	415a      	adcs	r2, r3
 80059ee:	602a      	str	r2, [r5, #0]
 80059f0:	e7ee      	b.n	80059d0 <__swhatbuf_r+0x1c>
 80059f2:	2340      	movs	r3, #64	; 0x40
 80059f4:	2000      	movs	r0, #0
 80059f6:	6023      	str	r3, [r4, #0]
 80059f8:	b016      	add	sp, #88	; 0x58
 80059fa:	bd70      	pop	{r4, r5, r6, pc}

080059fc <__smakebuf_r>:
 80059fc:	898b      	ldrh	r3, [r1, #12]
 80059fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a00:	079d      	lsls	r5, r3, #30
 8005a02:	4606      	mov	r6, r0
 8005a04:	460c      	mov	r4, r1
 8005a06:	d507      	bpl.n	8005a18 <__smakebuf_r+0x1c>
 8005a08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a0c:	6023      	str	r3, [r4, #0]
 8005a0e:	6123      	str	r3, [r4, #16]
 8005a10:	2301      	movs	r3, #1
 8005a12:	6163      	str	r3, [r4, #20]
 8005a14:	b002      	add	sp, #8
 8005a16:	bd70      	pop	{r4, r5, r6, pc}
 8005a18:	ab01      	add	r3, sp, #4
 8005a1a:	466a      	mov	r2, sp
 8005a1c:	f7ff ffca 	bl	80059b4 <__swhatbuf_r>
 8005a20:	9900      	ldr	r1, [sp, #0]
 8005a22:	4605      	mov	r5, r0
 8005a24:	4630      	mov	r0, r6
 8005a26:	f000 f875 	bl	8005b14 <_malloc_r>
 8005a2a:	b948      	cbnz	r0, 8005a40 <__smakebuf_r+0x44>
 8005a2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a30:	059a      	lsls	r2, r3, #22
 8005a32:	d4ef      	bmi.n	8005a14 <__smakebuf_r+0x18>
 8005a34:	f023 0303 	bic.w	r3, r3, #3
 8005a38:	f043 0302 	orr.w	r3, r3, #2
 8005a3c:	81a3      	strh	r3, [r4, #12]
 8005a3e:	e7e3      	b.n	8005a08 <__smakebuf_r+0xc>
 8005a40:	4b0d      	ldr	r3, [pc, #52]	; (8005a78 <__smakebuf_r+0x7c>)
 8005a42:	62b3      	str	r3, [r6, #40]	; 0x28
 8005a44:	89a3      	ldrh	r3, [r4, #12]
 8005a46:	6020      	str	r0, [r4, #0]
 8005a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a4c:	81a3      	strh	r3, [r4, #12]
 8005a4e:	9b00      	ldr	r3, [sp, #0]
 8005a50:	6120      	str	r0, [r4, #16]
 8005a52:	6163      	str	r3, [r4, #20]
 8005a54:	9b01      	ldr	r3, [sp, #4]
 8005a56:	b15b      	cbz	r3, 8005a70 <__smakebuf_r+0x74>
 8005a58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a5c:	4630      	mov	r0, r6
 8005a5e:	f000 f93b 	bl	8005cd8 <_isatty_r>
 8005a62:	b128      	cbz	r0, 8005a70 <__smakebuf_r+0x74>
 8005a64:	89a3      	ldrh	r3, [r4, #12]
 8005a66:	f023 0303 	bic.w	r3, r3, #3
 8005a6a:	f043 0301 	orr.w	r3, r3, #1
 8005a6e:	81a3      	strh	r3, [r4, #12]
 8005a70:	89a3      	ldrh	r3, [r4, #12]
 8005a72:	431d      	orrs	r5, r3
 8005a74:	81a5      	strh	r5, [r4, #12]
 8005a76:	e7cd      	b.n	8005a14 <__smakebuf_r+0x18>
 8005a78:	08005869 	.word	0x08005869

08005a7c <_free_r>:
 8005a7c:	b538      	push	{r3, r4, r5, lr}
 8005a7e:	4605      	mov	r5, r0
 8005a80:	2900      	cmp	r1, #0
 8005a82:	d043      	beq.n	8005b0c <_free_r+0x90>
 8005a84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a88:	1f0c      	subs	r4, r1, #4
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	bfb8      	it	lt
 8005a8e:	18e4      	addlt	r4, r4, r3
 8005a90:	f000 f944 	bl	8005d1c <__malloc_lock>
 8005a94:	4a1e      	ldr	r2, [pc, #120]	; (8005b10 <_free_r+0x94>)
 8005a96:	6813      	ldr	r3, [r2, #0]
 8005a98:	4610      	mov	r0, r2
 8005a9a:	b933      	cbnz	r3, 8005aaa <_free_r+0x2e>
 8005a9c:	6063      	str	r3, [r4, #4]
 8005a9e:	6014      	str	r4, [r2, #0]
 8005aa0:	4628      	mov	r0, r5
 8005aa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005aa6:	f000 b93a 	b.w	8005d1e <__malloc_unlock>
 8005aaa:	42a3      	cmp	r3, r4
 8005aac:	d90b      	bls.n	8005ac6 <_free_r+0x4a>
 8005aae:	6821      	ldr	r1, [r4, #0]
 8005ab0:	1862      	adds	r2, r4, r1
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	bf01      	itttt	eq
 8005ab6:	681a      	ldreq	r2, [r3, #0]
 8005ab8:	685b      	ldreq	r3, [r3, #4]
 8005aba:	1852      	addeq	r2, r2, r1
 8005abc:	6022      	streq	r2, [r4, #0]
 8005abe:	6063      	str	r3, [r4, #4]
 8005ac0:	6004      	str	r4, [r0, #0]
 8005ac2:	e7ed      	b.n	8005aa0 <_free_r+0x24>
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	b10a      	cbz	r2, 8005ace <_free_r+0x52>
 8005aca:	42a2      	cmp	r2, r4
 8005acc:	d9fa      	bls.n	8005ac4 <_free_r+0x48>
 8005ace:	6819      	ldr	r1, [r3, #0]
 8005ad0:	1858      	adds	r0, r3, r1
 8005ad2:	42a0      	cmp	r0, r4
 8005ad4:	d10b      	bne.n	8005aee <_free_r+0x72>
 8005ad6:	6820      	ldr	r0, [r4, #0]
 8005ad8:	4401      	add	r1, r0
 8005ada:	1858      	adds	r0, r3, r1
 8005adc:	4282      	cmp	r2, r0
 8005ade:	6019      	str	r1, [r3, #0]
 8005ae0:	d1de      	bne.n	8005aa0 <_free_r+0x24>
 8005ae2:	6810      	ldr	r0, [r2, #0]
 8005ae4:	6852      	ldr	r2, [r2, #4]
 8005ae6:	4401      	add	r1, r0
 8005ae8:	6019      	str	r1, [r3, #0]
 8005aea:	605a      	str	r2, [r3, #4]
 8005aec:	e7d8      	b.n	8005aa0 <_free_r+0x24>
 8005aee:	d902      	bls.n	8005af6 <_free_r+0x7a>
 8005af0:	230c      	movs	r3, #12
 8005af2:	602b      	str	r3, [r5, #0]
 8005af4:	e7d4      	b.n	8005aa0 <_free_r+0x24>
 8005af6:	6820      	ldr	r0, [r4, #0]
 8005af8:	1821      	adds	r1, r4, r0
 8005afa:	428a      	cmp	r2, r1
 8005afc:	bf01      	itttt	eq
 8005afe:	6811      	ldreq	r1, [r2, #0]
 8005b00:	6852      	ldreq	r2, [r2, #4]
 8005b02:	1809      	addeq	r1, r1, r0
 8005b04:	6021      	streq	r1, [r4, #0]
 8005b06:	6062      	str	r2, [r4, #4]
 8005b08:	605c      	str	r4, [r3, #4]
 8005b0a:	e7c9      	b.n	8005aa0 <_free_r+0x24>
 8005b0c:	bd38      	pop	{r3, r4, r5, pc}
 8005b0e:	bf00      	nop
 8005b10:	200004b4 	.word	0x200004b4

08005b14 <_malloc_r>:
 8005b14:	b570      	push	{r4, r5, r6, lr}
 8005b16:	1ccd      	adds	r5, r1, #3
 8005b18:	f025 0503 	bic.w	r5, r5, #3
 8005b1c:	3508      	adds	r5, #8
 8005b1e:	2d0c      	cmp	r5, #12
 8005b20:	bf38      	it	cc
 8005b22:	250c      	movcc	r5, #12
 8005b24:	2d00      	cmp	r5, #0
 8005b26:	4606      	mov	r6, r0
 8005b28:	db01      	blt.n	8005b2e <_malloc_r+0x1a>
 8005b2a:	42a9      	cmp	r1, r5
 8005b2c:	d903      	bls.n	8005b36 <_malloc_r+0x22>
 8005b2e:	230c      	movs	r3, #12
 8005b30:	6033      	str	r3, [r6, #0]
 8005b32:	2000      	movs	r0, #0
 8005b34:	bd70      	pop	{r4, r5, r6, pc}
 8005b36:	f000 f8f1 	bl	8005d1c <__malloc_lock>
 8005b3a:	4a21      	ldr	r2, [pc, #132]	; (8005bc0 <_malloc_r+0xac>)
 8005b3c:	6814      	ldr	r4, [r2, #0]
 8005b3e:	4621      	mov	r1, r4
 8005b40:	b991      	cbnz	r1, 8005b68 <_malloc_r+0x54>
 8005b42:	4c20      	ldr	r4, [pc, #128]	; (8005bc4 <_malloc_r+0xb0>)
 8005b44:	6823      	ldr	r3, [r4, #0]
 8005b46:	b91b      	cbnz	r3, 8005b50 <_malloc_r+0x3c>
 8005b48:	4630      	mov	r0, r6
 8005b4a:	f000 f83d 	bl	8005bc8 <_sbrk_r>
 8005b4e:	6020      	str	r0, [r4, #0]
 8005b50:	4629      	mov	r1, r5
 8005b52:	4630      	mov	r0, r6
 8005b54:	f000 f838 	bl	8005bc8 <_sbrk_r>
 8005b58:	1c43      	adds	r3, r0, #1
 8005b5a:	d124      	bne.n	8005ba6 <_malloc_r+0x92>
 8005b5c:	230c      	movs	r3, #12
 8005b5e:	4630      	mov	r0, r6
 8005b60:	6033      	str	r3, [r6, #0]
 8005b62:	f000 f8dc 	bl	8005d1e <__malloc_unlock>
 8005b66:	e7e4      	b.n	8005b32 <_malloc_r+0x1e>
 8005b68:	680b      	ldr	r3, [r1, #0]
 8005b6a:	1b5b      	subs	r3, r3, r5
 8005b6c:	d418      	bmi.n	8005ba0 <_malloc_r+0x8c>
 8005b6e:	2b0b      	cmp	r3, #11
 8005b70:	d90f      	bls.n	8005b92 <_malloc_r+0x7e>
 8005b72:	600b      	str	r3, [r1, #0]
 8005b74:	18cc      	adds	r4, r1, r3
 8005b76:	50cd      	str	r5, [r1, r3]
 8005b78:	4630      	mov	r0, r6
 8005b7a:	f000 f8d0 	bl	8005d1e <__malloc_unlock>
 8005b7e:	f104 000b 	add.w	r0, r4, #11
 8005b82:	1d23      	adds	r3, r4, #4
 8005b84:	f020 0007 	bic.w	r0, r0, #7
 8005b88:	1ac3      	subs	r3, r0, r3
 8005b8a:	d0d3      	beq.n	8005b34 <_malloc_r+0x20>
 8005b8c:	425a      	negs	r2, r3
 8005b8e:	50e2      	str	r2, [r4, r3]
 8005b90:	e7d0      	b.n	8005b34 <_malloc_r+0x20>
 8005b92:	684b      	ldr	r3, [r1, #4]
 8005b94:	428c      	cmp	r4, r1
 8005b96:	bf16      	itet	ne
 8005b98:	6063      	strne	r3, [r4, #4]
 8005b9a:	6013      	streq	r3, [r2, #0]
 8005b9c:	460c      	movne	r4, r1
 8005b9e:	e7eb      	b.n	8005b78 <_malloc_r+0x64>
 8005ba0:	460c      	mov	r4, r1
 8005ba2:	6849      	ldr	r1, [r1, #4]
 8005ba4:	e7cc      	b.n	8005b40 <_malloc_r+0x2c>
 8005ba6:	1cc4      	adds	r4, r0, #3
 8005ba8:	f024 0403 	bic.w	r4, r4, #3
 8005bac:	42a0      	cmp	r0, r4
 8005bae:	d005      	beq.n	8005bbc <_malloc_r+0xa8>
 8005bb0:	1a21      	subs	r1, r4, r0
 8005bb2:	4630      	mov	r0, r6
 8005bb4:	f000 f808 	bl	8005bc8 <_sbrk_r>
 8005bb8:	3001      	adds	r0, #1
 8005bba:	d0cf      	beq.n	8005b5c <_malloc_r+0x48>
 8005bbc:	6025      	str	r5, [r4, #0]
 8005bbe:	e7db      	b.n	8005b78 <_malloc_r+0x64>
 8005bc0:	200004b4 	.word	0x200004b4
 8005bc4:	200004b8 	.word	0x200004b8

08005bc8 <_sbrk_r>:
 8005bc8:	b538      	push	{r3, r4, r5, lr}
 8005bca:	2300      	movs	r3, #0
 8005bcc:	4c05      	ldr	r4, [pc, #20]	; (8005be4 <_sbrk_r+0x1c>)
 8005bce:	4605      	mov	r5, r0
 8005bd0:	4608      	mov	r0, r1
 8005bd2:	6023      	str	r3, [r4, #0]
 8005bd4:	f7fb fcc0 	bl	8001558 <_sbrk>
 8005bd8:	1c43      	adds	r3, r0, #1
 8005bda:	d102      	bne.n	8005be2 <_sbrk_r+0x1a>
 8005bdc:	6823      	ldr	r3, [r4, #0]
 8005bde:	b103      	cbz	r3, 8005be2 <_sbrk_r+0x1a>
 8005be0:	602b      	str	r3, [r5, #0]
 8005be2:	bd38      	pop	{r3, r4, r5, pc}
 8005be4:	200006dc 	.word	0x200006dc

08005be8 <__sread>:
 8005be8:	b510      	push	{r4, lr}
 8005bea:	460c      	mov	r4, r1
 8005bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bf0:	f000 f896 	bl	8005d20 <_read_r>
 8005bf4:	2800      	cmp	r0, #0
 8005bf6:	bfab      	itete	ge
 8005bf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005bfa:	89a3      	ldrhlt	r3, [r4, #12]
 8005bfc:	181b      	addge	r3, r3, r0
 8005bfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c02:	bfac      	ite	ge
 8005c04:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c06:	81a3      	strhlt	r3, [r4, #12]
 8005c08:	bd10      	pop	{r4, pc}

08005c0a <__swrite>:
 8005c0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c0e:	461f      	mov	r7, r3
 8005c10:	898b      	ldrh	r3, [r1, #12]
 8005c12:	4605      	mov	r5, r0
 8005c14:	05db      	lsls	r3, r3, #23
 8005c16:	460c      	mov	r4, r1
 8005c18:	4616      	mov	r6, r2
 8005c1a:	d505      	bpl.n	8005c28 <__swrite+0x1e>
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c24:	f000 f868 	bl	8005cf8 <_lseek_r>
 8005c28:	89a3      	ldrh	r3, [r4, #12]
 8005c2a:	4632      	mov	r2, r6
 8005c2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c30:	81a3      	strh	r3, [r4, #12]
 8005c32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c36:	463b      	mov	r3, r7
 8005c38:	4628      	mov	r0, r5
 8005c3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c3e:	f000 b817 	b.w	8005c70 <_write_r>

08005c42 <__sseek>:
 8005c42:	b510      	push	{r4, lr}
 8005c44:	460c      	mov	r4, r1
 8005c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c4a:	f000 f855 	bl	8005cf8 <_lseek_r>
 8005c4e:	1c43      	adds	r3, r0, #1
 8005c50:	89a3      	ldrh	r3, [r4, #12]
 8005c52:	bf15      	itete	ne
 8005c54:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c5e:	81a3      	strheq	r3, [r4, #12]
 8005c60:	bf18      	it	ne
 8005c62:	81a3      	strhne	r3, [r4, #12]
 8005c64:	bd10      	pop	{r4, pc}

08005c66 <__sclose>:
 8005c66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c6a:	f000 b813 	b.w	8005c94 <_close_r>
	...

08005c70 <_write_r>:
 8005c70:	b538      	push	{r3, r4, r5, lr}
 8005c72:	4605      	mov	r5, r0
 8005c74:	4608      	mov	r0, r1
 8005c76:	4611      	mov	r1, r2
 8005c78:	2200      	movs	r2, #0
 8005c7a:	4c05      	ldr	r4, [pc, #20]	; (8005c90 <_write_r+0x20>)
 8005c7c:	6022      	str	r2, [r4, #0]
 8005c7e:	461a      	mov	r2, r3
 8005c80:	f7fb f9de 	bl	8001040 <_write>
 8005c84:	1c43      	adds	r3, r0, #1
 8005c86:	d102      	bne.n	8005c8e <_write_r+0x1e>
 8005c88:	6823      	ldr	r3, [r4, #0]
 8005c8a:	b103      	cbz	r3, 8005c8e <_write_r+0x1e>
 8005c8c:	602b      	str	r3, [r5, #0]
 8005c8e:	bd38      	pop	{r3, r4, r5, pc}
 8005c90:	200006dc 	.word	0x200006dc

08005c94 <_close_r>:
 8005c94:	b538      	push	{r3, r4, r5, lr}
 8005c96:	2300      	movs	r3, #0
 8005c98:	4c05      	ldr	r4, [pc, #20]	; (8005cb0 <_close_r+0x1c>)
 8005c9a:	4605      	mov	r5, r0
 8005c9c:	4608      	mov	r0, r1
 8005c9e:	6023      	str	r3, [r4, #0]
 8005ca0:	f7fb fc29 	bl	80014f6 <_close>
 8005ca4:	1c43      	adds	r3, r0, #1
 8005ca6:	d102      	bne.n	8005cae <_close_r+0x1a>
 8005ca8:	6823      	ldr	r3, [r4, #0]
 8005caa:	b103      	cbz	r3, 8005cae <_close_r+0x1a>
 8005cac:	602b      	str	r3, [r5, #0]
 8005cae:	bd38      	pop	{r3, r4, r5, pc}
 8005cb0:	200006dc 	.word	0x200006dc

08005cb4 <_fstat_r>:
 8005cb4:	b538      	push	{r3, r4, r5, lr}
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	4c06      	ldr	r4, [pc, #24]	; (8005cd4 <_fstat_r+0x20>)
 8005cba:	4605      	mov	r5, r0
 8005cbc:	4608      	mov	r0, r1
 8005cbe:	4611      	mov	r1, r2
 8005cc0:	6023      	str	r3, [r4, #0]
 8005cc2:	f7fb fc23 	bl	800150c <_fstat>
 8005cc6:	1c43      	adds	r3, r0, #1
 8005cc8:	d102      	bne.n	8005cd0 <_fstat_r+0x1c>
 8005cca:	6823      	ldr	r3, [r4, #0]
 8005ccc:	b103      	cbz	r3, 8005cd0 <_fstat_r+0x1c>
 8005cce:	602b      	str	r3, [r5, #0]
 8005cd0:	bd38      	pop	{r3, r4, r5, pc}
 8005cd2:	bf00      	nop
 8005cd4:	200006dc 	.word	0x200006dc

08005cd8 <_isatty_r>:
 8005cd8:	b538      	push	{r3, r4, r5, lr}
 8005cda:	2300      	movs	r3, #0
 8005cdc:	4c05      	ldr	r4, [pc, #20]	; (8005cf4 <_isatty_r+0x1c>)
 8005cde:	4605      	mov	r5, r0
 8005ce0:	4608      	mov	r0, r1
 8005ce2:	6023      	str	r3, [r4, #0]
 8005ce4:	f7fb fc21 	bl	800152a <_isatty>
 8005ce8:	1c43      	adds	r3, r0, #1
 8005cea:	d102      	bne.n	8005cf2 <_isatty_r+0x1a>
 8005cec:	6823      	ldr	r3, [r4, #0]
 8005cee:	b103      	cbz	r3, 8005cf2 <_isatty_r+0x1a>
 8005cf0:	602b      	str	r3, [r5, #0]
 8005cf2:	bd38      	pop	{r3, r4, r5, pc}
 8005cf4:	200006dc 	.word	0x200006dc

08005cf8 <_lseek_r>:
 8005cf8:	b538      	push	{r3, r4, r5, lr}
 8005cfa:	4605      	mov	r5, r0
 8005cfc:	4608      	mov	r0, r1
 8005cfe:	4611      	mov	r1, r2
 8005d00:	2200      	movs	r2, #0
 8005d02:	4c05      	ldr	r4, [pc, #20]	; (8005d18 <_lseek_r+0x20>)
 8005d04:	6022      	str	r2, [r4, #0]
 8005d06:	461a      	mov	r2, r3
 8005d08:	f7fb fc19 	bl	800153e <_lseek>
 8005d0c:	1c43      	adds	r3, r0, #1
 8005d0e:	d102      	bne.n	8005d16 <_lseek_r+0x1e>
 8005d10:	6823      	ldr	r3, [r4, #0]
 8005d12:	b103      	cbz	r3, 8005d16 <_lseek_r+0x1e>
 8005d14:	602b      	str	r3, [r5, #0]
 8005d16:	bd38      	pop	{r3, r4, r5, pc}
 8005d18:	200006dc 	.word	0x200006dc

08005d1c <__malloc_lock>:
 8005d1c:	4770      	bx	lr

08005d1e <__malloc_unlock>:
 8005d1e:	4770      	bx	lr

08005d20 <_read_r>:
 8005d20:	b538      	push	{r3, r4, r5, lr}
 8005d22:	4605      	mov	r5, r0
 8005d24:	4608      	mov	r0, r1
 8005d26:	4611      	mov	r1, r2
 8005d28:	2200      	movs	r2, #0
 8005d2a:	4c05      	ldr	r4, [pc, #20]	; (8005d40 <_read_r+0x20>)
 8005d2c:	6022      	str	r2, [r4, #0]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	f7fb fbc4 	bl	80014bc <_read>
 8005d34:	1c43      	adds	r3, r0, #1
 8005d36:	d102      	bne.n	8005d3e <_read_r+0x1e>
 8005d38:	6823      	ldr	r3, [r4, #0]
 8005d3a:	b103      	cbz	r3, 8005d3e <_read_r+0x1e>
 8005d3c:	602b      	str	r3, [r5, #0]
 8005d3e:	bd38      	pop	{r3, r4, r5, pc}
 8005d40:	200006dc 	.word	0x200006dc

08005d44 <_init>:
 8005d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d46:	bf00      	nop
 8005d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d4a:	bc08      	pop	{r3}
 8005d4c:	469e      	mov	lr, r3
 8005d4e:	4770      	bx	lr

08005d50 <_fini>:
 8005d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d52:	bf00      	nop
 8005d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d56:	bc08      	pop	{r3}
 8005d58:	469e      	mov	lr, r3
 8005d5a:	4770      	bx	lr
